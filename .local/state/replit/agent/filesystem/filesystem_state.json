{"file_contents":{"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/chapter-view.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { PolaroidCard } from \"@/components/PolaroidCard\";\nimport type { Section, Chapter } from \"@shared/schema\";\n\nexport default function ChapterView() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n\n  const { data: chapter } = useQuery<Chapter>({\n    queryKey: [`/api/chapters/${id}`],\n  });\n\n  const { data: sections = [] } = useQuery<Section[]>({\n    queryKey: [`/api/chapters/${id}/sections`],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-kdrama-sakura/10 via-kdrama-cream/30 to-kdrama-lavender/10\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8 flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div>\n            <h1 className=\"font-myeongjo text-4xl text-kdrama-ink\">\n              {chapter?.title || \"Loading...\"}\n            </h1>\n            {chapter?.description && (\n              <p className=\"font-noto text-muted-foreground mt-2\">\n                {chapter.description}\n              </p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {sections.map((section) => (\n            <PolaroidCard\n              key={section.id}\n              title={section.title}\n              mood={section.mood || undefined}\n              tags={section.tags || undefined}\n              coverUrl={section.thumbnail || undefined}\n              onClick={() => setLocation(`/read/${section.id}`)}\n            />\n          ))}\n        </div>\n\n        {sections.length === 0 && (\n          <div className=\"text-center py-16\">\n            <p className=\"font-noto text-muted-foreground text-lg\">\n              No sections in this chapter yet.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2192},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ChapterNav.tsx":{"content":"import { ChevronRight } from \"lucide-react\";\nimport { Knot } from \"./Knot\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface Chapter {\n  id: string;\n  title: string;\n  emoji?: string;\n  order: number;\n  isPublic: boolean;\n  pageCount?: number;\n}\n\ninterface ChapterNavProps {\n  chapters: Chapter[];\n  activeChapterId?: string;\n  onChapterClick?: (chapterId: string) => void;\n}\n\nexport function ChapterNav({ chapters, activeChapterId, onChapterClick }: ChapterNavProps) {\n  return (\n    <div className=\"space-y-2\">\n      {chapters.map((chapter, index) => (\n        <div key={chapter.id}>\n          {index > 0 && (\n            <div className=\"flex items-center justify-center py-2\">\n              <Knot size=\"sm\" tone=\"muted\" />\n            </div>\n          )}\n          <Card\n            className={`p-4 hover-elevate cursor-pointer transition-all duration-180 ${\n              activeChapterId === chapter.id\n                ? \"bg-kdrama-sakura/10 dark:bg-kdrama-sakura/5 border-kdrama-thread\"\n                : \"\"\n            }`}\n            onClick={() => onChapterClick?.(chapter.id)}\n            data-testid={`card-chapter-${chapter.id}`}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                {chapter.emoji && (\n                  <span className=\"text-2xl\" role=\"img\" aria-label=\"chapter emoji\">\n                    {chapter.emoji}\n                  </span>\n                )}\n                <div>\n                  <h3 className=\"font-myeongjo font-bold text-kdrama-ink dark:text-foreground\">\n                    {chapter.title}\n                  </h3>\n                  {chapter.pageCount !== undefined && (\n                    <p className=\"font-noto text-xs text-muted-foreground\">\n                      {chapter.pageCount} {chapter.pageCount === 1 ? \"page\" : \"pages\"}\n                    </p>\n                  )}\n                </div>\n              </div>\n              <ChevronRight className=\"w-4 h-4 text-muted-foreground\" />\n            </div>\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2121},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { MusicPlayerProvider } from \"@/contexts/MusicPlayerContext\";\nimport { FloatingMusicPlayer } from \"@/components/FloatingMusicPlayer\";\nimport { PrivateRoute } from \"@/components/PrivateRoute\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/Login\";\nimport ChapterView from \"@/pages/chapter-view\";\nimport SectionReader from \"@/pages/section-reader\";\nimport Admin from \"@/pages/admin\";\nimport BowTieKnotOutline from \"@/pages/bowtie-knot-outline\";\nimport TestGallery from \"@/pages/test-gallery\";\nimport LikedSections from \"@/pages/liked-sections\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={(props) => <PrivateRoute component={Home} {...props} />} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/chapter/:id\" component={(props) => <PrivateRoute component={ChapterView} {...props} />} />\n      <Route path=\"/read/:sectionId\" component={(props) => <PrivateRoute component={SectionReader} {...props} />} />\n      <Route path=\"/liked-sections\" component={(props) => <PrivateRoute component={LikedSections} {...props} />} />\n      <Route path=\"/admin\" component={(props) => <PrivateRoute component={Admin} adminOnly {...props} />} />\n      <Route path=\"/bowtie-outline\" component={BowTieKnotOutline} />\n      <Route path=\"/test-gallery\" component={TestGallery} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <MusicPlayerProvider>\n          <TooltipProvider>\n            <Toaster />\n            <FloatingMusicPlayer />\n            <Router />\n          </TooltipProvider>\n        </MusicPlayerProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2122},"client/src/components/PolaroidCard.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\ninterface PolaroidCardProps {\n  title: string;\n  coverUrl?: string;\n  mood?: string[];\n  tags?: string[];\n  description?: string;\n  onClick?: () => void;\n}\n\nexport function PolaroidCard({\n  title,\n  coverUrl,\n  mood,\n  tags = [],\n  description,\n  onClick,\n}: PolaroidCardProps) {\n  return (\n    <Card\n      className=\"bg-white dark:bg-card shadow-lg hover:shadow-xl transition-all duration-180 hover:-translate-y-1 hover:animate-sway cursor-pointer border-0 overflow-hidden rounded-2xl\"\n      onClick={onClick}\n      data-testid={`card-polaroid-${title.toLowerCase().replace(/\\s+/g, \"-\")}`}\n    >\n      <div className=\"relative\">\n        {coverUrl ? (\n          <img\n            src={coverUrl}\n            alt={title}\n            className=\"w-full h-48 object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-48 bg-gradient-to-br from-kdrama-sakura/30 via-kdrama-lavender/30 to-kdrama-sky/30\" />\n        )}\n        <div className=\"absolute top-2 left-2\">\n          <div className=\"w-3 h-3 rounded-full bg-kdrama-thread shadow-md\" />\n        </div>\n      </div>\n      \n      <CardHeader className=\"pb-2\">\n        <h3 className=\"font-myeongjo text-lg font-bold text-kdrama-ink dark:text-foreground line-clamp-2\">\n          {title}\n        </h3>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-2\">\n        {mood && mood.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\">\n            {mood.slice(0, 2).map((m, idx) => (\n              <Badge key={`mood-${idx}`} variant=\"secondary\" className=\"font-noto text-xs\">\n                {m}\n              </Badge>\n            ))}\n          </div>\n        )}\n        {tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\">\n            {tags.slice(0, 3).map((tag) => (\n              <Badge key={tag} variant=\"outline\" className=\"font-noto text-xs\">\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n        {description && (\n          <p className=\"font-noto text-sm text-muted-foreground line-clamp-2\">\n            {description}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2254},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/examples/AnalyticsDashboard.tsx":{"content":"import { AnalyticsDashboard } from \"../AnalyticsDashboard\";\n\nexport default function AnalyticsDashboardExample() {\n  const mockPageViews = [\n    {\n      id: \"1\",\n      startedAt: new Date(\"2024-03-15T14:30:00\"),\n      endedAt: new Date(\"2024-03-15T14:35:00\"),\n      activeMs: 240000,\n      maxScrollPct: 100,\n      completionMilestone: 100 as const,\n      isReread: false,\n    },\n    {\n      id: \"2\",\n      startedAt: new Date(\"2024-03-16T10:15:00\"),\n      endedAt: new Date(\"2024-03-16T10:20:00\"),\n      activeMs: 180000,\n      maxScrollPct: 75,\n      completionMilestone: 75 as const,\n      isReread: false,\n    },\n    {\n      id: \"3\",\n      startedAt: new Date(\"2024-03-17T16:45:00\"),\n      endedAt: new Date(\"2024-03-17T16:52:00\"),\n      activeMs: 300000,\n      maxScrollPct: 100,\n      completionMilestone: 100 as const,\n      isReread: true,\n    },\n  ];\n\n  return (\n    <div className=\"p-8 bg-kdrama-sky/10 min-h-screen\">\n      <div className=\"max-w-6xl mx-auto\">\n        <h2 className=\"font-myeongjo text-3xl text-kdrama-ink mb-6\">\n          Page Analytics\n        </h2>\n        <AnalyticsDashboard\n          pageViews={mockPageViews}\n          totalVisitors={156}\n          avgActiveTime={220000}\n          avgCompletion={82}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1276},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AnalyticsDashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Eye, Clock, TrendingUp, Users } from \"lucide-react\";\nimport { Knot } from \"./Knot\";\n\ninterface PageView {\n  id: string;\n  startedAt: Date;\n  endedAt?: Date;\n  activeMs: number;\n  maxScrollPct: number;\n  completionMilestone?: 0 | 25 | 50 | 75 | 100;\n  isReread: boolean;\n}\n\ninterface AnalyticsDashboardProps {\n  pageViews?: PageView[];\n  totalVisitors?: number;\n  avgActiveTime?: number;\n  avgCompletion?: number;\n}\n\nexport function AnalyticsDashboard({\n  pageViews = [],\n  totalVisitors = 0,\n  avgActiveTime = 0,\n  avgCompletion = 0,\n}: AnalyticsDashboardProps) {\n  const formatDuration = (ms: number) => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-noto font-medium\">Total Visitors</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-myeongjo font-bold\">{totalVisitors}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-noto font-medium\">Avg. Read Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-myeongjo font-bold\">\n              {formatDuration(avgActiveTime)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-noto font-medium\">Avg. Completion</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-myeongjo font-bold\">{avgCompletion}%</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-noto font-medium\">Page Views</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-myeongjo font-bold\">{pageViews.length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-myeongjo\">Reading Timeline</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {pageViews.slice(0, 5).map((view) => (\n              <div\n                key={view.id}\n                className=\"flex items-center gap-4 p-4 bg-muted/30 rounded-lg\"\n                data-testid={`view-${view.id}`}\n              >\n                <Knot\n                  size=\"md\"\n                  tone={view.completionMilestone === 100 ? \"primary\" : \"muted\"}\n                />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"font-noto text-sm\">\n                      {view.startedAt.toLocaleString()}\n                    </span>\n                    {view.isReread && (\n                      <Badge variant=\"secondary\" className=\"text-xs font-noto\">\n                        Re-read\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-4 text-xs text-muted-foreground font-noto\">\n                    <span>Active: {formatDuration(view.activeMs)}</span>\n                    <span>Scroll: {view.maxScrollPct}%</span>\n                    {view.completionMilestone !== undefined && (\n                      <span>Completion: {view.completionMilestone}%</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4464},"client/src/components/examples/PolaroidCard.tsx":{"content":"import { PolaroidCard } from \"../PolaroidCard\";\n\nexport default function PolaroidCardExample() {\n  return (\n    <div className=\"p-8 bg-kdrama-cream/20 min-h-[400px]\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h3 className=\"font-myeongjo text-2xl text-kdrama-ink mb-6\">Polaroid Cards</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <PolaroidCard\n            title=\"First Meeting Under the Rain\"\n            mood=\"Romantic\"\n            tags={[\"destiny\", \"umbrella\", \"seoul\"]}\n            description=\"The moment our paths crossed on that rainy evening...\"\n            onClick={() => console.log(\"Card clicked\")}\n          />\n          <PolaroidCard\n            title=\"Coffee Shop Confessions\"\n            mood=\"Sweet\"\n            tags={[\"coffee\", \"confession\", \"heartfelt\"]}\n            description=\"Words unspoken finally found their way out...\"\n          />\n          <PolaroidCard\n            title=\"Sunset at Han River\"\n            mood=\"Peaceful\"\n            tags={[\"sunset\", \"han-river\", \"reflection\"]}\n            description=\"Watching the sun set, we talked about everything and nothing...\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1196},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/Login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Heart } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Redirect to home once authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const success = await login(username, password);\n\n    if (success) {\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've successfully logged in.\",\n      });\n      // Don't redirect here - let the auth state update first\n      // The useEffect will handle redirect once isAuthenticated becomes true\n      setIsLoading(false);\n    } else {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid username or password.\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-kdrama-sakura/20 via-kdrama-lavender/20 to-kdrama-sky/20 p-4\">\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-10 left-10 w-32 h-32 bg-kdrama-sakura/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-20 right-20 w-40 h-40 bg-kdrama-lavender/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-kdrama-sky/10 rounded-full blur-3xl\"></div>\n      </div>\n\n      <Card className=\"w-full max-w-md relative z-10 border-kdrama-thread/20 shadow-lg\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"relative\">\n              <Heart className=\"w-12 h-12 text-kdrama-thread fill-kdrama-thread\" />\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-kdrama-thread rounded-full animate-pulse\"></div>\n            </div>\n          </div>\n          <CardTitle className=\"font-myeongjo text-3xl text-kdrama-ink\">\n            紅線日記\n          </CardTitle>\n          <CardDescription className=\"font-noto text-base\">\n            Red String of Fate Journal\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"font-noto\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Enter your username\"\n                required\n                disabled={isLoading}\n                data-testid=\"input-username\"\n                className=\"font-noto\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"font-noto\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n                disabled={isLoading}\n                data-testid=\"input-password\"\n                className=\"font-noto\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full font-noto\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Logging in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <p className=\"text-xs text-center text-muted-foreground font-noto\">\n            Please login to access the journal. Contact admin for account access.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4601},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { existsSync, mkdirSync } from \"fs\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertChapterSchema, insertSectionSchema, insertPageSchema, insertReadingProgressSchema, insertAnalyticsEventSchema } from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst uploadsDir = path.join(process.cwd(), \"public\", \"uploads\");\nif (!existsSync(uploadsDir)) {\n  mkdirSync(uploadsDir, { recursive: true });\n}\n\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, uploadsDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      const ext = path.extname(file.originalname);\n      // Use 'media' prefix for both images and videos\n      cb(null, `media-${uniqueSuffix}${ext}`);\n    }\n  }),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit (covers both images and videos)\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow both image and video files\n    const imageTypes = /jpeg|jpg|png|gif|webp/;\n    const videoTypes = /mp4|webm|mov|avi|wmv|ogg|quicktime|x-msvideo|x-ms-wmv/;\n    const ext = path.extname(file.originalname).toLowerCase().replace('.', '');\n    \n    // Check if it's an image\n    const isImage = imageTypes.test(file.mimetype) || imageTypes.test(ext);\n    // Check if it's a video\n    const isVideo = videoTypes.test(file.mimetype) || videoTypes.test(ext) || \n                    file.mimetype.startsWith('video/');\n    \n    if (isImage || isVideo) {\n      return cb(null, true);\n    }\n    cb(new Error('Only image and video files are allowed'));\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // File upload endpoint\n  app.post(\"/api/upload/image\", upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n      \n      // Return the URL path to the uploaded file\n      const fileUrl = `/uploads/${req.file.filename}`;\n      res.json({ url: fileUrl });\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload file\" });\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ error: \"Username and password required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const passwordMatch = await bcrypt.compare(password, user.password);\n      \n      if (!passwordMatch) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        role: user.role,\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Session validation endpoint\n  app.post(\"/api/auth/validate\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\", invalidSession: true });\n      }\n\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(401).json({ \n          error: \"Session expired. Please log in again.\", \n          invalidSession: true \n        });\n      }\n\n      res.json({\n        valid: true,\n        user: {\n          id: user.id,\n          username: user.username,\n          role: user.role,\n        }\n      });\n    } catch (error) {\n      console.error(\"Session validation error:\", error);\n      res.status(500).json({ error: \"Failed to validate session\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users.map((u: any) => ({ id: u.id, username: u.username, role: u.role })));\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  // Chapter routes\n  app.get(\"/api/chapters\", async (req, res) => {\n    try {\n      const allChapters = await storage.getChapters();\n      res.json(allChapters);\n    } catch (error) {\n      console.error(\"Get chapters error:\", error);\n      res.status(500).json({ error: \"Failed to fetch chapters\" });\n    }\n  });\n\n  app.get(\"/api/chapters/:id\", async (req, res) => {\n    try {\n      const chapter = await storage.getChapter(req.params.id);\n      if (!chapter) {\n        return res.status(404).json({ error: \"Chapter not found\" });\n      }\n      res.json(chapter);\n    } catch (error) {\n      console.error(\"Get chapter error:\", error);\n      res.status(500).json({ error: \"Failed to fetch chapter\" });\n    }\n  });\n\n  app.post(\"/api/chapters\", async (req, res) => {\n    try {\n      const validatedData = insertChapterSchema.parse(req.body);\n      const chapter = await storage.createChapter(validatedData);\n      res.status(201).json(chapter);\n    } catch (error) {\n      console.error(\"Create chapter error:\", error);\n      res.status(400).json({ error: \"Invalid chapter data\" });\n    }\n  });\n\n  app.patch(\"/api/chapters/:id\", async (req, res) => {\n    try {\n      const chapter = await storage.updateChapter(req.params.id, req.body);\n      if (!chapter) {\n        return res.status(404).json({ error: \"Chapter not found\" });\n      }\n      res.json(chapter);\n    } catch (error) {\n      console.error(\"Update chapter error:\", error);\n      res.status(500).json({ error: \"Failed to update chapter\" });\n    }\n  });\n\n  app.delete(\"/api/chapters/:id\", async (req, res) => {\n    try {\n      await storage.deleteChapter(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete chapter error:\", error);\n      res.status(500).json({ error: \"Failed to delete chapter\" });\n    }\n  });\n\n  // Section routes\n  app.get(\"/api/sections\", async (req, res) => {\n    try {\n      const allSections = await storage.getAllSections();\n      res.json(allSections);\n    } catch (error) {\n      console.error(\"Get all sections error:\", error);\n      res.status(500).json({ error: \"Failed to fetch sections\" });\n    }\n  });\n\n  app.get(\"/api/chapters/:chapterId/sections\", async (req, res) => {\n    try {\n      const allSections = await storage.getSectionsByChapter(req.params.chapterId);\n      res.json(allSections);\n    } catch (error) {\n      console.error(\"Get sections error:\", error);\n      res.status(500).json({ error: \"Failed to fetch sections\" });\n    }\n  });\n\n  app.get(\"/api/sections/:id\", async (req, res) => {\n    try {\n      const section = await storage.getSection(req.params.id);\n      if (!section) {\n        return res.status(404).json({ error: \"Section not found\" });\n      }\n      res.json(section);\n    } catch (error) {\n      console.error(\"Get section error:\", error);\n      res.status(500).json({ error: \"Failed to fetch section\" });\n    }\n  });\n\n  app.post(\"/api/sections\", async (req, res) => {\n    try {\n      // Validate input data first\n      const validatedData = insertSectionSchema.parse(req.body);\n      \n      // Create section\n      const section = await storage.createSection(validatedData);\n      \n      // Create a default first page with empty content\n      try {\n        await storage.createPage({\n          sectionId: section.id,\n          content: \"\",\n          pageNumber: 1,\n        });\n      } catch (pageError) {\n        // Rollback: Delete the section if page creation fails\n        console.error(\"Failed to create default page, rolling back section:\", pageError);\n        try {\n          await storage.deleteSection(section.id);\n        } catch (deleteError) {\n          console.error(\"Failed to rollback section deletion:\", deleteError);\n        }\n        throw new Error(\"Failed to create section with default page\");\n      }\n      \n      res.status(201).json(section);\n    } catch (error) {\n      console.error(\"Create section error:\", error);\n      // Differentiate validation errors from storage failures\n      if (error instanceof Error && error.message === \"Failed to create section with default page\") {\n        res.status(500).json({ error: \"Server error creating section\" });\n      } else if (error instanceof Error && error.name === \"ZodError\") {\n        res.status(400).json({ error: \"Invalid section data\" });\n      } else {\n        res.status(500).json({ error: \"Server error\" });\n      }\n    }\n  });\n\n  // Reorder route must come before :id route to prevent \"reorder\" being treated as an ID\n  app.patch(\"/api/sections/reorder\", async (req, res) => {\n    try {\n      const { sectionOrders } = req.body;\n      if (!Array.isArray(sectionOrders) || sectionOrders.length === 0) {\n        return res.status(400).json({ error: \"sectionOrders must be a non-empty array\" });\n      }\n\n      // Validate that all sections belong to the same chapter\n      const sectionIds = sectionOrders.map(so => so.id);\n      const sections = await Promise.all(sectionIds.map(id => storage.getSection(id)));\n      \n      if (sections.some(s => !s)) {\n        return res.status(404).json({ error: \"One or more sections not found\" });\n      }\n\n      const chapterIds = new Set(sections.map(s => s!.chapterId));\n      if (chapterIds.size > 1) {\n        return res.status(400).json({ error: \"All sections must belong to the same chapter\" });\n      }\n\n      // Validate order values are unique and sequential\n      const orders = sectionOrders.map(so => so.order).sort((a, b) => a - b);\n      const uniqueOrders = new Set(orders);\n      if (uniqueOrders.size !== orders.length) {\n        return res.status(400).json({ error: \"Order values must be unique\" });\n      }\n\n      await storage.reorderSections(sectionOrders);\n      res.status(200).json({ success: true });\n    } catch (error) {\n      console.error(\"Reorder sections error:\", error);\n      res.status(500).json({ error: \"Failed to reorder sections\" });\n    }\n  });\n\n  app.patch(\"/api/sections/:id\", async (req, res) => {\n    try {\n      // Validate input - use partial schema to allow updating only some fields\n      const validatedData = insertSectionSchema.partial().parse(req.body);\n      const section = await storage.updateSection(req.params.id, validatedData);\n      if (!section) {\n        return res.status(404).json({ error: \"Section not found\" });\n      }\n      res.json(section);\n    } catch (error) {\n      console.error(\"Update section error:\", error);\n      if (error instanceof Error && error.name === \"ZodError\") {\n        res.status(400).json({ error: \"Invalid section data\" });\n      } else {\n        res.status(500).json({ error: \"Failed to update section\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/sections/:id\", async (req, res) => {\n    try {\n      await storage.deleteSection(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete section error:\", error);\n      res.status(500).json({ error: \"Failed to delete section\" });\n    }\n  });\n\n  app.get(\"/api/sections/:sectionId/progress\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      const progress = await storage.getReadingProgress(userId, req.params.sectionId);\n      res.json(progress || null);\n    } catch (error) {\n      console.error(\"Get section progress error:\", error);\n      res.status(500).json({ error: \"Failed to fetch section progress\" });\n    }\n  });\n\n  // Page routes\n  app.get(\"/api/pages\", async (req, res) => {\n    try {\n      const allPages = await storage.getAllPages();\n      res.json(allPages);\n    } catch (error) {\n      console.error(\"Get all pages error:\", error);\n      res.status(500).json({ error: \"Failed to fetch pages\" });\n    }\n  });\n\n  app.get(\"/api/sections/:sectionId/pages\", async (req, res) => {\n    try {\n      const allPages = await storage.getPagesBySection(req.params.sectionId);\n      res.json(allPages);\n    } catch (error) {\n      console.error(\"Get pages error:\", error);\n      res.status(500).json({ error: \"Failed to fetch pages\" });\n    }\n  });\n\n  app.get(\"/api/pages/:id\", async (req, res) => {\n    try {\n      const page = await storage.getPage(req.params.id);\n      if (!page) {\n        return res.status(404).json({ error: \"Page not found\" });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error(\"Get page error:\", error);\n      res.status(500).json({ error: \"Failed to fetch page\" });\n    }\n  });\n\n  app.post(\"/api/pages\", async (req, res) => {\n    try {\n      const validatedData = insertPageSchema.parse(req.body);\n      const page = await storage.createPage(validatedData);\n      res.status(201).json(page);\n    } catch (error) {\n      console.error(\"Create page error:\", error);\n      res.status(400).json({ error: \"Invalid page data\" });\n    }\n  });\n\n  app.patch(\"/api/pages/:id\", async (req, res) => {\n    try {\n      const page = await storage.updatePage(req.params.id, req.body);\n      if (!page) {\n        return res.status(404).json({ error: \"Page not found\" });\n      }\n      res.json(page);\n    } catch (error) {\n      console.error(\"Update page error:\", error);\n      res.status(500).json({ error: \"Failed to update page\" });\n    }\n  });\n\n  app.delete(\"/api/pages/:id\", async (req, res) => {\n    try {\n      await storage.deletePage(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete page error:\", error);\n      res.status(500).json({ error: \"Failed to delete page\" });\n    }\n  });\n\n  // Reading progress routes\n  app.get(\"/api/reading-progress\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      const progress = await storage.getUserReadingProgress(userId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Get reading progress error:\", error);\n      res.status(500).json({ error: \"Failed to fetch reading progress\" });\n    }\n  });\n\n  app.get(\"/api/reading-progress/last\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      const progress = await storage.getLastReadSection(userId);\n      res.json(progress || null);\n    } catch (error) {\n      console.error(\"Get last read error:\", error);\n      res.status(500).json({ error: \"Failed to fetch last read section\" });\n    }\n  });\n\n  app.post(\"/api/reading-progress\", async (req, res) => {\n    try {\n      const validatedData = insertReadingProgressSchema.parse(req.body);\n      \n      // Validate that user exists\n      const user = await storage.getUser(validatedData.userId);\n      if (!user) {\n        return res.status(401).json({ \n          error: \"Your session has expired. Please log in again.\", \n          invalidSession: true \n        });\n      }\n      \n      const progress = await storage.upsertReadingProgress(validatedData);\n      res.json(progress);\n    } catch (error: any) {\n      console.error(\"Save reading progress error:\", error);\n      \n      // Check for foreign key constraint errors\n      if (error.code === '23503' && error.detail?.includes('user_id')) {\n        return res.status(401).json({ \n          error: \"Your session has expired. Please log in again.\", \n          invalidSession: true \n        });\n      }\n      \n      res.status(400).json({ error: \"Invalid progress data\" });\n    }\n  });\n\n  app.get(\"/api/chapters/:chapterId/progress\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      const progress = await storage.getChapterProgress(userId, req.params.chapterId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Get chapter progress error:\", error);\n      res.status(500).json({ error: \"Failed to fetch chapter progress\" });\n    }\n  });\n\n  // Liked sections routes\n  app.post(\"/api/sections/:sectionId/like\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      \n      // Validate that user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ \n          error: \"Your session has expired. Please log in again.\", \n          invalidSession: true \n        });\n      }\n      \n      const liked = await storage.likeSection(userId, req.params.sectionId);\n      res.json(liked);\n    } catch (error: any) {\n      console.error(\"Like section error:\", error);\n      \n      // Check for foreign key constraint errors\n      if (error.code === '23503' && error.detail?.includes('user_id')) {\n        return res.status(401).json({ \n          error: \"Your session has expired. Please log in again.\", \n          invalidSession: true \n        });\n      }\n      \n      res.status(500).json({ error: \"Failed to like section. Please try again.\" });\n    }\n  });\n\n  app.delete(\"/api/sections/:sectionId/like\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      \n      // Validate that user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ \n          error: \"Your session has expired. Please log in again.\", \n          invalidSession: true \n        });\n      }\n      \n      await storage.unlikeSection(userId, req.params.sectionId);\n      res.status(204).send();\n    } catch (error: any) {\n      console.error(\"Unlike section error:\", error);\n      \n      // Check for foreign key constraint errors  \n      if (error.code === '23503' && error.detail?.includes('user_id')) {\n        return res.status(401).json({ \n          error: \"Your session has expired. Please log in again.\", \n          invalidSession: true \n        });\n      }\n      \n      res.status(500).json({ error: \"Failed to unlike section. Please try again.\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/liked-sections\", async (req, res) => {\n    try {\n      const sections = await storage.getLikedSectionsByUser(req.params.userId);\n      res.json(sections);\n    } catch (error) {\n      console.error(\"Get liked sections error:\", error);\n      res.status(500).json({ error: \"Failed to fetch liked sections\" });\n    }\n  });\n\n  app.get(\"/api/sections/:sectionId/like-status\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      const isLiked = await storage.isLikedByUser(userId, req.params.sectionId);\n      res.json({ isLiked });\n    } catch (error) {\n      console.error(\"Get like status error:\", error);\n      res.status(500).json({ error: \"Failed to fetch like status\" });\n    }\n  });\n\n  app.get(\"/api/sections/:sectionId/like-count\", async (req, res) => {\n    try {\n      const count = await storage.getLikedSectionsCount(req.params.sectionId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Get like count error:\", error);\n      res.status(500).json({ error: \"Failed to fetch like count\" });\n    }\n  });\n\n  // Analytics routes\n  app.post(\"/api/analytics\", async (req, res) => {\n    try {\n      const validatedData = insertAnalyticsEventSchema.parse(req.body);\n      const event = await storage.createAnalyticsEvent(validatedData);\n      res.status(201).json(event);\n    } catch (error) {\n      console.error(\"Create analytics event error:\", error);\n      res.status(400).json({ error: \"Invalid analytics data\" });\n    }\n  });\n\n  app.get(\"/api/analytics/summary\", async (req, res) => {\n    try {\n      const summary = await storage.getAnalyticsSummary();\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Get analytics summary error:\", error);\n      res.status(500).json({ error: \"Failed to fetch analytics summary\" });\n    }\n  });\n\n  app.get(\"/api/analytics/user/:userId\", async (req, res) => {\n    try {\n      const events = await storage.getAnalyticsByUser(req.params.userId);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Get user analytics error:\", error);\n      res.status(500).json({ error: \"Failed to fetch user analytics\" });\n    }\n  });\n\n  app.get(\"/api/analytics/chapter/:chapterId\", async (req, res) => {\n    try {\n      const events = await storage.getAnalyticsByChapter(req.params.chapterId);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Get chapter analytics error:\", error);\n      res.status(500).json({ error: \"Failed to fetch chapter analytics\" });\n    }\n  });\n\n  app.get(\"/api/analytics/dashboard\", async (req, res) => {\n    try {\n      const dashboardData = await storage.getAnalyticsDashboard();\n      res.json(dashboardData);\n    } catch (error) {\n      console.error(\"Get analytics dashboard error:\", error);\n      res.status(500).json({ error: \"Failed to fetch analytics dashboard\" });\n    }\n  });\n\n  app.get(\"/api/analytics/activity-log\", async (req, res) => {\n    try {\n      const filters = {\n        userId: req.query.userId as string | undefined,\n        chapterId: req.query.chapterId as string | undefined,\n        sectionId: req.query.sectionId as string | undefined,\n        eventType: req.query.eventType as string | undefined,\n        startDate: req.query.startDate as string | undefined,\n        endDate: req.query.endDate as string | undefined,\n      };\n      const activityLog = await storage.getActivityLog(filters);\n      res.json(activityLog);\n    } catch (error) {\n      console.error(\"Get activity log error:\", error);\n      res.status(500).json({ error: \"Failed to fetch activity log\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":22290},"server/seed.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\n\nasync function seed() {\n  try {\n    console.log(\"Seeding database...\");\n\n    // Create admin user\n    const adminUser = await storage.createUser({\n      username: \"admin\",\n      password: await bcrypt.hash(\"admin123\", 10),\n      role: \"admin\",\n    });\n    console.log(\"Created admin user:\", adminUser.username);\n\n    // Create reader user for testing\n    const readerUser = await storage.createUser({\n      username: \"reader\",\n      password: await bcrypt.hash(\"reader123\", 10),\n      role: \"reader\",\n    });\n    console.log(\"Created reader user:\", readerUser.username);\n\n    // Create Chapter 1: Spring Destiny\n    const chapter1 = await storage.createChapter({\n      title: \"Spring Destiny\",\n      description: \"The beginning of our story under the cherry blossoms\",\n      songUrl: \"https://open.spotify.com/track/0JiW8BRZONMh9BwQ4jZGbJ\",\n      order: 1,\n    });\n\n    // Create sections for Chapter 1\n    const section1 = await storage.createSection({\n      chapterId: chapter1.id,\n      title: \"Under the Cherry Blossoms\",\n      mood: [\"Romantic\"],\n      tags: [\"spring\", \"first-meeting\", \"destiny\"],\n      songUrl: \"https://open.spotify.com/track/5K4W6rqBFWDnAN6FQUkS6x\",\n      order: 1,\n    });\n\n    const section2 = await storage.createSection({\n      chapterId: chapter1.id,\n      title: \"The Coffee Shop Promise\",\n      mood: [\"Hopeful\"],\n      tags: [\"cafe\", \"promise\", \"beginning\"],\n      songUrl: \"https://open.spotify.com/track/2FDTHlrBguDzQod7tMcvsp\",\n      order: 2,\n    });\n\n    // Create pages for section 1\n    await storage.createPage({\n      sectionId: section1.id,\n      content: `Seoul in the spring is a different world. The cherry blossoms paint the city in soft pinks and whites, and everywhere you look, there's a promise of new beginnings.\n\nI didn't expect to meet you that day. The forecast said rain, but I went out anyway, drawn by the last day of cherry blossom season at Yeouido Park.\n\nThe petals were falling like snow, and I was trying to capture the perfect photo when my camera slipped from my hands. Before it could hit the ground, you caught it.\n\n\"Careful,\" you said, smiling. \"These moments are too precious to drop.\"\n\nThat's when I first saw your eyes – warm, kind, and somehow familiar, as if I'd known them in another lifetime.\n\nThey say there's a red thread connecting those who are destined to meet. In that moment, under the falling petals, I felt it pull tight between us.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section1.id,\n      content: `\"Thank you,\" I managed to say, my heart beating faster than it should from a simple act of kindness.\n\n\"I'm here doing the same thing,\" you said, showing me your own camera. \"Trying to hold onto spring before it's gone.\"\n\nWe walked together that afternoon, comparing photos, talking about nothing and everything. You told me about your work as a photographer, how you chase light and moments. I told you about my writing, how I try to capture feelings in words.\n\nWhen the rain finally came, we stood under a single umbrella, watching the last petals wash away down the street.\n\n\"I feel like I've been waiting to meet you,\" you said quietly.\n\n\"Me too,\" I whispered back, and I meant it with every fiber of my being.\n\nThat was the beginning. Our red thread had found its match.`,\n      pageNumber: 2,\n    });\n\n    // Create pages for section 2\n    await storage.createPage({\n      sectionId: section2.id,\n      content: `The café became our place. Every Sunday at 2 PM, without fail, we'd meet at the corner table by the window.\n\n\"Same order?\" the barista would ask, already knowing the answer. Two americanos, one croissant to share.\n\nYou'd show me the photos from your week – street scenes, landscapes, faces that told stories. I'd read you passages from whatever I was working on, watching your reactions to gauge if the words landed right.\n\n\"You capture time,\" I told you once. \"I capture feelings.\"\n\n\"Maybe together we capture life,\" you said, and that's when you made the promise.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section2.id,\n      content: `\"Let's make a promise,\" you said, pulling out your camera. \"Every important moment, we document it. Your words, my photos. We'll create our own archive of this love.\"\n\nLove. That was the first time either of us had said it out loud.\n\n\"Yes,\" I agreed, feeling the red thread between us pull tighter, more visible, more real.\n\nYou took a photo of us in the café window, the spring light filtering through, our reflections overlapping with the Seoul street behind us.\n\n\"The first entry in our archive,\" you said, and kissed my forehead.\n\nI wrote three words in my notebook: \"Spring. Destiny. Forever.\"\n\nThe promise was made. The thread was tied. And our story continued to unfold, one moment at a time.`,\n      pageNumber: 2,\n    });\n\n    // Create Chapter 2: Summer Adventures\n    const chapter2 = await storage.createChapter({\n      title: \"Summer Adventures\",\n      description: \"Exploring the city together in the golden summer light\",\n      songUrl: \"https://open.spotify.com/track/6hOz5sVQXeKgLePPN0LVZP\",\n      order: 2,\n    });\n\n    const section3 = await storage.createSection({\n      chapterId: chapter2.id,\n      title: \"Han River Nights\",\n      mood: [\"Peaceful\"],\n      tags: [\"summer\", \"han-river\", \"memories\"],\n      songUrl: \"https://open.spotify.com/track/5fVZC9GiM4e8vu99W0Xf6J\",\n      order: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section3.id,\n      content: `Summer in Seoul brought a different kind of magic. The humid air carried the sounds of cicadas and laughter from the Han River parks.\n\nEvery Friday night, we'd ride our bikes along the river path, watching the city lights reflect on the water. You'd bring your camera, always ready to capture the golden hour.\n\n\"Look,\" you'd say, pointing at the way the sunset painted the bridges. \"This is why I love photography. How it freezes these fleeting moments.\"\n\nWe'd stop at the convenience store, buying cold drinks and kimbap, finding our spot on the grass. Other couples surrounded us, but in those moments, we had our own universe.\n\nThe red thread that connected us seemed to glow brighter in the summer twilight.`,\n      pageNumber: 1,\n    });\n\n    // Create Chapter 3: Autumn Reflections\n    const chapter3 = await storage.createChapter({\n      title: \"Autumn Reflections\",\n      description: \"The changing seasons mirror the changes in our hearts\",\n      songUrl: \"https://open.spotify.com/track/0tgVpDi06FyKpA1z0VMD4v\",\n      order: 3,\n    });\n\n    const section4 = await storage.createSection({\n      chapterId: chapter3.id,\n      title: \"Golden Leaves and Memories\",\n      mood: [\"Nostalgic\"],\n      tags: [\"autumn\", \"reflection\", \"photography\"],\n      songUrl: \"https://open.spotify.com/track/1QY7OuUCxVBZCaNplxEpZg\",\n      order: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section4.id,\n      content: `Autumn arrived quietly in Seoul. The ginkgo trees lining the streets began their transformation into gold, and the air carried a crispness that reminded us of time passing.\n\nWe spent that October afternoon in Nami Island, walking among the metasequoia trees. The path was covered in fallen leaves, creating a carpet of amber and gold.\n\n\"This is my favorite season,\" you said, raising your camera to capture the dappled sunlight filtering through the canopy. \"Everything is beautiful but temporary. Just like these moments we're capturing.\"\n\n[embed:https://images.unsplash.com/photo-1541339907-f89f0be0e2ac]\n\nI held your hand tighter, understanding the weight of those words. Our archive was growing, each photo and journal entry a thread in the tapestry of our shared story.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section4.id,\n      content: `\"Look at this,\" you said, showing me your camera screen. It was us, reflected in a puddle, surrounded by fallen leaves. \"Beautiful imperfection.\"\n\nWe stopped at a café overlooking the river, ordering hot chocolates and watching other couples pose for photos under the autumn trees.\n\n\"Remember when we first met?\" I asked. \"Under the cherry blossoms in spring?\"\n\n\"How could I forget?\" you smiled. \"We've been through spring, summer, and now autumn together.\"\n\n[embed:https://images.unsplash.com/photo-1544251451-6752e8687e4a]\n\n\"And we'll see winter together too,\" I said, adding another page to my journal. The red thread between us felt stronger than ever, woven through the seasons.`,\n      pageNumber: 2,\n    });\n\n    // Create Chapter 4: Winter Warmth\n    const chapter4 = await storage.createChapter({\n      title: \"Winter Warmth\",\n      description: \"Finding warmth in each other during the coldest season\",\n      songUrl: \"https://open.spotify.com/track/3RiPr603aXAoi4GHyXx0uy\",\n      order: 4,\n    });\n\n    const section5 = await storage.createSection({\n      chapterId: chapter4.id,\n      title: \"First Snow\",\n      mood: [\"Magical\"],\n      tags: [\"winter\", \"snow\", \"romance\"],\n      songUrl: \"https://open.spotify.com/track/40riOy7x9W7GXjyGp4pjAv\",\n      order: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section5.id,\n      content: `They say the first snow of winter is magical in Korea. If you see it with someone special, your love will last forever.\n\nI was at home when you called. \"Look outside,\" you said breathlessly.\n\nI pulled back the curtain to see soft, white flakes drifting down from the dark sky. The streetlights illuminated each snowflake like tiny stars falling to earth.\n\n\"I'm coming over,\" you said. \"We need to see this together.\"\n\nTwenty minutes later, you were at my door, snowflakes caught in your hair, your camera around your neck, and that familiar smile on your face.\n\n\"Come on,\" you said, taking my hand. \"Let's catch the first snow.\"`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section5.id,\n      content: `We stood in the empty park, faces turned up to the sky, watching the snow fall. You took photos while I described the feeling in words only I could articulate.\n\n\"It's like the universe is blessing us,\" I said softly.\n\n[embed:https://images.unsplash.com/photo-1482164565953-04b62dcac1cd]\n\n\"The first snow with you,\" you whispered, setting down your camera to hold both my hands. \"This moment, right now, is everything.\"\n\nAround us, Seoul was transforming into a winter wonderland. But all I could see was you, the red thread between us glowing brighter in the falling snow.\n\n\"Forever,\" I promised.\n\n\"Forever,\" you echoed.`,\n      pageNumber: 2,\n    });\n\n    const section6 = await storage.createSection({\n      chapterId: chapter4.id,\n      title: \"Holiday Market Adventures\",\n      mood: [\"Joyful\"],\n      tags: [\"winter\", \"market\", \"celebration\"],\n      songUrl: \"https://open.spotify.com/track/2aJDlirz6v2a4HREki98cP\",\n      order: 2,\n    });\n\n    await storage.createPage({\n      sectionId: section6.id,\n      content: `December brought the holiday markets to Seoul. Myeongdong was transformed into a wonderland of lights, street food vendors, and festive music.\n\nWe bundled up in matching scarves (your idea, not mine, but I secretly loved it) and dove into the crowds. Your camera was busy capturing everything: the glowing decorations, the steaming tteokbokki stands, children laughing over roasted chestnuts.\n\n\"Try this,\" you said, offering me a cup of hot cinnamon tea. \"Perfect for a cold night.\"\n\nWe wandered through the stalls, your hand warm in mine despite the freezing temperature.\n\n[embed:https://images.unsplash.com/photo-1513094735237-8f2714d57c13]\n\n\"Look,\" you pointed to a stall selling red thread bracelets. \"Like our red thread of fate.\"\n\nWe bought two matching bracelets, tying them around each other's wrists with promises whispered between the knots.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section6.id,\n      content: `As the evening grew later, we found ourselves on a quiet street away from the crowds. The Christmas lights created a magical canopy above us.\n\n\"You know what I love most about winter?\" you asked, pulling me close.\n\n\"What?\"\n\n\"It gives me an excuse to hold you closer.\"\n\nI laughed, wrapping my arms around you. \"You don't need an excuse.\"\n\n[embed:https://images.unsplash.com/photo-1512389142860-9c449e58a543]\n\nWe took a selfie there, under the lights, our smiles bright and our hearts full. Another entry in our ever-growing archive of love.\n\n\"This has been the best year,\" I said.\n\n\"It's only the beginning,\" you replied. \"We have so many more seasons together.\"\n\nAnd I believed you, with every fiber of my being.`,\n      pageNumber: 2,\n    });\n\n    // Create Chapter 5: Special Moments\n    const chapter5 = await storage.createChapter({\n      title: \"Special Moments\",\n      description: \"The unforgettable experiences that define our journey\",\n      songUrl: \"https://open.spotify.com/track/0u2P5u6lvoDfwTYjAADbn4\",\n      order: 5,\n    });\n\n    const section7 = await storage.createSection({\n      chapterId: chapter5.id,\n      title: \"The Rooftop Concert\",\n      mood: [\"Exciting\"],\n      tags: [\"music\", \"concert\", \"celebration\"],\n      songUrl: \"https://open.spotify.com/track/5K4W6rqBFWDnAN6FQUkS6x\",\n      order: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section7.id,\n      content: `You surprised me with tickets to a rooftop concert in Hongdae. I didn't even know how you managed to get them – they were sold out within minutes of release.\n\n\"I have my ways,\" you said with that mischievous smile I'd grown to love.\n\nThe venue was intimate, maybe a hundred people maximum, with the Seoul skyline as our backdrop. The indie band played acoustic versions of popular K-drama OSTs, and every song felt like it was written about us.\n\n[embed:https://images.unsplash.com/photo-1514525253161-7a46d19cd819]\n\n\"This is incredible,\" I whispered during a soft ballad, leaning against you.\n\n\"I wanted to give you a night you'd never forget,\" you said, kissing the top of my head.\n\nMission accomplished.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section7.id,\n      content: `As the final song played, the lead singer dedicated it to \"all the lovers finding their way to each other tonight.\"\n\nYou stood, offering your hand. \"Dance with me?\"\n\nRight there, on that rooftop under the stars, we swayed to the music. Other couples joined in, but it felt like we were the only two people in the world.\n\n[embed:https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3]\n\n\"Thank you for this,\" I said.\n\n\"Thank you for being exactly who you are,\" you replied.\n\nThe red thread between us pulsed with every heartbeat, binding us tighter with each passing moment.\n\nI knew then that this wasn't just a relationship. This was destiny, written in the stars, sealed by fate, and captured forever in our archive.`,\n      pageNumber: 2,\n    });\n\n    // Add a section with Instagram gallery content to demonstrate the new feature\n    const section8 = await storage.createSection({\n      chapterId: chapter3.id,\n      title: \"Behind the Scenes\",\n      mood: [\"Social\", \"Fun\"],\n      tags: [\"instagram\", \"behind-the-scenes\", \"memories\"],\n      order: 4,\n    });\n\n    await storage.createPage({\n      sectionId: section8.id,\n      content: `Sometimes the best memories are the ones we share in real-time. Here are some moments from our Seoul adventures that we captured for Instagram.\n\nOur favorite cafe in Gangnam where we spent countless afternoons:\n[instagram-gallery:https://www.instagram.com/p/C3LZuNOPQx5/,https://www.instagram.com/reel/C9HQoUJp0c5/,https://www.instagram.com/p/C2kZ_NvOQx5/]\n\nThe aesthetic really matched our mood that day - soft pastels and warm lighting, just like in our favorite drama scenes.`,\n      pageNumber: 1,\n    });\n\n    await storage.createPage({\n      sectionId: section8.id,\n      content: `The cooking class where you finally mastered making kimchi jjigae:\n\n[instagram-gallery:https://www.instagram.com/p/C8kZ_NvOQx5/,https://www.instagram.com/reel/C7HQoUJp0c5/]\n\nYour proud smile when the instructor complimented your technique was everything. I still have that video saved on my phone.`,\n      pageNumber: 2,\n    });\n\n    await storage.createPage({\n      sectionId: section8.id,\n      content: `A single moment that captured everything:\n\n[embed:https://www.instagram.com/p/C5LZuNOPQx5/]\n\nSometimes one image says more than a thousand words could ever express.`,\n      pageNumber: 3,\n    });\n\n    // Get all pages for creating analytics and reading progress\n    const section1Pages = await storage.getPagesBySection(section1.id);\n    const section2Pages = await storage.getPagesBySection(section2.id);\n    const section3Pages = await storage.getPagesBySection(section3.id);\n    const section4Pages = await storage.getPagesBySection(section4.id);\n    const section5Pages = await storage.getPagesBySection(section5.id);\n    const section6Pages = await storage.getPagesBySection(section6.id);\n    const section7Pages = await storage.getPagesBySection(section7.id);\n    const section8Pages = await storage.getPagesBySection(section8.id);\n\n    // Create sample analytics events for reader user\n    console.log(\"Creating sample analytics events...\");\n    \n    // Reader viewed section 1 - spent time reading\n    if (section1Pages.length > 0) {\n      await storage.createAnalyticsEvent({\n        userId: readerUser.id,\n        pageId: section1Pages[0].id,\n        sectionId: section1.id,\n        chapterId: chapter1.id,\n        eventType: \"page_view\",\n        duration: 45000, // 45 seconds\n      });\n      \n      if (section1Pages.length > 1) {\n        await storage.createAnalyticsEvent({\n          userId: readerUser.id,\n          pageId: section1Pages[1].id,\n          sectionId: section1.id,\n          chapterId: chapter1.id,\n          eventType: \"page_view\",\n          duration: 62000, // 1 minute 2 seconds\n        });\n      }\n    }\n\n    // Reader viewed section 2\n    if (section2Pages.length > 0) {\n      await storage.createAnalyticsEvent({\n        userId: readerUser.id,\n        pageId: section2Pages[0].id,\n        sectionId: section2.id,\n        chapterId: chapter1.id,\n        eventType: \"page_view\",\n        duration: 38000,\n      });\n    }\n\n    // Reader viewed section 3\n    if (section3Pages.length > 0) {\n      await storage.createAnalyticsEvent({\n        userId: readerUser.id,\n        pageId: section3Pages[0].id,\n        sectionId: section3.id,\n        chapterId: chapter2.id,\n        eventType: \"page_view\",\n        duration: 55000,\n      });\n    }\n\n    // Admin viewed multiple sections for content review\n    if (section1Pages.length > 0) {\n      await storage.createAnalyticsEvent({\n        userId: adminUser.id,\n        pageId: section1Pages[0].id,\n        sectionId: section1.id,\n        chapterId: chapter1.id,\n        eventType: \"page_view\",\n        duration: 25000,\n      });\n    }\n\n    if (section4Pages.length > 0) {\n      await storage.createAnalyticsEvent({\n        userId: adminUser.id,\n        pageId: section4Pages[0].id,\n        sectionId: section4.id,\n        chapterId: chapter3.id,\n        eventType: \"page_view\",\n        duration: 42000,\n      });\n    }\n\n    if (section5Pages.length > 0) {\n      await storage.createAnalyticsEvent({\n        userId: adminUser.id,\n        pageId: section5Pages[0].id,\n        sectionId: section5.id,\n        chapterId: chapter4.id,\n        eventType: \"page_view\",\n        duration: 51000,\n      });\n    }\n\n    // Create sample reading progress\n    console.log(\"Creating sample reading progress...\");\n    \n    // Reader has completed section 1\n    await storage.upsertReadingProgress({\n      userId: readerUser.id,\n      sectionId: section1.id,\n      pageId: section1Pages[section1Pages.length - 1]?.id,\n      currentPageNumber: section1Pages.length,\n      completed: true,\n    });\n\n    // Reader is in the middle of section 2\n    if (section2Pages.length > 0) {\n      await storage.upsertReadingProgress({\n        userId: readerUser.id,\n        sectionId: section2.id,\n        pageId: section2Pages[0].id,\n        currentPageNumber: 1,\n        completed: false,\n      });\n    }\n\n    // Reader has started section 3\n    if (section3Pages.length > 0) {\n      await storage.upsertReadingProgress({\n        userId: readerUser.id,\n        sectionId: section3.id,\n        pageId: section3Pages[0].id,\n        currentPageNumber: 1,\n        completed: false,\n      });\n    }\n\n    // Admin has reviewed section 4\n    if (section4Pages.length > 0) {\n      await storage.upsertReadingProgress({\n        userId: adminUser.id,\n        sectionId: section4.id,\n        pageId: section4Pages[0].id,\n        currentPageNumber: 1,\n        completed: false,\n      });\n    }\n\n    // Admin has reviewed section 5\n    if (section5Pages.length > 0) {\n      await storage.upsertReadingProgress({\n        userId: adminUser.id,\n        sectionId: section5.id,\n        pageId: section5Pages[0].id,\n        currentPageNumber: 1,\n        completed: false,\n      });\n    }\n\n    console.log(\"Database seeded successfully!\");\n    console.log(\"\\n✨ K-Drama Journal is ready to use! ✨\");\n    console.log(\"\\n📝 Login credentials:\");\n    console.log(\"\\nAdmin Account:\");\n    console.log(\"  Username: admin\");\n    console.log(\"  Password: admin123\");\n    console.log(\"\\nReader Account:\");\n    console.log(\"  Username: reader\");\n    console.log(\"  Password: reader123\");\n    console.log(\"\\n✅ Sample data includes:\");\n    console.log(\"   • 5 Chapters covering all seasons\");\n    console.log(\"   • 7 Sections with unique moods and themes\");\n    console.log(\"   • Multiple pages with embedded images\");\n    console.log(\"   • K-Drama OST Spotify links for chapters and sections\");\n    console.log(\"   • Sample analytics events (7 page views with durations)\");\n    console.log(\"   • Reading progress data for both users\");\n    console.log(\"   • K-Drama inspired content and aesthetics\");\n    \n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    throw error;\n  }\n}\n\nseed();\n","size_bytes":22097},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"reader\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const chapters = pgTable(\"chapters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  coverImage: text(\"cover_image\"),\n  songUrl: text(\"song_url\"),\n  order: integer(\"order\").notNull(),\n});\n\nexport const insertChapterSchema = createInsertSchema(chapters).omit({\n  id: true,\n});\n\nexport type InsertChapter = z.infer<typeof insertChapterSchema>;\nexport type Chapter = typeof chapters.$inferSelect;\n\nexport const sections = pgTable(\"sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  mood: text(\"mood\").array(),\n  tags: text(\"tags\").array(),\n  thumbnail: text(\"thumbnail\"),\n  songUrl: text(\"song_url\"),\n  order: integer(\"order\").notNull(),\n});\n\nexport const insertSectionSchema = createInsertSchema(sections)\n  .omit({\n    id: true,\n  })\n  .extend({\n    mood: z.array(z.string()).optional(),\n    tags: z.array(z.string()).optional(),\n  });\n\nexport type InsertSection = z.infer<typeof insertSectionSchema>;\nexport type Section = typeof sections.$inferSelect;\n\nexport const pages = pgTable(\"pages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sectionId: varchar(\"section_id\").notNull().references(() => sections.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  pageNumber: integer(\"page_number\").notNull(),\n});\n\nexport const insertPageSchema = createInsertSchema(pages).omit({\n  id: true,\n});\n\nexport type InsertPage = z.infer<typeof insertPageSchema>;\nexport type Page = typeof pages.$inferSelect;\n\nexport const readingProgress = pgTable(\"reading_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  sectionId: varchar(\"section_id\").notNull().references(() => sections.id, { onDelete: \"cascade\" }),\n  pageId: varchar(\"page_id\").references(() => pages.id, { onDelete: \"cascade\" }),\n  currentPageNumber: integer(\"current_page_number\").default(1),\n  completed: boolean(\"completed\").notNull().default(false),\n  lastReadAt: timestamp(\"last_read_at\").notNull().defaultNow(),\n  visitedPages: text(\"visited_pages\").array().default(sql`ARRAY[]::text[]`),\n});\n\nexport const insertReadingProgressSchema = createInsertSchema(readingProgress).omit({\n  id: true,\n  lastReadAt: true,\n});\n\nexport type InsertReadingProgress = z.infer<typeof insertReadingProgressSchema>;\nexport type ReadingProgress = typeof readingProgress.$inferSelect;\n\nexport const analyticsEvents = pgTable(\"analytics_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  pageId: varchar(\"page_id\").notNull().references(() => pages.id, { onDelete: \"cascade\" }),\n  sectionId: varchar(\"section_id\").notNull().references(() => sections.id, { onDelete: \"cascade\" }),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id, { onDelete: \"cascade\" }),\n  eventType: text(\"event_type\").notNull(),\n  duration: integer(\"duration\"),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n});\n\nexport const insertAnalyticsEventSchema = createInsertSchema(analyticsEvents).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertAnalyticsEvent = z.infer<typeof insertAnalyticsEventSchema>;\nexport type AnalyticsEvent = typeof analyticsEvents.$inferSelect;\n\nexport const likedSections = pgTable(\"liked_sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  sectionId: varchar(\"section_id\").notNull().references(() => sections.id, { onDelete: \"cascade\" }),\n  likedAt: timestamp(\"liked_at\").notNull().defaultNow(),\n}, (table) => {\n  return {\n    // Add unique constraint to prevent duplicate likes\n    uniqueUserSection: unique().on(table.userId, table.sectionId),\n  };\n});\n\nexport const insertLikedSectionSchema = createInsertSchema(likedSections).omit({\n  id: true,\n  likedAt: true,\n});\n\nexport type InsertLikedSection = z.infer<typeof insertLikedSectionSchema>;\nexport type LikedSection = typeof likedSections.$inferSelect;\n","size_bytes":5002},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 240 8% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 240 8% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 240 8% 12%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 351 85% 60%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 210 30% 88%;\n\n  --sidebar-accent-foreground: 240 8% 12%;\n\n  --sidebar-ring: 351 85% 60%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 240 8% 12%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 351 85% 60%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 240 8% 12%;\n\n  --muted: 210 15% 90%;\n\n  --muted-foreground: 240 6% 35%;\n\n  --accent: 210 20% 88%;\n\n  --accent-foreground: 240 8% 12%;\n\n  --destructive: 351 78% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 75%;\n  --ring: 351 85% 60%;\n  --chart-1: 351 85% 45%;\n  --chart-2: 263 65% 55%;\n  --chart-3: 198 65% 50%;\n  --chart-4: 45 90% 55%;\n  --chart-5: 351 60% 35%;\n\n  --font-sans: \"Noto Sans KR\", sans-serif;\n  --font-serif: \"Nanum Myeongjo\", serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(351 85% 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(351 85% 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 1px 2px -1px hsl(351 85% 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 1px 2px -1px hsl(351 85% 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 2px 4px -1px hsl(351 85% 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 4px 6px -1px hsl(351 85% 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(351 85% 60% / 0.00), 0px 8px 10px -1px hsl(351 85% 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(351 85% 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 5% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 240 5% 18%;\n\n  --card: 240 5% 10%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 240 5% 16%;\n\n  --sidebar: 240 5% 12%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 240 5% 18%;\n\n  --sidebar-primary: 351 82% 58%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 210 18% 18%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 351 82% 58%;\n\n  --popover: 240 5% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 240 5% 20%;\n\n  --primary: 351 82% 58%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 240 5% 18%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 210 12% 16%;\n\n  --muted-foreground: 0 0% 75%;\n\n  --accent: 210 15% 16%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 351 75% 52%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 240 5% 35%;\n  --ring: 351 82% 58%;\n  --chart-1: 351 85% 65%;\n  --chart-2: 263 70% 70%;\n  --chart-3: 198 70% 65%;\n  --chart-4: 45 90% 65%;\n  --chart-5: 351 75% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(351 82% 58% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(351 82% 58% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 1px 2px -1px hsl(351 82% 58% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 1px 2px -1px hsl(351 82% 58% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 2px 4px -1px hsl(351 82% 58% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 4px 6px -1px hsl(351 82% 58% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(351 82% 58% / 0.00), 0px 8px 10px -1px hsl(351 82% 58% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(351 82% 58% / 0.00);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* PhotoSwipe K-Drama Theme Customization */\n  .pswp__bg {\n    background: rgba(0, 0, 0, 0.95) !important;\n  }\n\n  .pswp__button {\n    background: hsl(var(--card)) !important;\n    color: hsl(var(--foreground)) !important;\n    transition: all 0.2s ease;\n  }\n\n  .pswp__button:hover {\n    background: hsl(var(--accent)) !important;\n    color: hsl(var(--accent-foreground)) !important;\n  }\n\n  .pswp__button--arrow--prev,\n  .pswp__button--arrow--next {\n    background: hsl(var(--primary)) !important;\n    color: hsl(var(--primary-foreground)) !important;\n  }\n\n  .pswp__button--arrow--prev:hover,\n  .pswp__button--arrow--next:hover {\n    background: hsl(var(--primary-border)) !important;\n  }\n\n  .pswp__counter {\n    color: hsl(var(--background)) !important;\n    font-family: var(--font-sans);\n    font-size: 0.875rem;\n  }\n\n  .dark .pswp__bg {\n    background: rgba(0, 0, 0, 0.98) !important;\n  }\n\n  /* Tiptap Editor Custom Styling */\n  .tiptap-editor {\n    font-family: 'Nanum Myeongjo', serif;\n  }\n\n  .tiptap-editor .ProseMirror {\n    min-height: 200px;\n    padding: 1rem;\n  }\n\n  .tiptap-editor .ProseMirror:focus {\n    outline: none;\n  }\n\n  .tiptap-editor .ProseMirror p {\n    margin: 0.75em 0;\n  }\n\n  .tiptap-editor .ProseMirror h1,\n  .tiptap-editor .ProseMirror h2,\n  .tiptap-editor .ProseMirror h3 {\n    margin: 1em 0 0.5em 0;\n    font-weight: 600;\n  }\n\n  .tiptap-editor .ProseMirror ul,\n  .tiptap-editor .ProseMirror ol {\n    padding-left: 1.5em;\n    margin: 0.75em 0;\n  }\n\n  .tiptap-editor .ProseMirror a {\n    color: hsl(var(--primary));\n    text-decoration: underline;\n    cursor: pointer;\n  }\n\n  .tiptap-editor .ProseMirror img {\n    max-width: 100%;\n    height: auto;\n    border-radius: 0.375rem;\n    margin: 1em 0;\n  }\n\n  .tiptap-editor .ProseMirror mark {\n    background-color: #fef08a;\n    padding: 0.125em 0.25em;\n    border-radius: 0.125rem;\n  }\n\n  .dark .tiptap-editor .ProseMirror mark {\n    background-color: #854d0e;\n    color: #fef9c3;\n  }\n\n  /* Font Family Styles for Tiptap */\n  [style*=\"font-family: nanum-myeongjo\"],\n  .font-nanum-myeongjo {\n    font-family: 'Nanum Myeongjo', serif !important;\n  }\n\n  [style*=\"font-family: noto-sans-kr\"],\n  .font-noto-sans-kr {\n    font-family: 'Noto Sans KR', sans-serif !important;\n  }\n\n  [style*=\"font-family: nanum-pen-script\"],\n  .font-nanum-pen-script {\n    font-family: 'Nanum Pen Script', cursive !important;\n  }\n\n  [style*=\"font-family: nanum-brush-script\"],\n  .font-nanum-brush-script {\n    font-family: 'Nanum Brush Script', cursive !important;\n  }\n\n  [style*=\"font-family: gaegu\"],\n  .font-gaegu {\n    font-family: 'Gaegu', cursive !important;\n  }\n\n  [style*=\"font-family: serif\"],\n  .font-serif {\n    font-family: serif !important;\n  }\n\n  [style*=\"font-family: sans-serif\"],\n  .font-sans-serif {\n    font-family: sans-serif !important;\n  }\n\n  [style*=\"font-family: monospace\"],\n  .font-monospace {\n    font-family: monospace !important;\n  }\n\n  /* React-Quill K-Drama Theme Customization (LEGACY - TO BE REMOVED) */\n  \n  /* Custom font families for Quill (LEGACY) */\n  .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"nanum-myeongjo\"]::before,\n  .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"nanum-myeongjo\"]::before {\n    content: 'Nanum Myeongjo';\n    font-family: 'Nanum Myeongjo', serif;\n  }\n  \n  .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"noto-sans-kr\"]::before,\n  .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"noto-sans-kr\"]::before {\n    content: 'Noto Sans KR';\n    font-family: 'Noto Sans KR', sans-serif;\n  }\n\n  .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"nanum-pen-script\"]::before,\n  .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"nanum-pen-script\"]::before {\n    content: 'Nanum Pen Script';\n    font-family: 'Nanum Pen Script', cursive;\n  }\n\n  .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"nanum-brush-script\"]::before,\n  .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"nanum-brush-script\"]::before {\n    content: 'Nanum Brush Script';\n    font-family: 'Nanum Brush Script', cursive;\n  }\n\n  .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"gaegu\"]::before,\n  .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"gaegu\"]::before {\n    content: 'Gaegu';\n    font-family: 'Gaegu', cursive;\n  }\n\n  .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"serif\"]::before,\n  .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"serif\"]::before {\n    content: 'Serif';\n    font-family: serif;\n  }\n\n  .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"sans-serif\"]::before,\n  .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"sans-serif\"]::before {\n    content: 'Sans Serif';\n    font-family: sans-serif;\n  }\n\n  .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"monospace\"]::before,\n  .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"monospace\"]::before {\n    content: 'Monospace';\n    font-family: monospace;\n  }\n\n  .ql-font-nanum-myeongjo {\n    font-family: 'Nanum Myeongjo', serif;\n  }\n\n  .ql-font-noto-sans-kr {\n    font-family: 'Noto Sans KR', sans-serif;\n  }\n\n  .ql-font-nanum-pen-script {\n    font-family: 'Nanum Pen Script', cursive;\n  }\n\n  .ql-font-nanum-brush-script {\n    font-family: 'Nanum Brush Script', cursive;\n  }\n\n  .ql-font-gaegu {\n    font-family: 'Gaegu', cursive;\n  }\n\n  .ql-font-serif {\n    font-family: serif;\n  }\n\n  .ql-font-sans-serif {\n    font-family: sans-serif;\n  }\n\n  .ql-font-monospace {\n    font-family: monospace;\n  }\n\n  /* Default font for editor content */\n  .rich-text-editor .ql-editor {\n    font-family: 'Nanum Myeongjo', serif;\n    font-size: 1rem;\n    line-height: 1.75;\n    color: hsl(var(--foreground));\n    min-height: 300px;\n  }\n\n  /* Toolbar styling */\n  .rich-text-editor .ql-toolbar {\n    background: hsl(var(--card));\n    border: 1px solid hsl(var(--border));\n    border-radius: 0.5rem 0.5rem 0 0;\n    padding: 0.75rem;\n  }\n\n  .rich-text-editor .ql-container {\n    background: hsl(var(--background));\n    border: 1px solid hsl(var(--border));\n    border-top: none;\n    border-radius: 0 0 0.5rem 0.5rem;\n    font-family: 'Nanum Myeongjo', serif;\n  }\n\n  /* Toolbar buttons */\n  .rich-text-editor .ql-toolbar button {\n    color: hsl(var(--foreground));\n  }\n\n  .rich-text-editor .ql-toolbar button:hover {\n    color: hsl(var(--primary));\n  }\n\n  .rich-text-editor .ql-toolbar button.ql-active {\n    color: hsl(var(--primary));\n  }\n\n  .rich-text-editor .ql-toolbar .ql-stroke {\n    stroke: hsl(var(--foreground));\n  }\n\n  .rich-text-editor .ql-toolbar button:hover .ql-stroke {\n    stroke: hsl(var(--primary));\n  }\n\n  .rich-text-editor .ql-toolbar button.ql-active .ql-stroke {\n    stroke: hsl(var(--primary));\n  }\n\n  .rich-text-editor .ql-toolbar .ql-fill {\n    fill: hsl(var(--foreground));\n  }\n\n  .rich-text-editor .ql-toolbar button:hover .ql-fill {\n    fill: hsl(var(--primary));\n  }\n\n  .rich-text-editor .ql-toolbar button.ql-active .ql-fill {\n    fill: hsl(var(--primary));\n  }\n\n  /* Picker dropdowns */\n  .rich-text-editor .ql-toolbar .ql-picker-label {\n    color: hsl(var(--foreground));\n    border-color: hsl(var(--border));\n  }\n\n  .rich-text-editor .ql-toolbar .ql-picker-options {\n    background: hsl(var(--card));\n    border: 1px solid hsl(var(--border));\n    border-radius: 0.375rem;\n    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n  }\n\n  .rich-text-editor .ql-toolbar .ql-picker-item {\n    color: hsl(var(--foreground));\n  }\n\n  .rich-text-editor .ql-toolbar .ql-picker-item:hover {\n    color: hsl(var(--primary));\n    background: hsl(var(--accent));\n  }\n\n  /* Dark mode adjustments */\n  .dark .rich-text-editor .ql-editor {\n    color: hsl(var(--foreground));\n  }\n\n  .dark .rich-text-editor .ql-editor.ql-blank::before {\n    color: hsl(var(--muted-foreground));\n  }\n\n  /* Ensure proper styling for formatted content */\n  .rich-text-editor .ql-editor strong {\n    font-weight: 700;\n  }\n\n  .rich-text-editor .ql-editor em {\n    font-style: italic;\n  }\n\n  .rich-text-editor .ql-editor u {\n    text-decoration: underline;\n  }\n\n  .rich-text-editor .ql-editor s {\n    text-decoration: line-through;\n  }\n\n  .rich-text-editor .ql-editor a {\n    color: hsl(var(--primary));\n    text-decoration: underline;\n  }\n\n  .rich-text-editor .ql-editor img {\n    max-width: 100%;\n    height: auto;\n    border-radius: 0.375rem;\n    margin: 0.5rem 0;\n  }\n\n  /* Rendered content styling (view mode) */\n  .rendered-content {\n    font-family: 'Nanum Myeongjo', serif;\n    line-height: 1.75;\n  }\n\n  .rendered-content p {\n    margin-bottom: 1rem;\n  }\n\n  .rendered-content strong {\n    font-weight: 700;\n  }\n\n  .rendered-content em {\n    font-style: italic;\n  }\n\n  .rendered-content u {\n    text-decoration: underline;\n  }\n\n  .rendered-content s {\n    text-decoration: line-through;\n  }\n\n  .rendered-content a {\n    color: hsl(var(--primary));\n    text-decoration: underline;\n  }\n\n  .rendered-content a:hover {\n    color: hsl(var(--primary-border));\n  }\n\n  .rendered-content img {\n    max-width: 100%;\n    height: auto;\n    border-radius: 0.375rem;\n    margin: 0.5rem 0;\n  }\n\n  .rendered-content ul,\n  .rendered-content ol {\n    margin-left: 1.5rem;\n    margin-bottom: 1rem;\n  }\n\n  .rendered-content ul {\n    list-style-type: disc;\n  }\n\n  .rendered-content ol {\n    list-style-type: decimal;\n  }\n\n  .rendered-content li {\n    margin-bottom: 0.25rem;\n  }\n\n  .rendered-content h1,\n  .rendered-content h2,\n  .rendered-content h3,\n  .rendered-content h4,\n  .rendered-content h5,\n  .rendered-content h6 {\n    font-weight: 700;\n    margin-top: 1.5rem;\n    margin-bottom: 0.75rem;\n  }\n\n  .rendered-content h1 {\n    font-size: 2rem;\n  }\n\n  .rendered-content h2 {\n    font-size: 1.5rem;\n  }\n\n  .rendered-content h3 {\n    font-size: 1.25rem;\n  }\n\n  .rendered-content blockquote {\n    border-left: 4px solid hsl(var(--primary));\n    padding-left: 1rem;\n    margin: 1rem 0;\n    font-style: italic;\n    color: hsl(var(--muted-foreground));\n  }\n\n  .rendered-content pre {\n    background: hsl(var(--muted));\n    padding: 1rem;\n    border-radius: 0.375rem;\n    overflow-x: auto;\n    margin: 1rem 0;\n  }\n\n  .rendered-content code {\n    background: hsl(var(--muted));\n    padding: 0.125rem 0.25rem;\n    border-radius: 0.25rem;\n    font-family: monospace;\n    font-size: 0.875em;\n  }\n\n  .rendered-content pre code {\n    background: transparent;\n    padding: 0;\n  }\n\n  /* Font family classes from Quill */\n  .rendered-content .ql-font-nanum-myeongjo {\n    font-family: 'Nanum Myeongjo', serif;\n  }\n\n  .rendered-content .ql-font-noto-sans-kr {\n    font-family: 'Noto Sans KR', sans-serif;\n  }\n\n  .rendered-content .ql-font-nanum-pen-script {\n    font-family: 'Nanum Pen Script', cursive;\n  }\n\n  .rendered-content .ql-font-nanum-brush-script {\n    font-family: 'Nanum Brush Script', cursive;\n  }\n\n  .rendered-content .ql-font-gaegu {\n    font-family: 'Gaegu', cursive;\n  }\n\n  .rendered-content .ql-font-serif {\n    font-family: serif;\n  }\n\n  .rendered-content .ql-font-sans-serif {\n    font-family: sans-serif;\n  }\n\n  .rendered-content .ql-font-monospace {\n    font-family: monospace;\n  }\n\n  /* Font size classes from Quill */\n  .rendered-content .ql-size-small {\n    font-size: 0.75em;\n  }\n\n  .rendered-content .ql-size-large {\n    font-size: 1.5em;\n  }\n\n  .rendered-content .ql-size-huge {\n    font-size: 2.5em;\n  }\n\n  /* Text alignment from Quill */\n  .rendered-content .ql-align-center {\n    text-align: center;\n  }\n\n  .rendered-content .ql-align-right {\n    text-align: right;\n  }\n\n  .rendered-content .ql-align-justify {\n    text-align: justify;\n  }\n}\n\n/* Instagram Embed Minimal Styling */\n.instagram-embed-container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Style the Instagram iframe content */\n.instagram-iframe-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 380px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n}\n\n/* Hide excess Instagram UI elements while respecting terms */\n.instagram-iframe-wrapper iframe {\n  border: none !important;\n  max-width: 100% !important;\n  width: 100% !important;\n  min-height: 480px !important;\n  max-height: calc(80vh - 120px) !important;\n  height: auto !important;\n}\n\n/* Instagram blockquote default styling override */\n.instagram-media {\n  max-width: 100% !important;\n  width: 100% !important;\n  min-width: 100% !important;\n  border: 0 !important;\n  margin: 0 !important;\n  padding: 0 !important;\n}\n\n/* Minimize padding around Instagram embeds */\n.instagram-media-rendered {\n  margin: 0 !important;\n  border: none !important;\n  box-shadow: none !important;\n}\n\n/* Clean up Instagram embed shadows and borders */\n.instagram-media iframe {\n  box-shadow: none !important;\n  border-radius: 8px !important;\n  overflow: hidden !important;\n}\n\n/* Ensure Instagram reels play properly */\n.instagram-embed-container video {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Dark mode adjustments */\n.dark .instagram-embed-container {\n  filter: brightness(0.95);\n}\n\n.dark .instagram-iframe-wrapper {\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 8px;\n}","size_bytes":24066},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/section-reader.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ChevronLeft, ChevronRight, Pencil, Save, X, ArrowUp, ArrowDown, Plus, Trash2, Heart } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useMusicPlayer } from \"@/contexts/MusicPlayerContext\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SectionSidebar } from \"@/components/SectionSidebar\";\nimport { RedStringProgress } from \"@/components/RedStringProgress\";\nimport { PhotoSwipeGallery } from \"@/components/PhotoSwipeGallery\";\nimport { TiptapEditor } from \"@/components/TiptapEditor\";\nimport { InstagramEmbed } from \"@/components/InstagramEmbed\";\nimport InstagramGallery from \"@/components/InstagramGallery\";\nimport { MediaToolbar, ImageEmbedDialog, InstagramEmbedDialog, SpotifyEmbedDialog } from \"@/components/admin/MediaEmbedDialogs\";\nimport type { Section, Page, ReadingProgress, Chapter } from \"@shared/schema\";\n\nexport default function SectionReader() {\n  const { sectionId } = useParams();\n  const [, setLocation] = useLocation();\n  const { user, isAdmin } = useAuth();\n  const { setCurrentSong } = useMusicPlayer();\n  const { toast } = useToast();\n  const [currentPageIndex, setCurrentPageIndex] = useState(0);\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [editedContent, setEditedContent] = useState(\"\");\n  const [creatingPage, setCreatingPage] = useState(false);\n  const [deletingPageId, setDeletingPageId] = useState<string | null>(null);\n  const [isImageDialogOpen, setIsImageDialogOpen] = useState(false);\n  const [isInstagramDialogOpen, setIsInstagramDialogOpen] = useState(false);\n  const [isSpotifyDialogOpen, setIsSpotifyDialogOpen] = useState(false);\n  const [editingTitle, setEditingTitle] = useState(false);\n  const [editedTitle, setEditedTitle] = useState(\"\");\n  const [editingMetadata, setEditingMetadata] = useState(false);\n  const [editedTags, setEditedTags] = useState(\"\");\n  const [editedMood, setEditedMood] = useState(\"\");\n  const pageStartTimeRef = useRef<number | null>(null);\n  const previousPageIdRef = useRef<string | null>(null);\n  const hasCompletedSectionRef = useRef<boolean>(false);\n  const progressRestoredRef = useRef<boolean>(false);\n  // Removed visitedPages state - now using simple last page completion\n\n  const { data: section, isLoading: isSectionLoading } = useQuery<Section>({\n    queryKey: [`/api/sections/${sectionId}`],\n  });\n\n  const { data: chapter, isLoading: isChapterLoading } = useQuery<Chapter>({\n    queryKey: [`/api/chapters/${section?.chapterId}`],\n    enabled: !!section?.chapterId,\n  });\n\n  const { data: pages = [], isLoading: isPagesLoading } = useQuery<Page[]>({\n    queryKey: [`/api/sections/${sectionId}/pages`],\n  });\n\n  // Fetch saved reading progress for this section\n  const { data: savedProgress } = useQuery<ReadingProgress | null>({\n    queryKey: [`/api/sections/${sectionId}/progress`, user?.id],\n    queryFn: () => user?.id ? fetch(`/api/sections/${sectionId}/progress?userId=${user.id}`).then(r => r.json()) : null,\n    enabled: !!user?.id && !!sectionId,\n  });\n\n  // Fetch all sections for the current chapter to determine position\n  const { data: allSections = [] } = useQuery<Section[]>({\n    queryKey: [`/api/chapters/${section?.chapterId}/sections`],\n    enabled: !!section?.chapterId,\n  });\n\n  // Check if user has liked this section\n  const { data: likeStatus } = useQuery<{ isLiked: boolean }>({\n    queryKey: [`/api/sections/${sectionId}/like-status`, user?.id],\n    queryFn: () => user?.id \n      ? fetch(`/api/sections/${sectionId}/like-status?userId=${user.id}`).then(r => r.json()) \n      : Promise.resolve({ isLiked: false }),\n    enabled: !!user?.id && !!sectionId,\n  });\n\n  // Get like count for the section\n  const { data: likeCount } = useQuery<{ count: number }>({\n    queryKey: [`/api/sections/${sectionId}/like-count`],\n    queryFn: () => fetch(`/api/sections/${sectionId}/like-count`).then(r => r.json()),\n    enabled: !!sectionId,\n  });\n\n  const likeSectionMutation = useMutation({\n    mutationFn: async () => {\n      if (!user?.id || !sectionId) throw new Error(\"Missing required data\");\n      return apiRequest(\"POST\", `/api/sections/${sectionId}/like`, { userId: user.id });\n    },\n    onSuccess: () => {\n      // Invalidate queries to refetch like status and count\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}/like-status`, user?.id] });\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}/like-count`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/users/${user?.id}/liked-sections`] });\n      toast({ title: \"Section liked!\", description: \"Added to your Liked Sections\" });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.message || \"\";\n      \n      if (errorMessage.includes(\"session\") || errorMessage.includes(\"expired\")) {\n        toast({ \n          title: \"Session expired\", \n          description: \"Please log in again to continue\",\n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Failed to like section\", \n          description: \"Please try again later\",\n          variant: \"destructive\" \n        });\n      }\n    },\n  });\n\n  const unlikeSectionMutation = useMutation({\n    mutationFn: async () => {\n      if (!user?.id || !sectionId) throw new Error(\"Missing required data\");\n      return apiRequest(\"DELETE\", `/api/sections/${sectionId}/like?userId=${user.id}`, {});\n    },\n    onSuccess: () => {\n      // Invalidate queries to refetch like status and count\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}/like-status`, user?.id] });\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}/like-count`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/users/${user?.id}/liked-sections`] });\n      toast({ title: \"Section unliked\", description: \"Removed from your Liked Sections\" });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.message || \"\";\n      \n      if (errorMessage.includes(\"session\") || errorMessage.includes(\"expired\")) {\n        toast({ \n          title: \"Session expired\", \n          description: \"Please log in again to continue\",\n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Failed to unlike section\", \n          description: \"Please try again later\",\n          variant: \"destructive\" \n        });\n      }\n    },\n  });\n\n  const saveProgressMutation = useMutation({\n    mutationFn: async (data: { pageId: string; completed: boolean; currentPageNumber: number }) => {\n      if (!user?.id) return;\n      return apiRequest(\"POST\", \"/api/reading-progress\", {\n        userId: user.id,\n        sectionId: sectionId!,\n        pageId: data.pageId,\n        currentPageNumber: data.currentPageNumber,\n        completed: data.completed,\n      });\n    },\n    onSuccess: (_, variables) => {\n      // Invalidate user progress queries to update badges immediately\n      if (user?.id) {\n        queryClient.invalidateQueries({ queryKey: [`/api/users/${user.id}/progress`] });\n        queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}/progress`] });\n        if (section?.chapterId) {\n          // Invalidate chapter progress with the correct query key format\n          queryClient.invalidateQueries({ queryKey: [`/api/chapters/${section.chapterId}/progress?userId=${user.id}`] });\n          queryClient.invalidateQueries({ queryKey: [`/api/chapters/${section.chapterId}/progress`] });\n        }\n        // Also invalidate all chapters to ensure home page updates\n        queryClient.invalidateQueries({ queryKey: ['/api/chapters'] });\n      }\n    },\n  });\n\n  const trackAnalyticsMutation = useMutation({\n    mutationFn: async (data: {\n      userId: string;\n      pageId: string;\n      sectionId: string;\n      chapterId: string;\n      eventType: string;\n      duration: number;\n    }) => {\n      return apiRequest(\"POST\", \"/api/analytics\", data);\n    },\n  });\n\n  const updatePageMutation = useMutation({\n    mutationFn: async (data: { pageId: string; content: string }) => {\n      return apiRequest(\"PATCH\", `/api/pages/${data.pageId}`, { content: data.content });\n    },\n    onSuccess: (_, variables) => {\n      // Optimistically update the cache with new content\n      queryClient.setQueryData<Page[]>([`/api/sections/${sectionId}/pages`], (old) => {\n        if (!old) return old;\n        return old.map(page => \n          page.id === variables.pageId \n            ? { ...page, content: variables.content }\n            : page\n        );\n      });\n      \n      // Invalidate to refetch fresh data from server\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}/pages`] });\n      \n      toast({ title: \"Page updated successfully\" });\n      setIsEditMode(false);\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to update page\", \n        description: \"Please try again\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const reorderSectionsMutation = useMutation({\n    mutationFn: (sectionOrders: { id: string; order: number }[]) =>\n      apiRequest(\"PATCH\", \"/api/sections/reorder\", { sectionOrders }),\n    onSuccess: () => {\n      if (section?.chapterId) {\n        queryClient.invalidateQueries({ queryKey: [`/api/chapters/${section.chapterId}/sections`] });\n        queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}`] });\n      }\n      toast({ title: \"Section order updated\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to reorder sections\", \n        description: error?.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const createPageMutation = useMutation({\n    mutationFn: async (data: { sectionId: string; content: string; pageNumber: number }): Promise<Page> => {\n      return await apiRequest(\"POST\", \"/api/pages\", data) as unknown as Page;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}/pages`] });\n      toast({ title: \"Page created successfully\" });\n      setCreatingPage(false);\n      // Navigate to the new page (last page)\n      setCurrentPageIndex(pages.length);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create page\", \n        description: error?.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deletePageMutation = useMutation({\n    mutationFn: async (pageId: string) => {\n      await apiRequest(\"DELETE\", `/api/pages/${pageId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}/pages`] });\n      toast({ title: \"Page deleted successfully\" });\n      setDeletingPageId(null);\n      \n      // Smart navigation: adjust current page index if needed\n      const deletedPageIndex = pages.findIndex(p => p.id === deletingPageId);\n      if (deletedPageIndex >= 0) {\n        // If we're on the deleted page or after it, go to previous page\n        if (currentPageIndex >= deletedPageIndex) {\n          setCurrentPageIndex(Math.max(0, currentPageIndex - 1));\n        }\n        // If this was the last page and we're now beyond the new last page, adjust\n        if (currentPageIndex >= pages.length - 1) {\n          setCurrentPageIndex(Math.max(0, pages.length - 2));\n        }\n      }\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to delete page\", \n        description: error?.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n      setDeletingPageId(null);\n    },\n  });\n\n  const updateSectionMutation = useMutation({\n    mutationFn: async (data: { title?: string; tags?: string[]; mood?: string[] }) => {\n      return apiRequest(\"PATCH\", `/api/sections/${sectionId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/chapters/${section?.chapterId}/sections`] });\n      toast({ title: \"Section updated successfully\" });\n      setEditingTitle(false);\n      setEditingMetadata(false);\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to update section\", \n        description: \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const moveSectionUp = () => {\n    if (!section) return;\n    const chapterSections = allSections.filter(s => s.chapterId === section.chapterId).sort((a, b) => a.order - b.order);\n    const currentIndex = chapterSections.findIndex(s => s.id === section.id);\n    if (currentIndex <= 0) return;\n\n    const sectionOrders = chapterSections.map((s, idx) => {\n      if (idx === currentIndex - 1) {\n        return { id: s.id, order: section.order };\n      } else if (idx === currentIndex) {\n        return { id: s.id, order: chapterSections[currentIndex - 1].order };\n      }\n      return { id: s.id, order: s.order };\n    });\n\n    reorderSectionsMutation.mutate(sectionOrders);\n  };\n\n  const moveSectionDown = () => {\n    if (!section) return;\n    const chapterSections = allSections.filter(s => s.chapterId === section.chapterId).sort((a, b) => a.order - b.order);\n    const currentIndex = chapterSections.findIndex(s => s.id === section.id);\n    if (currentIndex === -1 || currentIndex >= chapterSections.length - 1) return;\n\n    const sectionOrders = chapterSections.map((s, idx) => {\n      if (idx === currentIndex) {\n        return { id: s.id, order: chapterSections[currentIndex + 1].order };\n      } else if (idx === currentIndex + 1) {\n        return { id: s.id, order: section.order };\n      }\n      return { id: s.id, order: s.order };\n    });\n\n    reorderSectionsMutation.mutate(sectionOrders);\n  };\n\n  const currentPage = pages[currentPageIndex];\n  const totalPages = pages.length;\n\n  // Determine section navigation\n  const sortedSections = allSections.length > 0 ? [...allSections].sort((a, b) => a.order - b.order) : [];\n  const currentSectionIndex = sortedSections.findIndex(s => s.id === sectionId);\n  const nextSection = currentSectionIndex >= 0 && currentSectionIndex < sortedSections.length - 1\n    ? sortedSections[currentSectionIndex + 1]\n    : null;\n  const isLastSection = sortedSections.length > 0 && currentSectionIndex === sortedSections.length - 1;\n  const isLastPage = currentPageIndex === totalPages - 1;\n\n  const sendAnalyticsEvent = (pageId: string, eventType: string = \"page_view\", duration: number) => {\n    if (!user?.id || !section?.chapterId) return;\n    \n    trackAnalyticsMutation.mutate({\n      userId: user.id,\n      pageId,\n      sectionId: sectionId!,\n      chapterId: section.chapterId,\n      eventType,\n      duration,\n    });\n  };\n\n  useEffect(() => {\n    if (currentPage && user?.id) {\n      const isLastPage = currentPageIndex === totalPages - 1;\n      \n      // Send analytics for previous page if we have timing data\n      if (previousPageIdRef.current && pageStartTimeRef.current) {\n        const duration = Date.now() - pageStartTimeRef.current;\n        sendAnalyticsEvent(previousPageIdRef.current, \"page_view\", duration);\n      }\n      \n      // Start timing for new page\n      pageStartTimeRef.current = Date.now();\n      previousPageIdRef.current = currentPage.id;\n      \n      // Save reading progress - mark as completed if on last page\n      saveProgressMutation.mutate({\n        pageId: currentPage.id,\n        currentPageNumber: currentPage.pageNumber,\n        completed: isLastPage,\n      });\n\n      // Send section completed event only once when reaching last page\n      if (isLastPage && section?.chapterId && !hasCompletedSectionRef.current) {\n        hasCompletedSectionRef.current = true;\n        trackAnalyticsMutation.mutate({\n          userId: user.id,\n          pageId: currentPage.id,\n          sectionId: sectionId!,\n          chapterId: section.chapterId,\n          eventType: \"section_completed\",\n          duration: 0,\n        });\n      }\n    }\n  }, [currentPageIndex, currentPage?.id, user?.id]);\n\n  // Reset completion flag and edit mode when section changes\n  useEffect(() => {\n    hasCompletedSectionRef.current = false;\n    pageStartTimeRef.current = Date.now();\n    previousPageIdRef.current = currentPage?.id || null;\n    setIsEditMode(false);\n    setEditedContent(\"\");\n  }, [sectionId]);\n\n  // Exit edit mode when page changes\n  useEffect(() => {\n    setIsEditMode(false);\n    setEditedContent(\"\");\n  }, [currentPage?.id]);\n\n  // Send final analytics when leaving the section\n  useEffect(() => {\n    return () => {\n      if (previousPageIdRef.current && pageStartTimeRef.current && user?.id && section?.chapterId) {\n        const duration = Date.now() - pageStartTimeRef.current;\n        sendAnalyticsEvent(previousPageIdRef.current, \"page_view\", duration);\n      }\n    };\n  }, [sectionId]);\n\n  // Simplified automatic music playback:\n  // 1. Section-specific music takes priority (show toast for special moments)\n  // 2. Otherwise use chapter-level playlist (background music, no toast)\n  useEffect(() => {\n    // Don't change music state while data is loading\n    if (isSectionLoading) return;\n    if (!section) return;\n    \n    // Wait for chapter data if section belongs to a chapter\n    if (section.chapterId && isChapterLoading) return;\n\n    // Priority 1: Section-specific music (special moment) - force iframe reload for fresh start\n    if (section.songUrl) {\n      setCurrentSong(section.songUrl, section.title, true);\n      toast({\n        title: \"♪ Special Music\",\n        description: `Now playing: ${section.title}`,\n      });\n      return; // Exit early after setting music\n    }\n    \n    // Priority 2: Chapter-level playlist (background music)\n    if (chapter?.songUrl) {\n      setCurrentSong(chapter.songUrl, chapter.title || \"Background Music\", false);\n      return; // Exit early after setting music\n    }\n    \n    // Only clear music if we're absolutely sure there's no music at either level\n    // This prevents clearing music during navigation\n    setCurrentSong(null, null, false);\n  }, [section?.id, section?.songUrl, chapter?.songUrl, isSectionLoading, isChapterLoading]);\n\n  // Load Instagram embed script when page contains Instagram content\n  useEffect(() => {\n    if (currentPage?.content && currentPage.content.includes(\"instagram.com\")) {\n      // Load Instagram embed script if not already loaded\n      if (!document.getElementById(\"instagram-embed-script\")) {\n        const script = document.createElement(\"script\");\n        script.id = \"instagram-embed-script\";\n        script.src = \"https://www.instagram.com/embed.js\";\n        script.async = true;\n        script.onload = () => {\n          // Process embeds once script loads\n          if ((window as any).instgrm) {\n            (window as any).instgrm.Embeds.process();\n          }\n        };\n        document.body.appendChild(script);\n      } else if ((window as any).instgrm) {\n        // If script already loaded, reprocess embeds for new content\n        setTimeout(() => {\n          (window as any).instgrm.Embeds.process();\n        }, 100);\n      }\n    }\n  }, [currentPage?.content]);\n\n  // Restore saved reading progress on mount\n  useEffect(() => {\n    if (savedProgress && !progressRestoredRef.current && pages.length > 0) {\n      // Restore to saved page number (convert to 0-indexed)\n      const savedPageIndex = Math.max(0, (savedProgress.currentPageNumber || 1) - 1);\n      const validPageIndex = Math.min(savedPageIndex, pages.length - 1);\n      setCurrentPageIndex(validPageIndex);\n      progressRestoredRef.current = true;\n    }\n  }, [savedProgress, pages.length]);\n\n  // Reset progress restoration flag when section changes\n  useEffect(() => {\n    progressRestoredRef.current = false;\n  }, [sectionId]);\n\n  const handlePrevPage = () => {\n    if (currentPageIndex > 0) {\n      setCurrentPageIndex(currentPageIndex - 1);\n      setIsEditMode(false);\n    }\n  };\n\n  const handleNextPage = () => {\n    // If we're not on the last page, just advance to next page\n    if (!isLastPage) {\n      setCurrentPageIndex(currentPageIndex + 1);\n      setIsEditMode(false);\n      return;\n    }\n\n    // We're on the last page of this section\n    if (isLastSection) {\n      // Last page of last section - go back to chapters\n      setLocation(\"/\");\n    } else if (nextSection) {\n      // Navigate to next section\n      setLocation(`/read/${nextSection.id}`);\n    }\n  };\n\n  const handleEnterEditMode = () => {\n    if (currentPage) {\n      setEditedContent(currentPage.content);\n      setIsEditMode(true);\n    }\n  };\n\n  const handleCreatePage = () => {\n    if (!sectionId) return;\n    \n    // Get the next page number based on maximum existing page number\n    const maxPageNumber = pages.length > 0 \n      ? Math.max(...pages.map(p => p.pageNumber)) \n      : 0;\n    const nextPageNumber = maxPageNumber + 1;\n    \n    createPageMutation.mutate({\n      sectionId: sectionId,\n      content: \"\",\n      pageNumber: nextPageNumber,\n    });\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditMode(false);\n    setEditedContent(\"\");\n  };\n\n  const handleSaveEdit = () => {\n    if (currentPage) {\n      updatePageMutation.mutate({\n        pageId: currentPage.id,\n        content: editedContent,\n      });\n    }\n  };\n\n  const insertMediaContent = (html: string) => {\n    // Append the media content to the end of the current content\n    setEditedContent(editedContent + \"\\n\\n\" + html);\n  };\n\n  const renderContent = (content: string) => {\n    const embedRegex = /\\[embed:([^\\]]+)\\]/g;\n    const galleryRegex = /\\[gallery:([^\\]]+)\\]/g;\n    const videoRegex = /\\[video:([^\\]]+)\\]/g;\n    const instagramGalleryRegex = /\\[instagram-gallery:([^\\]]+)\\]/g;\n    const parts: React.ReactNode[] = [];\n    let lastIndex = 0;\n    \n    // Combine all matches from all patterns\n    const allMatches: Array<{ index: number; type: 'embed' | 'gallery' | 'video' | 'instagram-gallery'; data: string }> = [];\n    \n    let match;\n    while ((match = embedRegex.exec(content)) !== null) {\n      allMatches.push({ index: match.index, type: 'embed', data: match[1] });\n    }\n    while ((match = galleryRegex.exec(content)) !== null) {\n      allMatches.push({ index: match.index, type: 'gallery', data: match[1] });\n    }\n    while ((match = videoRegex.exec(content)) !== null) {\n      allMatches.push({ index: match.index, type: 'video', data: match[1] });\n    }\n    while ((match = instagramGalleryRegex.exec(content)) !== null) {\n      allMatches.push({ index: match.index, type: 'instagram-gallery', data: match[1] });\n    }\n    \n    // Sort by index\n    allMatches.sort((a, b) => a.index - b.index);\n\n    allMatches.forEach((item, idx) => {\n      // Add HTML content before this match\n      if (item.index > lastIndex) {\n        const htmlContent = content.substring(lastIndex, item.index);\n        if (htmlContent.trim()) {\n          parts.push(\n            <div \n              key={`html-${idx}-${lastIndex}`}\n              dangerouslySetInnerHTML={{ __html: htmlContent }}\n            />\n          );\n        }\n      }\n      \n      if (item.type === 'gallery') {\n        // Gallery embed: [gallery:url1,url2,url3] - supports mixed media (images and videos)\n        // Videos are marked with 'video:' prefix\n        const mediaUrls = item.data.split(',').map(url => url.trim()).filter(url => url);\n        parts.push(\n          <PhotoSwipeGallery key={`gallery-${idx}`} images={mediaUrls} />\n        );\n        lastIndex = item.index + `[gallery:${item.data}]`.length;\n      } else if (item.type === 'video') {\n        // Legacy standalone video embed: [video:url] - kept for backwards compatibility\n        const videoUrl = item.data;\n        parts.push(\n          <div key={`video-${idx}`} className=\"my-6\">\n            <video\n              controls\n              className=\"w-full rounded-lg shadow-md\"\n              preload=\"metadata\"\n            >\n              <source src={videoUrl} />\n              Your browser does not support the video tag.\n            </video>\n          </div>\n        );\n        lastIndex = item.index + `[video:${item.data}]`.length;\n      } else if (item.type === 'instagram-gallery') {\n        // Instagram gallery: [instagram-gallery:url1,url2,url3] - multiple reels/posts in compact grid\n        const instagramUrls = item.data.split(',').map(url => url.trim()).filter(url => url);\n        parts.push(\n          <InstagramGallery key={`instagram-gallery-${idx}`} urls={instagramUrls} />\n        );\n        lastIndex = item.index + `[instagram-gallery:${item.data}]`.length;\n      } else {\n        // Single embed: [embed:url]\n        const embedUrl = item.data;\n        if (embedUrl.includes(\"instagram.com\")) {\n          // Use minimal Instagram embed component\n          parts.push(\n            <InstagramEmbed \n              key={`embed-${idx}`}\n              url={embedUrl}\n            />\n          );\n        } else if (embedUrl.match(/\\.(jpg|jpeg|png|gif|webp)$/i)) {\n          parts.push(\n            <PhotoSwipeGallery key={`embed-${idx}`} images={[embedUrl]} />\n          );\n        }\n        lastIndex = item.index + `[embed:${item.data}]`.length;\n      }\n    });\n\n    // Add remaining HTML content\n    if (lastIndex < content.length) {\n      const htmlContent = content.substring(lastIndex);\n      if (htmlContent.trim()) {\n        parts.push(\n          <div \n            key={`html-final`}\n            dangerouslySetInnerHTML={{ __html: htmlContent }}\n          />\n        );\n      }\n    }\n\n    // If no special tokens found and we have content, render as HTML\n    if (parts.length === 0 && content.trim()) {\n      return <div dangerouslySetInnerHTML={{ __html: content }} />;\n    }\n\n    return parts;\n  };\n\n  const handleStartTitleEdit = () => {\n    if (!section) return;\n    setEditedTitle(section.title);\n    setEditingTitle(true);\n  };\n\n  const handleSaveTitleEdit = () => {\n    if (!editedTitle.trim()) {\n      toast({ \n        title: \"Title cannot be empty\", \n        variant: \"destructive\" \n      });\n      return;\n    }\n    updateSectionMutation.mutate({ title: editedTitle.trim() });\n  };\n\n  const handleCancelTitleEdit = () => {\n    setEditingTitle(false);\n    setEditedTitle(\"\");\n  };\n\n  const handleStartMetadataEdit = () => {\n    if (!section) return;\n    setEditedTags(section.tags?.join(\", \") || \"\");\n    setEditedMood(section.mood?.join(\", \") || \"\");\n    setEditingMetadata(true);\n  };\n\n  const handleSaveMetadataEdit = () => {\n    const tagsArray = editedTags.split(\",\").map(t => t.trim()).filter(t => t.length > 0);\n    const moodArray = editedMood.split(\",\").map(t => t.trim()).filter(t => t.length > 0);\n    updateSectionMutation.mutate({ \n      tags: tagsArray.length > 0 ? tagsArray : undefined,\n      mood: moodArray.length > 0 ? moodArray : undefined\n    });\n  };\n\n  const handleCancelMetadataEdit = () => {\n    setEditingMetadata(false);\n    setEditedTags(\"\");\n    setEditedMood(\"\");\n  };\n\n  const handleToggleLike = () => {\n    if (!user?.id) {\n      toast({ \n        title: \"Please login to like sections\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (likeStatus?.isLiked) {\n      unlikeSectionMutation.mutate();\n    } else {\n      likeSectionMutation.mutate();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-kdrama-sakura/10 via-kdrama-cream/30 to-kdrama-lavender/10\">\n      {section?.chapterId && (\n        <SectionSidebar\n          chapterId={section.chapterId}\n          currentSectionId={sectionId!}\n          isOpen={sidebarOpen}\n          onToggle={() => setSidebarOpen(!sidebarOpen)}\n        />\n      )}\n\n      <div className={`transition-all duration-300 ${sidebarOpen ? \"lg:ml-80\" : \"lg:ml-16\"}`}>\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          {/* Red String Progress Indicator - Seamlessly integrated */}\n          <div className=\"pt-8 pb-4\">\n            <RedStringProgress\n              currentPage={currentPageIndex + 1}\n              totalPages={totalPages}\n              sectionTitle={section?.title}\n              initialProgress={savedProgress && totalPages > 0 ? ((savedProgress.currentPageNumber || 1) / totalPages) * 100 : 0}\n            />\n          </div>\n          <div className=\"mb-8\">\n            {/* Title - Inline Editing */}\n            {editingTitle ? (\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Input\n                  value={editedTitle}\n                  onChange={(e) => setEditedTitle(e.target.value)}\n                  className=\"font-myeongjo text-2xl h-auto py-2\"\n                  placeholder=\"Section title\"\n                  data-testid=\"input-edit-title\"\n                  autoFocus\n                />\n                <Button\n                  size=\"sm\"\n                  onClick={handleSaveTitleEdit}\n                  disabled={updateSectionMutation.isPending}\n                  data-testid=\"button-save-title\"\n                >\n                  <Save className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={handleCancelTitleEdit}\n                  disabled={updateSectionMutation.isPending}\n                  data-testid=\"button-cancel-title\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2 group\">\n                <h1 className=\"font-myeongjo text-3xl md:text-4xl text-kdrama-ink\">\n                  {section?.title || \"Loading...\"}\n                </h1>\n                \n                {/* Like Button */}\n                {user && section && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className={`h-9 w-9 transition-all ${\n                      likeStatus?.isLiked \n                        ? \"text-red-500 hover:text-red-600\" \n                        : \"text-red-400 hover:text-red-500\"\n                    }`}\n                    onClick={handleToggleLike}\n                    disabled={likeSectionMutation.isPending || unlikeSectionMutation.isPending}\n                    data-testid=\"button-like-section\"\n                  >\n                    <Heart \n                      className={`w-5 h-5 transition-all stroke-current ${\n                        likeStatus?.isLiked ? \"fill-current\" : \"fill-transparent\"\n                      }`} \n                    />\n                  </Button>\n                )}\n\n                {isAdmin && section && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity\"\n                    onClick={handleStartTitleEdit}\n                    data-testid=\"button-edit-title\"\n                  >\n                    <Pencil className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n            )}\n            \n            {/* Tags and Mood - Inline Editing */}\n            {section && (\n              <>\n                {editingMetadata ? (\n                  <div className=\"mt-4 space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Label className=\"font-noto text-sm w-16\">Mood:</Label>\n                      <Input\n                        value={editedMood}\n                        onChange={(e) => setEditedMood(e.target.value)}\n                        className=\"font-noto flex-1\"\n                        placeholder=\"e.g., Joyful, Melancholic\"\n                        data-testid=\"input-edit-mood\"\n                      />\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Label className=\"font-noto text-sm w-16\">Tags:</Label>\n                      <Input\n                        value={editedTags}\n                        onChange={(e) => setEditedTags(e.target.value)}\n                        className=\"font-noto flex-1\"\n                        placeholder=\"Comma separated, e.g., romance, family\"\n                        data-testid=\"input-edit-tags\"\n                      />\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={handleSaveMetadataEdit}\n                        disabled={updateSectionMutation.isPending}\n                        data-testid=\"button-save-metadata\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={handleCancelMetadataEdit}\n                        disabled={updateSectionMutation.isPending}\n                        data-testid=\"button-cancel-metadata\"\n                      >\n                        <X className=\"w-4 h-4 mr-2\" />\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex flex-wrap items-center gap-3 mt-3 group\">\n                    {section.mood?.map((mood, idx) => (\n                      <Badge key={`mood-${idx}`} variant=\"secondary\" className=\"font-noto\">\n                        {mood}\n                      </Badge>\n                    ))}\n                    {section.tags?.map((tag) => (\n                      <Badge key={tag} variant=\"outline\" className=\"font-noto\">\n                        #{tag}\n                      </Badge>\n                    ))}\n                    {isAdmin && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-7 w-7 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={handleStartMetadataEdit}\n                        data-testid=\"button-edit-metadata\"\n                      >\n                        <Pencil className=\"w-3 h-3\" />\n                      </Button>\n                    )}\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n\n        <Card className=\"p-8 md:p-12 bg-white/80 backdrop-blur-sm border-0 shadow-md\">\n          {isAdmin && currentPage && (\n            <div className=\"flex items-center justify-between gap-4 mb-6 pb-4 border-b\">\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setCreatingPage(true)}\n                  data-testid=\"button-create-page\"\n                >\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  New Page\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={moveSectionUp}\n                  disabled={!section || allSections.filter(s => s.chapterId === section.chapterId).sort((a, b) => a.order - b.order)[0]?.id === section.id}\n                  data-testid=\"button-move-section-up\"\n                >\n                  <ArrowUp className=\"w-4 h-4 mr-1\" />\n                  Move Section Up\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={moveSectionDown}\n                  disabled={!section || allSections.filter(s => s.chapterId === section.chapterId).sort((a, b) => a.order - b.order).slice(-1)[0]?.id === section.id}\n                  data-testid=\"button-move-section-down\"\n                >\n                  <ArrowDown className=\"w-4 h-4 mr-1\" />\n                  Move Section Down\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {!isEditMode ? (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleEnterEditMode}\n                    data-testid=\"button-edit-page\"\n                  >\n                    <Pencil className=\"w-4 h-4 mr-2\" />\n                    Edit Page\n                  </Button>\n                ) : (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleCancelEdit}\n                      disabled={updatePageMutation.isPending}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      <X className=\"w-4 h-4 mr-2\" />\n                      Cancel\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={handleSaveEdit}\n                      disabled={updatePageMutation.isPending}\n                      data-testid=\"button-save-edit\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {updatePageMutation.isPending ? \"Saving...\" : \"Save\"}\n                    </Button>\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n\n          <div className=\"prose prose-lg max-w-none font-noto\">\n            {isPagesLoading ? (\n              <p className=\"text-muted-foreground\">Loading content...</p>\n            ) : pages.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground mb-4\">\n                  This section has no content yet.\n                </p>\n                {isAdmin && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    As an admin, you can add pages to this section from the admin console.\n                  </p>\n                )}\n              </div>\n            ) : currentPage ? (\n              isEditMode ? (\n                <div className=\"space-y-4\">\n                  <MediaToolbar\n                    onInsertImage={() => setIsImageDialogOpen(true)}\n                    onInsertInstagram={() => setIsInstagramDialogOpen(true)}\n                    onInsertSpotify={() => setIsSpotifyDialogOpen(true)}\n                  />\n                  <div data-testid=\"editor-edit-content\">\n                    <TiptapEditor\n                      value={editedContent}\n                      onChange={setEditedContent}\n                      placeholder=\"Write your journal entry...\"\n                    />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Use the rich text toolbar to format your content, or use the media toolbar above to add videos and Spotify embeds\n                  </p>\n                </div>\n              ) : (\n                <div className=\"rendered-content leading-relaxed text-kdrama-ink\">\n                  {renderContent(currentPage.content)}\n                </div>\n              )\n            ) : null}\n          </div>\n        </Card>\n\n        {totalPages > 0 && (\n          <div className=\"mt-8 flex items-center justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevPage}\n              disabled={currentPageIndex === 0}\n              data-testid=\"button-prev-page\"\n            >\n              <ChevronLeft className=\"w-4 h-4 mr-2\" />\n              Previous\n            </Button>\n\n            <div className=\"flex items-center gap-4\">\n              <div className=\"font-noto text-sm text-muted-foreground\">\n                Page {currentPageIndex + 1} of {totalPages}\n              </div>\n              \n              {isAdmin && currentPage && totalPages > 1 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setDeletingPageId(currentPage.id)}\n                  className=\"h-8 w-8\"\n                  data-testid={`button-delete-page-${currentPage.id}`}\n                >\n                  <Trash2 className=\"w-4 h-4 text-destructive\" />\n                </Button>\n              )}\n            </div>\n\n            <Button\n              variant=\"outline\"\n              onClick={handleNextPage}\n              data-testid=\"button-next-page\"\n            >\n              {isLastPage && isLastSection ? (\n                <>\n                  Back to Chapters\n                  <ChevronRight className=\"w-4 h-4 ml-2\" />\n                </>\n              ) : isLastPage && nextSection ? (\n                <>\n                  Next Section\n                  <ChevronRight className=\"w-4 h-4 ml-2\" />\n                </>\n              ) : (\n                <>\n                  Next\n                  <ChevronRight className=\"w-4 h-4 ml-2\" />\n                </>\n              )}\n            </Button>\n          </div>\n        )}\n        </div>\n      </div>\n\n      {/* Create Page Dialog */}\n      <Dialog open={creatingPage} onOpenChange={setCreatingPage}>\n        <DialogContent data-testid=\"dialog-create-page\">\n          <DialogHeader>\n            <DialogTitle className=\"font-myeongjo\">Create New Page</DialogTitle>\n            <DialogDescription className=\"font-noto\">\n              Add a new empty page to this section. You can edit it after creation.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <p className=\"text-sm text-muted-foreground font-noto\">\n              A new blank page will be added as page {pages.length + 1} of this section.\n            </p>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setCreatingPage(false)}\n              data-testid=\"button-cancel-create-page\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleCreatePage}\n              disabled={createPageMutation.isPending}\n              data-testid=\"button-submit-create-page\"\n            >\n              {createPageMutation.isPending ? \"Creating...\" : \"Create Page\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Page Confirmation Dialog */}\n      <AlertDialog open={!!deletingPageId} onOpenChange={() => setDeletingPageId(null)}>\n        <AlertDialogContent data-testid=\"dialog-delete-page\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Page</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this page? This action cannot be undone.\n              {totalPages === 1 && \" You cannot delete the last page in a section.\"}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-page\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingPageId && deletePageMutation.mutate(deletingPageId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete-page\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Media Embed Dialogs */}\n      <ImageEmbedDialog\n        open={isImageDialogOpen}\n        onOpenChange={setIsImageDialogOpen}\n        onInsert={insertMediaContent}\n      />\n      <InstagramEmbedDialog\n        open={isInstagramDialogOpen}\n        onOpenChange={setIsInstagramDialogOpen}\n        onInsert={insertMediaContent}\n      />\n      <SpotifyEmbedDialog\n        open={isSpotifyDialogOpen}\n        onOpenChange={setIsSpotifyDialogOpen}\n        sectionId={sectionId}\n      />\n    </div>\n  );\n}\n","size_bytes":44484},"client/src/components/Knot.tsx":{"content":"import { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface KnotProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  label?: string;\n  tone?: \"primary\" | \"gold\" | \"muted\";\n  className?: string;\n}\n\nconst sizeMap = {\n  sm: { size: 16, strokeWidth: 2.5 },\n  md: { size: 20, strokeWidth: 3 },\n  lg: { size: 32, strokeWidth: 3.5 },\n};\n\nconst toneClasses = {\n  primary: \"stroke-kdrama-thread fill-kdrama-thread/20\",\n  gold: \"stroke-kdrama-lavender fill-kdrama-lavender/20\",\n  muted: \"stroke-kdrama-sakura/50 fill-kdrama-sakura/10\",\n};\n\nexport function Knot({ size = \"md\", label, tone = \"primary\", className = \"\" }: KnotProps) {\n  const { size: svgSize, strokeWidth } = sizeMap[size];\n  \n  const knotIcon = (\n    <svg\n      width={svgSize}\n      height={svgSize}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={`${toneClasses[tone]} transition-all duration-180 hover:scale-105 ${className}`}\n      aria-label={label || \"Knot marker\"}\n      role=\"img\"\n    >\n      {/* Decorative knot/loop design */}\n      <circle cx=\"12\" cy=\"12\" r=\"8\" strokeWidth={strokeWidth} />\n      <path\n        d=\"M 12 4 Q 16 8 12 12 Q 8 8 12 4\"\n        strokeWidth={strokeWidth}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M 12 20 Q 8 16 12 12 Q 16 16 12 20\"\n        strokeWidth={strokeWidth}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <circle cx=\"12\" cy=\"12\" r=\"2.5\" fill=\"currentColor\" className=\"fill-current\" />\n    </svg>\n  );\n\n  if (label) {\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div className=\"inline-block cursor-help\">{knotIcon}</div>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p className=\"font-noto text-sm\">{label}</p>\n        </TooltipContent>\n      </Tooltip>\n    );\n  }\n\n  return knotIcon;\n}\n","size_bytes":1884},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AdminToolbar.tsx":{"content":"import { AdminToolbar } from \"../AdminToolbar\";\nimport { useState } from \"react\";\n\nexport default function AdminToolbarExample() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isPublished, setIsPublished] = useState(true);\n\n  return (\n    <div className=\"min-h-[300px]\">\n      <AdminToolbar\n        isEditing={isEditing}\n        isPublished={isPublished}\n        onToggleEdit={() => {\n          setIsEditing(!isEditing);\n          console.log(\"Toggle edit mode\");\n        }}\n        onSave={() => console.log(\"Save changes\")}\n        onTogglePublish={() => {\n          setIsPublished(!isPublished);\n          console.log(\"Toggle publish status\");\n        }}\n        onSetEditedDate={() => console.log(\"Set edited date\")}\n        onDelete={() => console.log(\"Delete page\")}\n        onViewAnalytics={() => console.log(\"View analytics\")}\n      />\n      <div className=\"p-8\">\n        <p className=\"font-noto text-muted-foreground text-center\">\n          Admin toolbar is fixed at the top. Try the buttons to see console logs.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1083},"client/src/components/EmbedPlaceholder.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Instagram, Music2, ExternalLink } from \"lucide-react\";\n\ninterface EmbedPlaceholderProps {\n  type: \"instagram\" | \"spotify\";\n  url: string;\n  title?: string;\n}\n\nexport function EmbedPlaceholder({ type, url, title }: EmbedPlaceholderProps) {\n  const config = {\n    instagram: {\n      icon: Instagram,\n      label: \"Instagram Reel\",\n      gradient: \"from-purple-500 to-pink-500\",\n      buttonText: \"View on Instagram\",\n    },\n    spotify: {\n      icon: Music2,\n      label: \"Spotify Track\",\n      gradient: \"from-green-500 to-emerald-500\",\n      buttonText: \"Listen on Spotify\",\n    },\n  };\n\n  const { icon: Icon, label, gradient, buttonText } = config[type];\n\n  return (\n    <Card className=\"overflow-hidden rounded-2xl border-0 shadow-md\">\n      <div className={`h-2 bg-gradient-to-r ${gradient}`} />\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <div className={`p-3 rounded-full bg-gradient-to-r ${gradient}`}>\n            <Icon className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h4 className=\"font-myeongjo font-bold text-kdrama-ink dark:text-foreground\">\n              {title || label}\n            </h4>\n            <p className=\"font-noto text-sm text-muted-foreground\">\n              Embedded content\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"aspect-video bg-muted/30 rounded-lg flex items-center justify-center mb-4\">\n          <Icon className=\"w-16 h-16 text-muted-foreground/30\" />\n        </div>\n\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full font-noto\"\n          onClick={() => window.open(url, \"_blank\")}\n          data-testid={`button-${type}-open`}\n        >\n          <ExternalLink className=\"w-4 h-4 mr-2\" />\n          {buttonText}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1990},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home, AlertCircle, LogOut } from \"lucide-react\";\nimport { ChapterManagement } from \"@/components/admin/ChapterManagement\";\nimport { ContentManagement } from \"@/components/admin/ContentManagement\";\nimport { AnalyticsDashboard } from \"@/components/admin/AnalyticsDashboard\";\nimport { ActivityLog } from \"@/components/admin/ActivityLog\";\n\nexport default function Admin() {\n  const [, setLocation] = useLocation();\n  const { isAdmin, logout } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"content\");\n  const [contentTab, setContentTab] = useState(\"chapters\");\n\n  if (!isAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-kdrama-cream/20 to-kdrama-sky/10\">\n        <Card className=\"max-w-md\">\n          <CardHeader>\n            <div className=\"flex items-center gap-2 text-kdrama-thread\">\n              <AlertCircle className=\"w-5 h-5\" />\n              <CardTitle className=\"font-myeongjo\">Access Denied</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"font-noto text-muted-foreground\">\n              You need admin privileges to access this page.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-kdrama-cream/20 to-kdrama-sky/10\">\n      {/* Header */}\n      <div className=\"border-b bg-white/80 dark:bg-card/80 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"font-myeongjo text-2xl font-bold text-kdrama-ink dark:text-foreground\">\n              Admin Panel - 紅線日記\n            </h1>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/\")}\n                data-testid=\"button-home\"\n              >\n                <Home className=\"w-4 h-4 mr-2\" />\n                Home\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={logout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full max-w-2xl mx-auto grid-cols-3 mb-8\">\n            <TabsTrigger value=\"content\" className=\"font-noto\" data-testid=\"tab-content\">\n              Content Management\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"font-noto\" data-testid=\"tab-analytics\">\n              Analytics\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\" className=\"font-noto\" data-testid=\"tab-activity\">\n              Activity Log\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"content\" className=\"space-y-6\">\n            <Tabs value={contentTab} onValueChange={setContentTab}>\n              <TabsList className=\"grid w-full max-w-md mx-auto grid-cols-2 mb-6\">\n                <TabsTrigger value=\"chapters\" className=\"font-noto\" data-testid=\"tab-chapters\">\n                  Chapters\n                </TabsTrigger>\n                <TabsTrigger value=\"content\" className=\"font-noto\" data-testid=\"tab-content-editor\">\n                  Sections & Pages\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"chapters\">\n                <ChapterManagement />\n              </TabsContent>\n\n              <TabsContent value=\"content\">\n                <ContentManagement />\n              </TabsContent>\n            </Tabs>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\">\n            <AnalyticsDashboard />\n          </TabsContent>\n\n          <TabsContent value=\"activity\">\n            <ActivityLog />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4507},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ThreadBar.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Knot } from \"./Knot\";\n\ninterface ThreadBarProps {\n  progress: number;\n  paused?: boolean;\n  milestones?: number[];\n  showLabels?: boolean;\n  onMilestone?: (milestone: number) => void;\n}\n\nexport function ThreadBar({\n  progress,\n  paused = false,\n  milestones = [0.25, 0.5, 0.75, 1],\n  showLabels = false,\n  onMilestone,\n}: ThreadBarProps) {\n  const [hitMilestones, setHitMilestones] = useState<Set<number>>(new Set());\n\n  useEffect(() => {\n    milestones.forEach((m) => {\n      if (progress >= m && !hitMilestones.has(m)) {\n        setHitMilestones((prev) => new Set(prev).add(m));\n        onMilestone?.(m);\n      }\n    });\n  }, [progress, milestones, hitMilestones, onMilestone]);\n\n  // Generate curved path for the thread\n  const generateThreadPath = (progressPercent: number, totalWidth: number) => {\n    const numWaves = 3; // Number of wave cycles\n    const amplitude = 6; // Height of curves\n    const points: string[] = [];\n    \n    // Start point\n    points.push(`M 0 0`);\n    \n    // Generate smooth wave using quadratic bezier curves\n    const segmentWidth = totalWidth / (numWaves * 2);\n    for (let i = 0; i < numWaves * 2; i++) {\n      const x1 = segmentWidth * i;\n      const x2 = segmentWidth * (i + 1);\n      const y = i % 2 === 0 ? -amplitude : amplitude;\n      \n      // Control point in the middle of the segment\n      const cx = (x1 + x2) / 2;\n      \n      points.push(`Q ${cx} ${y}, ${x2} 0`);\n    }\n    \n    return points.join(\" \");\n  };\n\n  return (\n    <div\n      className=\"relative w-full h-16 bg-transparent overflow-visible\"\n      role=\"progressbar\"\n      aria-valuenow={Math.round(progress * 100)}\n      aria-valuemin={0}\n      aria-valuemax={100}\n    >\n      <svg\n        className=\"absolute inset-0 w-full h-full\"\n        viewBox=\"0 0 100 16\"\n        preserveAspectRatio=\"none\"\n        style={{ overflow: 'visible' }}\n      >\n        {/* Background thread (faded) */}\n        <path\n          d={generateThreadPath(100, 100)}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"0.4\"\n          className=\"text-kdrama-sakura/30\"\n          transform=\"translate(0, 8)\"\n          vectorEffect=\"non-scaling-stroke\"\n        />\n        \n        {/* Progress thread (vibrant red) */}\n        <path\n          d={generateThreadPath(progress * 100, progress * 100)}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"0.5\"\n          className={`text-kdrama-thread transition-all duration-300 ${\n            paused ? \"opacity-60\" : \"opacity-100\"\n          }`}\n          transform=\"translate(0, 8)\"\n          vectorEffect=\"non-scaling-stroke\"\n          strokeLinecap=\"round\"\n        />\n        \n        {/* Milestone knots */}\n        {milestones.map((milestone) => {\n          const isHit = progress >= milestone;\n          const xPos = milestone * 100;\n          \n          return (\n            <g key={milestone} transform={`translate(${xPos}, 8)`}>\n              <foreignObject\n                x=\"-8\"\n                y=\"-8\"\n                width=\"16\"\n                height=\"16\"\n                style={{ overflow: 'visible' }}\n              >\n                <div className=\"flex items-center justify-center w-full h-full\">\n                  <Knot\n                    size=\"sm\"\n                    tone={isHit ? \"primary\" : \"muted\"}\n                    className={`transition-all duration-180 ${\n                      isHit ? \"animate-pulse-gentle\" : \"\"\n                    }`}\n                  />\n                </div>\n              </foreignObject>\n              {showLabels && (\n                <foreignObject\n                  x=\"-20\"\n                  y=\"12\"\n                  width=\"40\"\n                  height=\"20\"\n                  style={{ overflow: 'visible' }}\n                >\n                  <div className=\"flex items-center justify-center w-full\">\n                    <span className=\"text-xs text-muted-foreground font-noto whitespace-nowrap\">\n                      {Math.round(milestone * 100)}%\n                    </span>\n                  </div>\n                </foreignObject>\n              )}\n            </g>\n          );\n        })}\n      </svg>\n    </div>\n  );\n}\n","size_bytes":4217},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/examples/ChapterNav.tsx":{"content":"import { ChapterNav } from \"../ChapterNav\";\nimport { useState } from \"react\";\n\nexport default function ChapterNavExample() {\n  const [activeId, setActiveId] = useState(\"ch2\");\n\n  const mockChapters = [\n    {\n      id: \"ch1\",\n      title: \"The Beginning\",\n      emoji: \"🌸\",\n      order: 1,\n      isPublic: true,\n      pageCount: 5,\n    },\n    {\n      id: \"ch2\",\n      title: \"Unexpected Encounters\",\n      emoji: \"☂️\",\n      order: 2,\n      isPublic: true,\n      pageCount: 8,\n    },\n    {\n      id: \"ch3\",\n      title: \"Growing Closer\",\n      emoji: \"💜\",\n      order: 3,\n      isPublic: true,\n      pageCount: 12,\n    },\n    {\n      id: \"ch4\",\n      title: \"Challenges & Revelations\",\n      emoji: \"⚡\",\n      order: 4,\n      isPublic: true,\n      pageCount: 6,\n    },\n  ];\n\n  return (\n    <div className=\"p-8 bg-kdrama-lavender/10 min-h-[500px]\">\n      <div className=\"max-w-md mx-auto\">\n        <h3 className=\"font-myeongjo text-2xl text-kdrama-ink mb-6\">Chapters</h3>\n        <ChapterNav\n          chapters={mockChapters}\n          activeChapterId={activeId}\n          onChapterClick={(id) => {\n            setActiveId(id);\n            console.log(`Chapter clicked: ${id}`);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1244},"client/src/components/examples/EmbedPlaceholder.tsx":{"content":"import { EmbedPlaceholder } from \"../EmbedPlaceholder\";\n\nexport default function EmbedPlaceholderExample() {\n  return (\n    <div className=\"p-8 bg-kdrama-lavender/10 min-h-[600px]\">\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <h3 className=\"font-myeongjo text-2xl text-kdrama-ink mb-6\">Media Embeds</h3>\n        \n        <EmbedPlaceholder\n          type=\"instagram\"\n          url=\"https://www.instagram.com/reel/example\"\n          title=\"Behind the Scenes - Cherry Blossom Festival\"\n        />\n\n        <EmbedPlaceholder\n          type=\"spotify\"\n          url=\"https://open.spotify.com/track/example\"\n          title=\"Our Song - K-Drama OST\"\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":700},"client/src/components/examples/FateLinks.tsx":{"content":"import { FateLinks } from \"../FateLinks\";\n\nexport default function FateLinksExample() {\n  const mockCandidates = [\n    {\n      id: \"1\",\n      title: \"Lost in Translation\",\n      slug: \"lost-in-translation\",\n      tags: [\"language\", \"culture\", \"misunderstanding\"],\n      mood: \"Bittersweet\",\n      description: \"When words fail but hearts understand...\",\n    },\n    {\n      id: \"2\",\n      title: \"The Convenience Store Date\",\n      slug: \"convenience-store-date\",\n      tags: [\"late-night\", \"ramyeon\", \"companionship\"],\n      mood: \"Cozy\",\n      description: \"Sharing instant noodles at 3 AM became our tradition...\",\n    },\n    {\n      id: \"3\",\n      title: \"Cherry Blossoms in Yeouido\",\n      slug: \"cherry-blossoms\",\n      tags: [\"spring\", \"cherry-blossoms\", \"promises\"],\n      mood: \"Hopeful\",\n      description: \"Under the sakura trees, we made a promise...\",\n    },\n  ];\n\n  return (\n    <div className=\"p-8 bg-gradient-to-b from-kdrama-cream/20 to-kdrama-sky/20 min-h-[600px]\">\n      <div className=\"max-w-6xl mx-auto\">\n        <FateLinks\n          currentPageId=\"current\"\n          candidates={mockCandidates}\n          onNavigate={(slug) => console.log(`Navigate to: ${slug}`)}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1227},"client/src/components/examples/ReadingContent.tsx":{"content":"import { ReadingContent } from \"../ReadingContent\";\n\nexport default function ReadingContentExample() {\n  const mockContent = `Seoul in the spring is a different world. The cherry blossoms paint the city in soft pinks and whites, and everywhere you look, there's a promise of new beginnings.\n\nI didn't expect to meet you that day. The forecast said rain, but I went out anyway, drawn by the last days of the cherry blossom season. You were standing under the biggest tree in Yeouido Park, camera in hand, trying to capture the perfect shot.\n\nWhen our eyes met, it felt like the world stopped for just a moment. The petals were falling around us like snow, and I remember thinking that this must be what they mean by \"destiny.\"\n\nWe talked for hours that day. About everything and nothing. About dreams and fears, about the places we wanted to go and the people we wanted to become. The sun set and we barely noticed, too caught up in our conversation.\n\nLooking back now, I realize that was the moment the red string of fate tied itself around us. From that day forward, our stories became intertwined, our paths forever connected by something greater than either of us could understand.`;\n\n  return (\n    <div className=\"p-8 bg-gradient-to-b from-kdrama-cream/30 to-kdrama-sky/30 min-h-screen\">\n      <ReadingContent\n        title=\"Under the Cherry Blossoms\"\n        content={mockContent}\n        mood=\"Romantic\"\n        tags={[\"spring\", \"destiny\", \"first-meeting\"]}\n        editedAt={new Date(\"2024-03-15T14:30:00\")}\n      />\n    </div>\n  );\n}\n","size_bytes":1543},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/reader.tsx":{"content":"import { useState } from \"react\";\nimport { ThreadBar } from \"@/components/ThreadBar\";\nimport { ReadingContent } from \"@/components/ReadingContent\";\nimport { FateLinks } from \"@/components/FateLinks\";\nimport { ChapterNav } from \"@/components/ChapterNav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X } from \"lucide-react\";\n\nexport default function Reader() {\n  const [progress, setProgress] = useState(0.35);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const mockChapters = [\n    { id: \"ch1\", title: \"The Beginning\", emoji: \"🌸\", order: 1, isPublic: true, pageCount: 5 },\n    { id: \"ch2\", title: \"Unexpected Encounters\", emoji: \"☂️\", order: 2, isPublic: true, pageCount: 8 },\n    { id: \"ch3\", title: \"Growing Closer\", emoji: \"💜\", order: 3, isPublic: true, pageCount: 12 },\n  ];\n\n  const mockFateLinks = [\n    {\n      id: \"1\",\n      title: \"Coffee Shop Confessions\",\n      slug: \"coffee-shop\",\n      tags: [\"coffee\", \"confession\", \"sweet\"],\n      mood: \"Sweet\",\n      description: \"Words unspoken finally found their way out...\",\n    },\n    {\n      id: \"2\",\n      title: \"Sunset at Han River\",\n      slug: \"han-river\",\n      tags: [\"sunset\", \"reflection\", \"peaceful\"],\n      mood: \"Peaceful\",\n      description: \"Watching the sun set, we talked about everything and nothing...\",\n    },\n    {\n      id: \"3\",\n      title: \"The Promise\",\n      slug: \"promise\",\n      tags: [\"cherry-blossoms\", \"spring\", \"promise\"],\n      mood: \"Hopeful\",\n      description: \"Under the sakura trees, we made a promise...\",\n    },\n  ];\n\n  const mockContent = `Seoul in the spring is a different world. The cherry blossoms paint the city in soft pinks and whites, and everywhere you look, there's a promise of new beginnings.\n\nI didn't expect to meet you that day. The forecast said rain, but I went out anyway, drawn by the last days of the cherry blossom season. You were standing under the biggest tree in Yeouido Park, camera in hand, trying to capture the perfect shot.\n\nWhen our eyes met, it felt like the world stopped for just a moment. The petals were falling around us like snow, and I remember thinking that this must be what they mean by \"destiny.\"\n\nWe talked for hours that day. About everything and nothing. About dreams and fears, about the places we wanted to go and the people we wanted to become. The sun set and we barely noticed, too caught up in our conversation.\n\nLooking back now, I realize that was the moment the red string of fate tied itself around us. From that day forward, our stories became intertwined, our paths forever connected by something greater than either of us could understand.\n\nThe days that followed were filled with a kind of magic I'd never experienced before. Every text message made my heart race. Every phone call lasted hours. We discovered shared interests and laughed at inside jokes that only we understood.\n\nIt was like finding a missing piece of myself I didn't know was lost.`;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-kdrama-cream/30 to-kdrama-sky/20\">\n      <div className=\"sticky top-0 z-50 bg-white/95 dark:bg-background/95 backdrop-blur-sm border-b border-border shadow-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              data-testid=\"button-toggle-sidebar\"\n            >\n              {sidebarOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n            <h2 className=\"font-myeongjo text-xl font-bold text-kdrama-ink dark:text-foreground\">\n              Under the Cherry Blossoms\n            </h2>\n            <div className=\"w-10\" />\n          </div>\n          <ThreadBar\n            progress={progress}\n            paused={false}\n            onMilestone={(m) => console.log(`Milestone: ${m * 100}%`)}\n          />\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-12 relative\">\n        {sidebarOpen && (\n          <div className=\"fixed inset-0 bg-black/50 z-40 md:hidden\" onClick={() => setSidebarOpen(false)} />\n        )}\n        \n        <div className={`fixed top-20 left-0 h-full w-80 bg-white dark:bg-card p-6 shadow-xl z-50 transition-transform duration-300 ${\n          sidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        } md:relative md:translate-x-0 md:shadow-none md:bg-transparent`}>\n          <h3 className=\"font-myeongjo text-2xl text-kdrama-ink dark:text-foreground mb-6\">Chapters</h3>\n          <ChapterNav\n            chapters={mockChapters}\n            activeChapterId=\"ch2\"\n            onChapterClick={(id) => console.log(`Navigate to chapter: ${id}`)}\n          />\n        </div>\n\n        <div className=\"md:ml-96\">\n          <ReadingContent\n            title=\"Under the Cherry Blossoms\"\n            content={mockContent}\n            mood=\"Romantic\"\n            tags={[\"spring\", \"destiny\", \"first-meeting\"]}\n            editedAt={new Date(\"2024-03-15T14:30:00\")}\n          />\n\n          <div className=\"mt-16\">\n            <FateLinks\n              currentPageId=\"current\"\n              candidates={mockFateLinks}\n              onNavigate={(slug) => console.log(`Navigate to: ${slug}`)}\n            />\n          </div>\n\n          <div className=\"mt-12 text-center\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setProgress(Math.min(1, progress + 0.1))}\n              className=\"font-noto rounded-2xl\"\n              data-testid=\"button-simulate-scroll\"\n            >\n              Simulate Reading Progress\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5752},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      const errorData = await res.json();\n      \n      // Check if this is an invalid session error\n      if (errorData.invalidSession) {\n        // Clear the stored user data\n        localStorage.removeItem(\"kdrama-journal-user\");\n        // Redirect to login page\n        window.location.href = \"/\";\n      }\n      \n      throw new Error(errorData.error || `${res.status}: ${res.statusText}`);\n    } catch (e) {\n      // If response is not JSON, fall back to text\n      const text = (await res.text()) || res.statusText;\n      throw new Error(`${res.status}: ${text}`);\n    }\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  // Check for invalid session before throwing\n  if (res.status === 401) {\n    try {\n      const errorData = await res.json();\n      if (errorData.invalidSession) {\n        localStorage.removeItem(\"kdrama-journal-user\");\n        window.location.href = \"/\";\n        return res;\n      }\n    } catch (e) {\n      // Continue with normal error handling\n    }\n  }\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2227},"client/src/components/examples/Knot.tsx":{"content":"import { Knot } from \"../Knot\";\n\nexport default function KnotExample() {\n  return (\n    <div className=\"p-8 bg-kdrama-sky/20 min-h-[200px]\">\n      <div className=\"max-w-2xl mx-auto space-y-8\">\n        <div>\n          <h3 className=\"font-myeongjo text-xl text-kdrama-ink mb-4\">Knot Sizes</h3>\n          <div className=\"flex items-center gap-6\">\n            <Knot size=\"sm\" label=\"Small knot\" />\n            <Knot size=\"md\" label=\"Medium knot\" />\n            <Knot size=\"lg\" label=\"Large knot\" />\n          </div>\n        </div>\n        <div>\n          <h3 className=\"font-myeongjo text-xl text-kdrama-ink mb-4\">Knot Tones</h3>\n          <div className=\"flex items-center gap-6\">\n            <Knot tone=\"primary\" size=\"lg\" label=\"Primary (Thread)\" />\n            <Knot tone=\"gold\" size=\"lg\" label=\"Gold (Lavender)\" />\n            <Knot tone=\"muted\" size=\"lg\" label=\"Muted (Sakura)\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":946},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/AdminToolbar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Edit3,\n  Save,\n  Eye,\n  EyeOff,\n  Calendar,\n  Plus,\n  Trash2,\n  BarChart3,\n} from \"lucide-react\";\n\ninterface AdminToolbarProps {\n  isEditing?: boolean;\n  isPublished?: boolean;\n  onToggleEdit?: () => void;\n  onSave?: () => void;\n  onTogglePublish?: () => void;\n  onSetEditedDate?: () => void;\n  onDelete?: () => void;\n  onViewAnalytics?: () => void;\n}\n\nexport function AdminToolbar({\n  isEditing = false,\n  isPublished = true,\n  onToggleEdit,\n  onSave,\n  onTogglePublish,\n  onSetEditedDate,\n  onDelete,\n  onViewAnalytics,\n}: AdminToolbarProps) {\n  return (\n    <div className=\"sticky top-0 z-50 bg-white/95 dark:bg-background/95 backdrop-blur-sm border-b border-border shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <div className=\"flex items-center gap-3\">\n            <Badge variant={isPublished ? \"default\" : \"secondary\"} className=\"font-noto\">\n              {isPublished ? \"Published\" : \"Draft\"}\n            </Badge>\n            <Badge variant=\"outline\" className=\"font-noto text-xs\">\n              Admin Mode\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant={isEditing ? \"default\" : \"outline\"}\n              onClick={onToggleEdit}\n              data-testid=\"button-toggle-edit\"\n            >\n              <Edit3 className=\"w-4 h-4 mr-2\" />\n              {isEditing ? \"Editing\" : \"Edit\"}\n            </Button>\n\n            {isEditing && (\n              <Button\n                size=\"sm\"\n                variant=\"default\"\n                onClick={onSave}\n                data-testid=\"button-save\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                Save\n              </Button>\n            )}\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onTogglePublish}\n              data-testid=\"button-toggle-publish\"\n            >\n              {isPublished ? (\n                <>\n                  <EyeOff className=\"w-4 h-4 mr-2\" />\n                  Unpublish\n                </>\n              ) : (\n                <>\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  Publish\n                </>\n              )}\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onSetEditedDate}\n              data-testid=\"button-set-date\"\n            >\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Set Date\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onViewAnalytics}\n              data-testid=\"button-analytics\"\n            >\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Analytics\n            </Button>\n\n            <div className=\"w-px h-6 bg-border\" />\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onDelete}\n              data-testid=\"button-delete\"\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3338},"client/src/components/FateLinks.tsx":{"content":"import { PolaroidCard } from \"./PolaroidCard\";\n\ninterface PageCandidate {\n  id: string;\n  title: string;\n  slug: string;\n  tags: string[];\n  mood?: string;\n  coverUrl?: string;\n  description?: string;\n}\n\ninterface FateLinksProps {\n  currentPageId: string;\n  candidates?: PageCandidate[];\n  maxLinks?: number;\n  onNavigate?: (slug: string) => void;\n}\n\nexport function FateLinks({\n  candidates = [],\n  maxLinks = 3,\n  onNavigate,\n}: FateLinksProps) {\n  const displayedCandidates = candidates.slice(0, maxLinks);\n\n  if (displayedCandidates.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"relative py-12\">\n      <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-kdrama-thread to-transparent\" />\n      \n      <div className=\"text-center mb-8\">\n        <h2 className=\"font-myeongjo text-3xl text-kdrama-ink dark:text-foreground mb-2\">\n          The Thread Continues...\n        </h2>\n        <p className=\"font-noto text-muted-foreground\">\n          Follow the red string to your next chapter\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 relative\">\n        <svg\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\n          style={{ zIndex: 0 }}\n        >\n          {displayedCandidates.map((_, index) => {\n            const startX = 50;\n            const startY = 0;\n            const endX = (index + 0.5) * (100 / displayedCandidates.length);\n            const endY = 100;\n            const controlY = 50;\n\n            return (\n              <path\n                key={index}\n                d={`M ${startX} ${startY} Q ${endX} ${controlY} ${endX} ${endY}`}\n                stroke=\"#D7263D\"\n                strokeWidth=\"2\"\n                fill=\"none\"\n                opacity=\"0.3\"\n                strokeDasharray=\"4 4\"\n              />\n            );\n          })}\n        </svg>\n\n        {displayedCandidates.map((candidate) => (\n          <div key={candidate.id} className=\"relative z-10\">\n            <PolaroidCard\n              title={candidate.title}\n              coverUrl={candidate.coverUrl}\n              mood={candidate.mood}\n              tags={candidate.tags}\n              description={candidate.description}\n              onClick={() => onNavigate?.(candidate.slug)}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2374},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    // Temporarily disabled to prevent overlay blocking while debugging\n    // runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1155},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/home.tsx":{"content":"import { useQuery, useQueries } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Book, LogIn, LogOut, Play, CheckCircle2, PlayCircle, Heart } from \"lucide-react\";\nimport { Knot } from \"@/components/Knot\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport type { Chapter, ReadingProgress, Section } from \"@shared/schema\";\nimport { useMemo } from \"react\";\n\ninterface ChapterProgress {\n  completed: boolean;\n  inProgress: boolean;\n  totalSections: number;\n  completedSections: number;\n}\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { user, logout, isAuthenticated } = useAuth();\n\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/chapters\"],\n  });\n\n  const { data: lastRead } = useQuery<ReadingProgress | null>({\n    queryKey: [`/api/reading-progress/last?userId=${user?.id || ''}`],\n    enabled: !!user,\n  });\n\n  const { data: likedSections = [] } = useQuery<Section[]>({\n    queryKey: [`/api/users/${user?.id}/liked-sections`],\n    queryFn: () => user?.id \n      ? fetch(`/api/users/${user.id}/liked-sections`).then(r => r.json()) \n      : Promise.resolve([]),\n    enabled: !!user?.id,\n  });\n\n  // Fetch progress for all chapters using useQueries to avoid hook order issues\n  const chapterProgressQueries = useQueries({\n    queries: chapters.map((chapter) => ({\n      queryKey: [`/api/chapters/${chapter.id}/progress?userId=${user?.id || ''}`],\n      enabled: !!user && !!chapter.id,\n    })),\n  });\n\n  // Create a map of chapter ID to progress data\n  const progressMap = useMemo(() => {\n    const map = new Map<string, ChapterProgress>();\n    chapters.forEach((chapter, index) => {\n      if (chapterProgressQueries[index]?.data) {\n        map.set(chapter.id, chapterProgressQueries[index].data as ChapterProgress);\n      }\n    });\n    return map;\n  }, [chapters, chapterProgressQueries]);\n\n  const handleLogin = () => {\n    setLocation(\"/login\");\n  };\n\n  const handleAdmin = () => {\n    setLocation(\"/admin\");\n  };\n\n  const handleResume = () => {\n    if (lastRead?.sectionId) {\n      setLocation(`/read/${lastRead.sectionId}`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-kdrama-cream/40 via-kdrama-sakura/20 to-kdrama-lavender/20\">\n      <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-kdrama-thread via-kdrama-sakura to-kdrama-lavender\" />\n      \n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"flex justify-end mb-4\">\n          {isAuthenticated ? (\n            <div className=\"flex items-center gap-3\">\n              <span className=\"font-noto text-sm text-muted-foreground\">\n                {user?.username}\n              </span>\n              {user?.role === \"admin\" && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleAdmin}\n                  data-testid=\"button-admin\"\n                >\n                  Admin\n                </Button>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={logout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          ) : (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleLogin}\n              data-testid=\"button-login-header\"\n            >\n              <LogIn className=\"w-4 h-4 mr-2\" />\n              Login\n            </Button>\n          )}\n        </div>\n\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center gap-3 mb-6\">\n            <Knot size=\"lg\" tone=\"primary\" />\n            <h1 className=\"font-myeongjo text-5xl md:text-7xl font-bold text-kdrama-ink dark:text-foreground\">\n              紅線日記\n            </h1>\n            <Knot size=\"lg\" tone=\"gold\" />\n          </div>\n          \n          <p className=\"font-noto text-xl text-muted-foreground max-w-2xl mx-auto mb-6\">\n            Red String of Fate Journal\n          </p>\n\n          {lastRead && (\n            <Button\n              size=\"lg\"\n              onClick={handleResume}\n              className=\"font-noto rounded-2xl\"\n              data-testid=\"button-resume\"\n            >\n              <Play className=\"w-5 h-5 mr-2\" />\n              Resume Reading\n            </Button>\n          )}\n        </div>\n\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"font-myeongjo text-3xl font-bold text-kdrama-ink dark:text-foreground\">\n              Chapters\n            </h2>\n            <Badge variant=\"secondary\" className=\"font-noto bg-[#c4c4c442] text-[#2d2a32]\">\n              {chapters.length} {chapters.length === 1 ? \"Chapter\" : \"Chapters\"}\n            </Badge>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Liked Sections Card - Shows only when user has liked sections */}\n            {user && likedSections.length > 0 && (\n              <Card\n                className=\"cursor-pointer bg-gradient-to-br from-kdrama-rose/10 via-white/80 to-kdrama-sakura/10 dark:from-kdrama-rose/20 dark:via-card/80 dark:to-kdrama-sakura/20 backdrop-blur-sm rounded-2xl border-0 shadow-lg hover:shadow-xl transition-all duration-180 hover:-translate-y-1 overflow-hidden relative\"\n                onClick={() => setLocation(\"/liked-sections\")}\n                data-testid=\"card-liked-sections\"\n              >\n                <div className=\"absolute top-4 right-4 z-10\">\n                  <Badge \n                    variant=\"default\" \n                    className=\"bg-transparent hover:bg-white/20 border-0 shadow-md font-noto text-[#f0425c]\"\n                  >\n                    <Heart className=\"w-3 h-3 mr-1 fill-current\" />\n                    {likedSections.length}\n                  </Badge>\n                </div>\n                \n                <div className=\"h-48 w-full bg-gradient-to-br from-kdrama-rose/20 via-kdrama-sakura/30 to-kdrama-lavender/20 flex items-center justify-center\">\n                  <Heart className=\"w-16 h-16 text-[#f0425c] fill-transparent stroke-current stroke-2\" />\n                </div>\n                \n                <CardHeader>\n                  <CardTitle className=\"font-myeongjo text-2xl text-kdrama-ink dark:text-foreground\">\n                    Liked Sections\n                  </CardTitle>\n                  <CardDescription className=\"font-noto\">\n                    Your collection of {likedSections.length} favorite {likedSections.length === 1 ? \"section\" : \"sections\"}\n                  </CardDescription>\n                </CardHeader>\n              </Card>\n            )}\n            \n            {chapters.map((chapter) => {\n              const progressData = progressMap.get(chapter.id);\n              const showBadge = isAuthenticated && progressData;\n              \n              return (\n                <Card\n                  key={chapter.id}\n                  className=\"cursor-pointer bg-white/80 dark:bg-card/80 backdrop-blur-sm rounded-2xl border-0 shadow-lg hover:shadow-xl transition-all duration-180 hover:-translate-y-1 overflow-hidden relative\"\n                  onClick={() => setLocation(`/chapter/${chapter.id}`)}\n                  data-testid={`card-chapter-${chapter.id}`}\n                >\n                  {showBadge && (\n                    <div className=\"absolute top-4 right-4 z-10\">\n                      {progressData.completed ? (\n                        <Badge \n                          variant=\"default\" \n                          className=\"bg-green-500 hover:bg-green-600 text-white border-0 shadow-md font-noto\"\n                          data-testid={`badge-completed-${chapter.id}`}\n                        >\n                          <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                          Completed\n                        </Badge>\n                      ) : progressData.inProgress ? (\n                        <Badge \n                          variant=\"default\" \n                          className=\"bg-[#f0425c] hover:bg-[#f0425c]/90 text-white border-0 shadow-md font-noto\"\n                          data-testid={`badge-resume-${chapter.id}`}\n                        >\n                          <PlayCircle className=\"w-3 h-3 mr-1\" />\n                          Resume\n                        </Badge>\n                      ) : null}\n                    </div>\n                  )}\n                  \n                  {chapter.coverImage ? (\n                    <div className=\"h-48 w-full overflow-hidden\">\n                      <img\n                        src={chapter.coverImage}\n                        alt={chapter.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"h-48 w-full bg-gradient-to-br from-kdrama-rose/20 via-kdrama-sakura/30 to-kdrama-lavender/20 flex items-center justify-center\">\n                      <Book className=\"w-16 h-16 text-[#f0425c]\" />\n                    </div>\n                  )}\n                  \n                  <CardHeader>\n                    <CardTitle className=\"font-myeongjo text-2xl text-kdrama-ink dark:text-foreground\">\n                      {chapter.title}\n                    </CardTitle>\n                    {chapter.description && (\n                      <CardDescription className=\"font-noto\">\n                        {chapter.description}\n                      </CardDescription>\n                    )}\n                  </CardHeader>\n                </Card>\n              );\n            })}\n          </div>\n\n          {chapters.length === 0 && (\n            <div className=\"text-center py-16\">\n              <Knot size=\"lg\" tone=\"muted\" className=\"mx-auto mb-4\" />\n              <p className=\"font-noto text-lg text-muted-foreground\">\n                No chapters yet. The journey awaits...\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10414},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"replit.md":{"content":"# K-Drama Journal\n\n## Overview\nA web application inspired by K-Drama aesthetics, featuring a \"Red String of Fate\" visual motif. It allows users to read formatted journal entries organized into chapters and sections with progress tracking and analytics. Admins can manage content and view activity logs. The application caters to two user roles: Readers, who consume content and track progress, and Admins, who create and manage content while accessing detailed analytics.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n**Framework**: React with TypeScript, using Vite.\n**Routing**: Wouter.\n**State Management**: TanStack Query for server state, React Context API for authentication, and React hooks for local component state.\n**UI Component System**: Radix UI primitives, custom component library built on shadcn/ui, Tailwind CSS with a K-Drama-themed palette, and custom fonts (Nanum Myeongjo, Noto Sans KR).\n**Key Design Patterns**: Component composition, separation of concerns, and custom hooks.\n\n### Backend Architecture\n**Framework**: Express.js with TypeScript on Node.js.\n**API Design**: RESTful API for authentication, user management, chapter/section/page CRUD, reading progress, and analytics.\n**Data Access Layer**: Storage abstraction using an `IStorage` interface.\n**Server-Side Rendering**: Vite middleware for development.\n\n### Data Storage\n**Database**: PostgreSQL via `pg` driver with Neon backend.\n**ORM**: Drizzle ORM for type-safe queries.\n**Schema Design**: `users`, `chapters`, `sections`, `pages`, `readingProgress`, `analyticsEvents`.\n**Migration Strategy**: Drizzle Kit.\n\n### Authentication & Authorization\n**Authentication**: Username/password with session storage in localStorage.\n**Authorization**: Role-based access control (RBAC) with `guest`, `reader`, and `admin` roles.\n**Session Management**: Client-side session persistence.\n\n### Key Architectural Decisions\n**Monorepo Structure**: Shared schema definitions between client and server via `@shared` path alias for type safety.\n**Session Strategy**: Client-side session management for simplicity.\n**Data Model Hierarchy**: Three-level content organization (Chapter → Section → Page) supporting optional Spotify music URLs.\n**Reading Analytics**: Page-level and section-level granularity with progress milestones.\n**Component Design**: Composition over inheritance, focused on K-Drama design guidelines.\n**Build Optimization**: Separate build processes for client (Vite) and server (esbuild).\n\n## External Dependencies\n\n**Database Service**: Neon PostgreSQL database via standard `pg` driver.\n**UI Libraries**: Radix UI, Embla Carousel, Lucide React, PhotoSwipe 5 (react-photoswipe-gallery), class-variance-authority, clsx.\n**Development Tools**: Replit-specific plugins (development banner, cartographer), runtime error overlay.\n**Build & Deployment**: esbuild (server), Vite (client).\n**Typography**: Google Fonts (Nanum Myeongjo, Noto Sans KR).\n\n## Recent Changes (October 25, 2025)\n\n### UI Standardization and Visual Consistency (October 25, 2025)\n- **Thumbnail Consistency**: All placeholder thumbnails now use the same rose/sakura/lavender gradient\n  - Gradient: `from-kdrama-rose/20 via-kdrama-sakura/30 to-kdrama-lavender/20`\n  - Icon color: `#f0425c` (vibrant red-pink)\n  - Icons: Book icon for chapters, BookOpen icon for sections, Heart for liked sections\n- **Heart Button Improvements**: Hearts always show outline, always visible, consistently red colored\n- **Badge Styling**: Liked Sections badge made transparent with no border\n- **PolaroidCard Refactoring**: Liked sections page now uses standardized PolaroidCard component\n- **Files Updated**: home.tsx, PolaroidCard.tsx, admin/SectionManagement.tsx, admin/ChapterManagement.tsx, liked-sections.tsx\n\n### Session Management Improvements (October 25, 2025)\n- **Session Validation**: Added `/api/auth/validate` endpoint to check if user exists in database\n- **Auto-validation on Startup**: AuthContext now validates stored sessions on app initialization\n- **Invalid Session Detection**: API routes now check for foreign key violations and invalid user IDs\n- **Automatic Redirect**: Invalid sessions automatically redirect to login page\n- **Improved Error Messages**: More user-friendly error messages for expired sessions\n- **Error Handling Enhancement**: All like/unlike operations now properly handle session expiry\n- **Database Constraint Fix**: Added unique constraint to prevent duplicate likes at database level\n\n## Earlier Changes (October 25, 2025)\n\n### Section Liking Feature (October 25, 2025)\n- **Like Button in Section Reader**: Heart icon button next to section titles allows users to like/unlike sections\n- **Sidebar Like Indicators**: Quick like/unlike buttons in section sidebar for all sections in a chapter\n- **Liked Sections Collection**: Special \"Liked Sections\" card on home page shows count of liked sections\n- **Liked Sections Page**: Dedicated page (`/liked-sections`) displays all liked sections grouped by chapters\n- **Database Schema**: Added `liked_sections` table to track user likes with timestamps\n- **API Endpoints**: \n  - POST `/api/sections/:id/like` - Like a section\n  - DELETE `/api/sections/:id/like` - Unlike a section  \n  - GET `/api/users/:id/liked-sections` - Get all liked sections for a user\n  - GET `/api/sections/:id/like-status` - Check if user has liked a section\n  - GET `/api/sections/:id/like-count` - Get total like count for a section\n- **Visual Feedback**: \n  - Filled heart icon for liked sections, empty for unliked\n  - Rose/pink color scheme matching K-Drama aesthetic\n  - Toast notifications on like/unlike actions\n  - Like count display next to heart button in reader\n- **User Experience**: \n  - Must be logged in to like sections\n  - Liked sections persist across sessions\n  - Quick access from home page when user has liked sections\n  - Responsive grid layout on liked sections page with thumbnails\n\n## Earlier Changes (October 24, 2025)\n\n### Instagram Gallery with \"One Full + More\" Display (October 24, 2025)\n- **New Design**: Show first Instagram post/reel fully embedded, with \"+X more\" indicator for additional content\n- **Smart Display**: Avoids thumbnail issues by showing actual Instagram embed immediately\n- **\"+X More\" Card**: Elegant indicator with Instagram gradient, plus icon, and content type breakdown\n- **Responsive Layout**: Side-by-side on desktop (embed + indicator), stacked on mobile\n- **Redesigned Navigation**: Navigation controls placed in a control bar below Instagram content\n  - Previous/Next buttons with text labels and disabled states\n  - Clickable page indicator dots for direct navigation to any item\n  - Type indicator (Reel/Post) and counter at top of dialog\n  - Clean separation from Instagram content with border\n- **Gallery Dialog**: Click \"+X more\" to open full gallery with all posts and reliable navigation\n- **Content Types**: Shows count of reels vs posts in the more indicator\n- **Test Content**: Added \"Behind the Scenes\" section with Instagram galleries to seed data\n- **Gallery syntax**: `[instagram-gallery:url1,url2,url3]` for multiple items\n- **Single Instagram**: Still uses `[embed:url]` format for backward compatibility\n\n### Minimal Instagram Embeds\n- Created custom InstagramEmbed component with cleaner, minimal UI\n- Removed visual clutter while keeping Instagram reels playback and post navigation\n- Added custom header with Instagram icon and \"Open\" button for external viewing\n- CSS minimizes borders, shadows, and padding while respecting Instagram's terms\n- Instagram embeds now match journal's K-Drama aesthetic with burgundy accents\n- Reels still play inline, multi-image posts retain swipe functionality\n- Max width constrained to 500px for better readability in journal format\n\n## Earlier Updates (October 24, 2025)\n\n### Mixed Media Galleries with PhotoSwipe 5\n- Unified media galleries supporting both images and videos in the same carousel\n- Videos marked with `video:` prefix in gallery embeds: `[gallery:url1,video:url2,url3]`\n- **Fixed aspect ratio preservation**: Images now maintain their natural dimensions when zooming\n  - Auto-detects actual image dimensions instead of using hardcoded values\n  - Uses `initialZoomLevel: 'fit'` to prevent stretching or distortion\n  - Disabled zoom toggle to prevent accidental stretching\n  - Images always display at correct aspect ratio in lightbox\n- Single video displays as inline player, multiple media items show as interactive grid\n- Video thumbnails in grid show play icon overlay, expand to video player in lightbox\n- MediaEmbedDialog handles both image (10MB) and video (50MB) uploads in one interface\n- Supported video formats: MP4, WebM, MOV, AVI, WMV, OGG\n- Gallery format unchanged: `[embed:url]` for single images, `[gallery:url1,url2,url3]` for mixed media\n- Gallery layout: Responsive grid (2-column for 2 items, 3-column for 3+ items)\n- Mobile-optimized with touch gestures, pinch-to-zoom, swipe navigation for all media types\n\n### Tiptap WYSIWYG Editor\n- Replaced React-Quill with Tiptap for better customization and no font override issues\n- Modern headless editor built on ProseMirror with full control over UI and behavior\n- Full toolbar: undo, redo, bold, italic, underline, strikethrough, font family, font size, text color, highlight color, subscript, superscript, ordered/unordered lists, text alignment (left, center, right, justify), links, images\n- Custom K-Drama fonts in dropdown (8 total with English labels):\n  - Korean fonts: Nanum Myeongjo (default), Noto Sans KR, Nanum Pen Script, Nanum Brush Script, Gaegu\n  - Standard fonts: Serif, Sans-serif, Monospace\n- Font size options: Small (12px), Normal (16px), Large (20px), Huge (24px)\n- Text color picker: Native HTML color picker (eyedropper) + 20 predefined color swatches, auto-closes after swatch selection\n- Highlight color picker: Native HTML color picker (eyedropper) + 15 predefined colors (yellow/red/green/blue/purple shades), auto-closes after swatch selection\n- Custom FontSize extension: Injects fontSize attribute onto TextStyle mark with proper HTML serialization\n- K-Drama themed styling matching burgundy/cream color scheme with dark mode support\n- Image upload integration with existing `/api/upload/image` endpoint\n- MediaToolbar preserved for video and Spotify embeds alongside rich text features\n- HTML output for clean, accessible content (page content) or plain text (title/mood/tags in single-line mode)\n- Content synchronization: Editor syncs when value prop changes (page navigation, edit mode toggle)\n- No duplicate extension conflicts (StarterKit link disabled, custom Link extension used)\n- Undo/Redo buttons: Located at the start of toolbar, disabled when history stack is empty\n- Single-line mode: For title, mood, and tags fields, prevents Enter key and emits plain text instead of HTML\n- Section titles, mood, and tags now use TiptapEditor with full formatting capabilities (bold, colors, fonts, etc.)\n- Mood field updated from single string to array (like tags) supporting comma-separated values with rich formatting","size_bytes":11136},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/examples/ThreadBar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ThreadBar } from \"../ThreadBar\";\n\nexport default function ThreadBarExample() {\n  const [progress, setProgress] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!paused) {\n        setProgress((prev) => (prev >= 1 ? 0 : prev + 0.01));\n      }\n    }, 100);\n    return () => clearInterval(interval);\n  }, [paused]);\n\n  return (\n    <div className=\"p-8 bg-kdrama-cream/30 min-h-[200px]\">\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <h3 className=\"font-myeongjo text-2xl text-kdrama-ink\">Thread Progress</h3>\n        <ThreadBar\n          progress={progress}\n          paused={paused}\n          showLabels={true}\n          onMilestone={(m) => console.log(`Milestone reached: ${m * 100}%`)}\n        />\n        <button\n          onClick={() => setPaused(!paused)}\n          className=\"px-4 py-2 bg-kdrama-thread text-white rounded-2xl hover-elevate active-elevate-2\"\n          data-testid=\"button-toggle-pause\"\n        >\n          {paused ? \"Resume\" : \"Pause\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1156},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"design_guidelines.md":{"content":"# K-Drama Journal Design Guidelines\n\n## Design Philosophy\nA colorful, bubbly journal experience inspired by K-Drama aesthetics with the signature **Red String of Fate** motif visually connecting chapters, pages, and reader journeys.\n\n## Color Palette\n\n### Primary Colors\n- **Sakura Pink**: #FFB7C5 (romantic, soft accent)\n- **Lavender**: #B8A2FF (dreamy, secondary accent)\n- **Sky Blue**: #CDE7F0 (calming backgrounds)\n- **Cream**: #FFF7DA (warm content backgrounds)\n- **Ink**: #2D2A32 (primary text)\n\n### Red String System\n- **Thread Red**: #D7263D (signature connecting element)\n- **Knot Shadow Dark**: #A40E2D (depth)\n- **Knot Shadow Light**: #F25F5C (highlights)\n\n## Typography\n\n### Font Families\n- **Headings/Titles**: Nanum Myeongjo (Korean serif, elegant)\n- **Body Text**: Noto Sans KR (Korean sans-serif, readable)\n\n### Scale & Hierarchy\n- Page titles: Large, Nanum Myeongjo, with emoji support\n- Chapter headings: Medium-large, Nanum Myeongjo\n- Body content: Comfortable reading size, Noto Sans KR\n- Labels/UI: Small, Noto Sans KR\n\n## Layout System\n\n### Spacing\nUse Tailwind spacing units: 2, 4, 6, 8, 12, 16, 24 for consistent rhythm\n\n### Corners & Depth\n- Border radius: `rounded-2xl` for cards, containers, and media embeds\n- Shadows: Soft, diffused (blur: 24px, spread: 0, opacity: 12-16%)\n- Layering: Thread elements beneath content, knots float above\n\n### Content Structure\n- Clean margins with generous whitespace\n- Content max-width for optimal reading (prose-lg equivalent)\n- Responsive polaroid-style cards for suggestions\n\n## Red String of Fate Motif\n\n### ThreadBar Component\n- Thin red line (#D7263D) running horizontally at page top\n- Progress indicator fills left-to-right as user scrolls\n- **Knots** (small hearts) appear at 25%, 50%, 75%, 100% milestones\n- **Active state**: Taut, full opacity thread\n- **Paused state**: Slight sag, reduced opacity (60-70%)\n- Smooth transitions (120-180ms ease-in-out)\n\n### Visual Thread Elements\n- Sidebar: Thin vertical red thread with decorative knots\n- Page headers: Thread weaves through title area\n- Chapter breaks: Knot nodes marking transitions\n- FateLinks: Curved threads connecting current page to suggestions\n\n### Knot Styling\n- Heart-shaped nodes in red (#D7263D)\n- Subtle pulse animation on hover (scale 1.05, 180ms)\n- Shadow depth using knot shadow colors\n- Sizes: sm (12px), md (16px), lg (24px)\n\n## Component Styling\n\n### Cards & Containers\n- Polaroid aesthetic: white/cream background, slight rotation (-2° to 2°)\n- Pinned appearance with small thread loop at top\n- Gentle sway on hover (1-2° rotation, 180ms)\n- Rounded corners (rounded-2xl)\n- Soft shadow for depth\n\n### Embeds (Instagram/Spotify)\n- Responsive wrapper maintaining aspect ratio\n- Rounded corners matching theme\n- Subtle border or shadow\n- Loading states with skeleton screens in theme colors\n\n### Buttons & Interactive Elements\n- Primary: Sakura pink fill with white text\n- Secondary: Outline style with lavender border\n- Hover states: Slight scale (1.02) and deeper shadow\n- Focus: High-contrast outline for accessibility\n\n### Editor Tools (Admin Only)\n- Floating toolbar with cream background\n- Pill-shaped buttons with icons\n- Slash menu with K-drama themed icons\n- Drag handles styled as small thread loops\n\n## Iconography & Decorative Elements\n- **Icons**: Hearts, umbrellas, polaroids, flower petals\n- Use sparingly for visual interest without clutter\n- Integrate thread motif into navigation and dividers\n- Chapter emojis displayed prominently\n\n## Motion & Animation\n\n### Principles\n- Timing: 120-180ms for micro-interactions\n- Easing: ease-in-out for natural feel\n- **Respect `prefers-reduced-motion`**: Replace animations with simple fades or static states\n\n### Key Animations\n- Thread progress: Smooth width transition\n- Knot milestones: Subtle pop-in (scale from 0 to 1)\n- Polaroid sway: Gentle rotation on hover\n- Page transitions: Soft fade (no dramatic movements)\n- Heartbeat pulse: Subtle scale for active tracking indicator\n\n## Reading Experience\n\n### Content Presentation\n- Comfortable line height (1.7-1.8)\n- Optimal line length (65-75 characters)\n- Clear paragraph spacing\n- Thread markers at 25/50/75/100% invisible to readers\n\n### FateLinks Section\n- 1-3 polaroid cards showing suggested pages\n- Red thread curves connecting current page to each\n- Card includes: cover image, title, mood tag, brief description\n- Hover reveals full description tooltip\n\n## Admin Dashboard Aesthetics\n- **Timeline view**: Horizontal thread with knots representing page views\n- **Journey map**: Circular chapter layout with thread tracing reading path\n- **KPI cards**: Soft backgrounds (sky/lavender/cream) with ink text\n- Data visualizations use theme color palette\n\n## Accessibility Requirements\n- Color contrast: Ensure WCAG AA minimum (4.5:1 for text)\n- Focus indicators: High-contrast outlines on all interactive elements\n- Thread/knot elements have appropriate ARIA labels\n- Keyboard navigation for all functionality\n- Screen reader friendly milestone announcements\n\n## Images\n- **Hero Section**: Not applicable - this is a journal/reading interface, not a marketing site\n- **Page Covers**: Optional cover images for individual pages (landscape, 16:9 recommended)\n- **Polaroid Cards**: Thumbnail images for page suggestions (square or portrait, 4:5)\n- **Background Patterns**: Subtle, theme-colored decorative elements (petals, threads) at very low opacity (5-8%)","size_bytes":5416},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 80,\n  min: 0\n});\n\nexport const db = drizzle(pool, { schema });\n","size_bytes":404},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Chapter,\n  type InsertChapter,\n  type Section,\n  type InsertSection,\n  type Page,\n  type InsertPage,\n  type ReadingProgress,\n  type InsertReadingProgress,\n  type AnalyticsEvent,\n  type InsertAnalyticsEvent,\n  type LikedSection,\n  type InsertLikedSection,\n  users,\n  chapters,\n  sections,\n  pages,\n  readingProgress,\n  analyticsEvents,\n  likedSections,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, isNull, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Chapter methods\n  getChapters(): Promise<Chapter[]>;\n  getChapter(id: string): Promise<Chapter | undefined>;\n  createChapter(chapter: InsertChapter): Promise<Chapter>;\n  updateChapter(id: string, chapter: Partial<InsertChapter>): Promise<Chapter | undefined>;\n  deleteChapter(id: string): Promise<void>;\n  \n  // Section methods\n  getAllSections(): Promise<Section[]>;\n  getSectionsByChapter(chapterId: string): Promise<Section[]>;\n  getSection(id: string): Promise<Section | undefined>;\n  createSection(section: InsertSection): Promise<Section>;\n  updateSection(id: string, section: Partial<InsertSection>): Promise<Section | undefined>;\n  deleteSection(id: string): Promise<void>;\n  reorderSections(sectionOrders: { id: string; order: number }[]): Promise<void>;\n  \n  // Page methods\n  getAllPages(): Promise<Page[]>;\n  getPagesBySection(sectionId: string): Promise<Page[]>;\n  getPage(id: string): Promise<Page | undefined>;\n  createPage(page: InsertPage): Promise<Page>;\n  updatePage(id: string, page: Partial<InsertPage>): Promise<Page | undefined>;\n  deletePage(id: string): Promise<void>;\n  \n  // Reading progress methods\n  getReadingProgress(userId: string, sectionId: string): Promise<ReadingProgress | undefined>;\n  getUserReadingProgress(userId: string): Promise<ReadingProgress[]>;\n  upsertReadingProgress(progress: InsertReadingProgress): Promise<ReadingProgress>;\n  getLastReadSection(userId: string): Promise<ReadingProgress | undefined>;\n  getChapterProgress(userId: string, chapterId: string): Promise<{ completed: boolean; inProgress: boolean; totalSections: number; completedSections: number }>;\n  \n  // Analytics methods\n  createAnalyticsEvent(event: InsertAnalyticsEvent): Promise<AnalyticsEvent>;\n  getAnalyticsByUser(userId: string): Promise<AnalyticsEvent[]>;\n  getAnalyticsByPage(pageId: string): Promise<AnalyticsEvent[]>;\n  getAnalyticsBySection(sectionId: string): Promise<AnalyticsEvent[]>;\n  getAnalyticsByChapter(chapterId: string): Promise<AnalyticsEvent[]>;\n  getAllAnalytics(): Promise<AnalyticsEvent[]>;\n  getAnalyticsSummary(): Promise<any>;\n  getAnalyticsDashboard(): Promise<any>;\n  \n  // Liked sections methods\n  likeSection(userId: string, sectionId: string): Promise<LikedSection>;\n  unlikeSection(userId: string, sectionId: string): Promise<void>;\n  getLikedSectionsByUser(userId: string): Promise<Section[]>;\n  isLikedByUser(userId: string, sectionId: string): Promise<boolean>;\n  getLikedSectionsCount(sectionId: string): Promise<number>;\n}\n\nexport class DBStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUsers(): Promise<User[]> {\n    return db.select().from(users);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Chapter methods\n  async getChapters(): Promise<Chapter[]> {\n    return db.select().from(chapters).orderBy(chapters.order);\n  }\n\n  async getChapter(id: string): Promise<Chapter | undefined> {\n    const result = await db.select().from(chapters).where(eq(chapters.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createChapter(chapter: InsertChapter): Promise<Chapter> {\n    const result = await db.insert(chapters).values(chapter).returning();\n    return result[0];\n  }\n\n  async updateChapter(id: string, chapter: Partial<InsertChapter>): Promise<Chapter | undefined> {\n    const result = await db.update(chapters).set(chapter).where(eq(chapters.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteChapter(id: string): Promise<void> {\n    await db.delete(chapters).where(eq(chapters.id, id));\n  }\n\n  // Section methods\n  async getAllSections(): Promise<Section[]> {\n    return db.select().from(sections).orderBy(sections.chapterId, sections.order);\n  }\n\n  async getSectionsByChapter(chapterId: string): Promise<Section[]> {\n    return db.select().from(sections).where(eq(sections.chapterId, chapterId)).orderBy(sections.order);\n  }\n\n  async getSection(id: string): Promise<Section | undefined> {\n    const result = await db.select().from(sections).where(eq(sections.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createSection(section: InsertSection): Promise<Section> {\n    const result = await db.insert(sections).values(section).returning();\n    return result[0];\n  }\n\n  async updateSection(id: string, section: Partial<InsertSection>): Promise<Section | undefined> {\n    const result = await db.update(sections).set(section).where(eq(sections.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteSection(id: string): Promise<void> {\n    await db.delete(sections).where(eq(sections.id, id));\n  }\n\n  async reorderSections(sectionOrders: { id: string; order: number }[]): Promise<void> {\n    // Update each section's order in a transaction\n    for (const { id, order } of sectionOrders) {\n      await db.update(sections).set({ order }).where(eq(sections.id, id));\n    }\n  }\n\n  // Page methods\n  async getAllPages(): Promise<Page[]> {\n    return db.select().from(pages).orderBy(pages.sectionId, pages.pageNumber);\n  }\n\n  async getPagesBySection(sectionId: string): Promise<Page[]> {\n    return db.select().from(pages).where(eq(pages.sectionId, sectionId)).orderBy(pages.pageNumber);\n  }\n\n  async getPage(id: string): Promise<Page | undefined> {\n    const result = await db.select().from(pages).where(eq(pages.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPage(page: InsertPage): Promise<Page> {\n    const result = await db.insert(pages).values(page).returning();\n    return result[0];\n  }\n\n  async updatePage(id: string, page: Partial<InsertPage>): Promise<Page | undefined> {\n    const result = await db.update(pages).set(page).where(eq(pages.id, id)).returning();\n    return result[0];\n  }\n\n  async deletePage(id: string): Promise<void> {\n    await db.delete(pages).where(eq(pages.id, id));\n  }\n\n  // Reading progress methods\n  async getReadingProgress(userId: string, sectionId: string): Promise<ReadingProgress | undefined> {\n    const result = await db.select()\n      .from(readingProgress)\n      .where(and(eq(readingProgress.userId, userId), eq(readingProgress.sectionId, sectionId)))\n      .limit(1);\n    return result[0];\n  }\n\n  async getUserReadingProgress(userId: string): Promise<ReadingProgress[]> {\n    return db.select().from(readingProgress).where(eq(readingProgress.userId, userId)).orderBy(desc(readingProgress.lastReadAt));\n  }\n\n  async upsertReadingProgress(progress: InsertReadingProgress): Promise<ReadingProgress> {\n    const existing = await this.getReadingProgress(progress.userId, progress.sectionId);\n    \n    if (existing) {\n      const result = await db\n        .update(readingProgress)\n        .set({ ...progress, lastReadAt: new Date() })\n        .where(eq(readingProgress.id, existing.id))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(readingProgress).values(progress).returning();\n      return result[0];\n    }\n  }\n\n  async getLastReadSection(userId: string): Promise<ReadingProgress | undefined> {\n    const result = await db\n      .select()\n      .from(readingProgress)\n      .where(eq(readingProgress.userId, userId))\n      .orderBy(desc(readingProgress.lastReadAt))\n      .limit(1);\n    return result[0];\n  }\n\n  async getChapterProgress(userId: string, chapterId: string): Promise<{ completed: boolean; inProgress: boolean; totalSections: number; completedSections: number }> {\n    // Get all sections for this chapter\n    const chapterSections = await this.getSectionsByChapter(chapterId);\n    const totalSections = chapterSections.length;\n    \n    if (totalSections === 0) {\n      return { completed: false, inProgress: false, totalSections: 0, completedSections: 0 };\n    }\n    \n    // Get all reading progress for this user in this chapter\n    const sectionIds = chapterSections.map(s => s.id);\n    const progressRecords = await db\n      .select()\n      .from(readingProgress)\n      .where(\n        and(\n          eq(readingProgress.userId, userId),\n          sql`${readingProgress.sectionId} IN ${sectionIds}`\n        )\n      );\n    \n    const completedSections = progressRecords.filter(p => p.completed).length;\n    const inProgressSections = progressRecords.filter(p => !p.completed).length;\n    \n    return {\n      completed: completedSections === totalSections && totalSections > 0,\n      inProgress: inProgressSections > 0 || (completedSections > 0 && completedSections < totalSections),\n      totalSections,\n      completedSections\n    };\n  }\n\n  // Analytics methods\n  async createAnalyticsEvent(event: InsertAnalyticsEvent): Promise<AnalyticsEvent> {\n    const result = await db.insert(analyticsEvents).values(event).returning();\n    return result[0];\n  }\n\n  async getAnalyticsByUser(userId: string): Promise<AnalyticsEvent[]> {\n    return db.select().from(analyticsEvents).where(eq(analyticsEvents.userId, userId)).orderBy(desc(analyticsEvents.timestamp));\n  }\n\n  async getAnalyticsByPage(pageId: string): Promise<AnalyticsEvent[]> {\n    return db.select().from(analyticsEvents).where(eq(analyticsEvents.pageId, pageId)).orderBy(desc(analyticsEvents.timestamp));\n  }\n\n  async getAnalyticsBySection(sectionId: string): Promise<AnalyticsEvent[]> {\n    return db.select().from(analyticsEvents).where(eq(analyticsEvents.sectionId, sectionId)).orderBy(desc(analyticsEvents.timestamp));\n  }\n\n  async getAnalyticsByChapter(chapterId: string): Promise<AnalyticsEvent[]> {\n    return db.select().from(analyticsEvents).where(eq(analyticsEvents.chapterId, chapterId)).orderBy(desc(analyticsEvents.timestamp));\n  }\n\n  async getAllAnalytics(): Promise<AnalyticsEvent[]> {\n    return db.select().from(analyticsEvents).orderBy(desc(analyticsEvents.timestamp));\n  }\n\n  async getActivityLog(filters?: {\n    userId?: string;\n    chapterId?: string;\n    sectionId?: string;\n    eventType?: string;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<any[]> {\n    let query = sql`\n      SELECT \n        ae.id,\n        ae.timestamp,\n        ae.event_type,\n        ae.duration,\n        u.username,\n        c.title as chapter_title,\n        s.title as section_title,\n        p.page_number\n      FROM analytics_events ae\n      LEFT JOIN users u ON ae.user_id = u.id\n      LEFT JOIN chapters c ON ae.chapter_id = c.id\n      LEFT JOIN sections s ON ae.section_id = s.id\n      LEFT JOIN pages p ON ae.page_id = p.id\n      WHERE 1=1\n    `;\n\n    if (filters?.userId) {\n      query = sql`${query} AND ae.user_id = ${filters.userId}`;\n    }\n    if (filters?.chapterId) {\n      query = sql`${query} AND ae.chapter_id = ${filters.chapterId}`;\n    }\n    if (filters?.sectionId) {\n      query = sql`${query} AND ae.section_id = ${filters.sectionId}`;\n    }\n    if (filters?.eventType) {\n      query = sql`${query} AND ae.event_type = ${filters.eventType}`;\n    }\n    if (filters?.startDate) {\n      query = sql`${query} AND ae.timestamp >= ${filters.startDate}::timestamp`;\n    }\n    if (filters?.endDate) {\n      query = sql`${query} AND ae.timestamp <= ${filters.endDate}::timestamp`;\n    }\n\n    query = sql`${query} ORDER BY ae.timestamp DESC LIMIT 1000`;\n\n    const result = await db.execute(query);\n    return result.rows;\n  }\n\n  async getAnalyticsSummary(): Promise<any> {\n    const result = await db.execute(sql`\n      SELECT \n        ae.page_id,\n        ae.section_id,\n        ae.chapter_id,\n        p.page_number,\n        s.title as section_title,\n        c.title as chapter_title,\n        COUNT(DISTINCT ae.user_id) as unique_viewers,\n        COUNT(*) as total_views,\n        AVG(ae.duration) as avg_duration,\n        MAX(ae.timestamp) as last_accessed\n      FROM analytics_events ae\n      JOIN pages p ON ae.page_id = p.id\n      JOIN sections s ON ae.section_id = s.id\n      JOIN chapters c ON ae.chapter_id = c.id\n      GROUP BY ae.page_id, ae.section_id, ae.chapter_id, p.page_number, s.title, c.title\n      ORDER BY total_views DESC\n    `);\n    return result.rows;\n  }\n\n  async getAnalyticsDashboard(): Promise<any> {\n    // Get overview counts\n    const allChapters = await this.getChapters();\n    const allSections = await this.getAllSections();\n    const allPages = await this.getAllPages();\n    const totalReaders = await db.execute(sql`SELECT COUNT(DISTINCT id) as count FROM users WHERE role IN ('reader', 'admin')`);\n    const readerCount = Number(totalReaders.rows[0]?.count || 0);\n\n    // Get chapter completion rates\n    const chapterCompletionData = await Promise.all(\n      allChapters.map(async (chapter) => {\n        const chapterSections = await this.getSectionsByChapter(chapter.id);\n        const totalSections = chapterSections.length;\n        \n        if (totalSections === 0) {\n          return {\n            chapterId: chapter.id,\n            chapterTitle: chapter.title,\n            totalSections: 0,\n            completedCount: 0,\n            completionRate: 0,\n          };\n        }\n\n        // Count how many users completed all sections in this chapter\n        const completionResult = await db.execute(sql`\n          SELECT COUNT(DISTINCT user_id) as completed_users\n          FROM reading_progress\n          WHERE section_id IN (${sql.join(chapterSections.map(s => sql`${s.id}`), sql`, `)})\n            AND completed = true\n          GROUP BY user_id\n          HAVING COUNT(DISTINCT section_id) = ${totalSections}\n        `);\n        \n        const completedCount = completionResult.rows.length;\n        const completionRate = readerCount > 0 ? (completedCount / readerCount) * 100 : 0;\n\n        return {\n          chapterId: chapter.id,\n          chapterTitle: chapter.title,\n          totalSections,\n          completedCount,\n          completionRate,\n        };\n      })\n    );\n\n    // Get section views with chapter info\n    const sectionViewsResult = await db.execute(sql`\n      SELECT \n        s.id as section_id,\n        s.title as section_title,\n        c.title as chapter_title,\n        COUNT(*) as view_count,\n        AVG(ae.duration) as avg_duration\n      FROM sections s\n      LEFT JOIN chapters c ON s.chapter_id = c.id\n      LEFT JOIN analytics_events ae ON ae.section_id = s.id\n      GROUP BY s.id, s.title, c.title\n      ORDER BY view_count DESC\n    `);\n\n    const sectionViews = sectionViewsResult.rows.map((row: any) => ({\n      sectionId: row.section_id,\n      sectionTitle: row.section_title,\n      chapterTitle: row.chapter_title,\n      viewCount: Number(row.view_count || 0),\n      avgDuration: Number(row.avg_duration || 0),\n    }));\n\n    // Get activity timeline (last 30 days)\n    const activityTimelineResult = await db.execute(sql`\n      SELECT \n        DATE(timestamp) as date,\n        COUNT(*) as view_count,\n        COUNT(DISTINCT user_id) as unique_readers\n      FROM analytics_events\n      WHERE timestamp >= NOW() - INTERVAL '30 days'\n      GROUP BY DATE(timestamp)\n      ORDER BY DATE(timestamp) ASC\n    `);\n\n    const activityTimeline = activityTimelineResult.rows.map((row: any) => ({\n      date: row.date,\n      viewCount: Number(row.view_count || 0),\n      uniqueReaders: Number(row.unique_readers || 0),\n    }));\n\n    return {\n      overview: {\n        totalChapters: allChapters.length,\n        totalSections: allSections.length,\n        totalPages: allPages.length,\n        totalReaders: readerCount,\n      },\n      chapterCompletion: chapterCompletionData,\n      sectionViews,\n      activityTimeline,\n    };\n  }\n\n  // Liked sections methods\n  async likeSection(userId: string, sectionId: string): Promise<LikedSection> {\n    // Use INSERT ... ON CONFLICT DO NOTHING to handle race conditions and duplicates\n    try {\n      const result = await db.insert(likedSections)\n        .values({ userId, sectionId })\n        .onConflictDoNothing()\n        .returning();\n      \n      // If the insert didn't happen due to conflict (already liked), fetch the existing record\n      if (result.length === 0) {\n        const existing = await db.select()\n          .from(likedSections)\n          .where(and(eq(likedSections.userId, userId), eq(likedSections.sectionId, sectionId)))\n          .limit(1);\n        \n        if (existing.length > 0) {\n          return existing[0];\n        }\n        // This shouldn't happen, but handle it gracefully\n        throw new Error(\"Failed to create or retrieve like record\");\n      }\n      \n      return result[0];\n    } catch (error) {\n      // Handle any database errors\n      console.error(\"Error in likeSection:\", error);\n      throw error;\n    }\n  }\n\n  async unlikeSection(userId: string, sectionId: string): Promise<void> {\n    await db.delete(likedSections)\n      .where(and(eq(likedSections.userId, userId), eq(likedSections.sectionId, sectionId)));\n  }\n\n  async getLikedSectionsByUser(userId: string): Promise<Section[]> {\n    const result = await db.select()\n      .from(likedSections)\n      .innerJoin(sections, eq(likedSections.sectionId, sections.id))\n      .where(eq(likedSections.userId, userId))\n      .orderBy(desc(likedSections.likedAt));\n    \n    return result.map(row => row.sections);\n  }\n\n  async isLikedByUser(userId: string, sectionId: string): Promise<boolean> {\n    const result = await db.select()\n      .from(likedSections)\n      .where(and(eq(likedSections.userId, userId), eq(likedSections.sectionId, sectionId)))\n      .limit(1);\n    \n    return result.length > 0;\n  }\n\n  async getLikedSectionsCount(sectionId: string): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` })\n      .from(likedSections)\n      .where(eq(likedSections.sectionId, sectionId));\n    \n    return Number(result[0]?.count || 0);\n  }\n}\n\nexport const storage = new DBStorage();\n","size_bytes":18625},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n        \"2xl\": \"1rem\", /* 16px for K-Drama cards */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        kdrama: {\n          sakura: \"#FFB7C5\",\n          lavender: \"#B8A2FF\",\n          sky: \"#CDE7F0\",\n          cream: \"#FFF7DA\",\n          ink: \"#2D2A32\",\n          thread: \"#D7263D\",\n          \"knot-dark\": \"#A40E2D\",\n          \"knot-light\": \"#F25F5C\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        myeongjo: [\"Nanum Myeongjo\", \"serif\"],\n        noto: [\"Noto Sans KR\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"pulse-gentle\": {\n          \"0%, 100%\": { transform: \"scale(1)\", opacity: \"1\" },\n          \"50%\": { transform: \"scale(1.05)\", opacity: \"0.9\" },\n        },\n        \"sway\": {\n          \"0%, 100%\": { transform: \"rotate(-1deg)\" },\n          \"50%\": { transform: \"rotate(1deg)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-gentle\": \"pulse-gentle 2s ease-in-out infinite\",\n        \"sway\": \"sway 3s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4868},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\n// Serve uploaded files from public/uploads directory\napp.use('/uploads', express.static('public/uploads'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2320},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode, useRef, useCallback } from \"react\";\n\nexport type UserRole = \"admin\" | \"reader\";\n\ninterface AuthUser {\n  id: string;\n  username: string;\n  role: UserRole;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isAdmin: boolean;\n  isAuthenticated: boolean;\n  validateSession: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes in milliseconds\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [isValidating, setIsValidating] = useState(true);\n  const inactivityTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const logout = useCallback(() => {\n    if (inactivityTimerRef.current) {\n      clearTimeout(inactivityTimerRef.current);\n      inactivityTimerRef.current = null;\n    }\n    setUser(null);\n    localStorage.removeItem(\"kdrama-journal-user\");\n  }, []);\n\n  const validateSession = useCallback(async () => {\n    const storedUser = localStorage.getItem(\"kdrama-journal-user\");\n    if (!storedUser) {\n      setIsValidating(false);\n      return;\n    }\n\n    try {\n      const parsedUser = JSON.parse(storedUser);\n      const response = await fetch(\"/api/auth/validate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId: parsedUser.id }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.valid) {\n          setUser(data.user);\n        } else {\n          logout();\n        }\n      } else {\n        const errorData = await response.json();\n        if (errorData.invalidSession) {\n          logout();\n        }\n      }\n    } catch (e) {\n      console.error(\"Session validation error:\", e);\n      logout();\n    } finally {\n      setIsValidating(false);\n    }\n  }, [logout]);\n\n  useEffect(() => {\n    validateSession();\n  }, []);\n\n  const resetInactivityTimer = useCallback(() => {\n    if (!user) return;\n\n    if (inactivityTimerRef.current) {\n      clearTimeout(inactivityTimerRef.current);\n    }\n\n    inactivityTimerRef.current = setTimeout(() => {\n      logout();\n    }, INACTIVITY_TIMEOUT);\n  }, [user, logout]);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n\n    const handleActivity = () => {\n      resetInactivityTimer();\n    };\n\n    resetInactivityTimer();\n\n    activityEvents.forEach(event => {\n      document.addEventListener(event, handleActivity, { passive: true });\n    });\n\n    return () => {\n      activityEvents.forEach(event => {\n        document.removeEventListener(event, handleActivity);\n      });\n      if (inactivityTimerRef.current) {\n        clearTimeout(inactivityTimerRef.current);\n      }\n    };\n  }, [user, resetInactivityTimer]);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        const authUser = await response.json();\n        setUser(authUser);\n        localStorage.setItem(\"kdrama-journal-user\", JSON.stringify(authUser));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return false;\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        login,\n        logout,\n        isAdmin: user?.role === \"admin\",\n        isAuthenticated: Boolean(user),\n        validateSession,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":4112},"client/src/components/ReadingContent.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Calendar, Clock } from \"lucide-react\";\nimport { Knot } from \"./Knot\";\n\ninterface ReadingContentProps {\n  title: string;\n  content: string;\n  mood?: string;\n  tags?: string[];\n  editedAt?: Date;\n  coverUrl?: string;\n  showMilestones?: boolean;\n}\n\nexport function ReadingContent({\n  title,\n  content,\n  mood,\n  tags = [],\n  editedAt,\n  coverUrl,\n  showMilestones = true,\n}: ReadingContentProps) {\n  const paragraphs = content.split(\"\\n\\n\").filter((p) => p.trim());\n\n  return (\n    <div className=\"max-w-3xl mx-auto\">\n      <div className=\"mb-8\">\n        {coverUrl && (\n          <div className=\"relative mb-6 rounded-2xl overflow-hidden shadow-lg\">\n            <img src={coverUrl} alt={title} className=\"w-full h-64 object-cover\" />\n            <div className=\"absolute top-4 left-4\">\n              <Knot size=\"lg\" tone=\"primary\" />\n            </div>\n          </div>\n        )}\n        \n        <h1 className=\"font-myeongjo text-4xl md:text-5xl font-bold text-kdrama-ink dark:text-foreground mb-4\">\n          {title}\n        </h1>\n\n        <div className=\"flex flex-wrap items-center gap-3 mb-6\">\n          {mood && (\n            <Badge variant=\"secondary\" className=\"font-noto\">\n              {mood}\n            </Badge>\n          )}\n          {tags.map((tag) => (\n            <Badge key={tag} variant=\"outline\" className=\"font-noto\">\n              #{tag}\n            </Badge>\n          ))}\n        </div>\n\n        {editedAt && (\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground font-noto\">\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>{editedAt.toLocaleDateString()}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"w-4 h-4\" />\n              <span>{editedAt.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <Card className=\"p-8 md:p-12 bg-white/80 dark:bg-card/80 backdrop-blur-sm border-0 shadow-md\">\n        <div className=\"prose prose-lg max-w-none font-noto\">\n          {paragraphs.map((paragraph, index) => (\n            <div key={index} className=\"relative\">\n              {showMilestones && index === Math.floor(paragraphs.length * 0.25) && (\n                <div\n                  className=\"absolute -left-8 top-0\"\n                  data-milestone=\"25\"\n                  aria-label=\"25% reading progress marker\"\n                >\n                  <Knot size=\"sm\" tone=\"muted\" />\n                </div>\n              )}\n              {showMilestones && index === Math.floor(paragraphs.length * 0.5) && (\n                <div\n                  className=\"absolute -left-8 top-0\"\n                  data-milestone=\"50\"\n                  aria-label=\"50% reading progress marker\"\n                >\n                  <Knot size=\"sm\" tone=\"muted\" />\n                </div>\n              )}\n              {showMilestones && index === Math.floor(paragraphs.length * 0.75) && (\n                <div\n                  className=\"absolute -left-8 top-0\"\n                  data-milestone=\"75\"\n                  aria-label=\"75% reading progress marker\"\n                >\n                  <Knot size=\"sm\" tone=\"muted\" />\n                </div>\n              )}\n              <p className=\"mb-6 leading-relaxed text-kdrama-ink dark:text-foreground\">\n                {paragraph}\n              </p>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3633},"README.md":{"content":"# K-Drama Journal\n\nA colorful, journal-style web application inspired by K-Drama aesthetics, featuring the \"Red String of Fate\" visual motif. The application enables users to read beautifully formatted journal entries organized into chapters and sections, with reading progress tracking and analytics.\n\n## Features\n\n- 📖 **Beautiful Reading Experience**: Elegantly designed journal entries with K-Drama inspired aesthetics\n- 🎨 **Custom Theming**: Unique color palette featuring sakura pink, lavender, and traditional Korean design elements\n- 📊 **Progress Tracking**: Track your reading progress across chapters and sections\n- 🔐 **Authentication System**: Secure login with role-based access (Admin, Reader)\n- 🖼️ **Embedded Media**: Support for embedded images and Instagram content within journal pages\n- 📱 **Responsive Design**: Works beautifully on desktop and mobile devices\n- 👨‍💼 **Admin Tools**: Content management with inline editing capabilities for admin users\n\n## Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for fast development and building\n- **Wouter** for lightweight routing\n- **TanStack Query** for server state management\n- **Radix UI** for accessible component primitives\n- **Tailwind CSS** for styling\n- **Shadcn/ui** component library\n\n### Backend\n- **Node.js** with TypeScript\n- **Express.js** for API server\n- **PostgreSQL** database (Neon serverless)\n- **Drizzle ORM** for type-safe database queries\n- **Passport.js** for authentication\n\n## Prerequisites\n\nBefore you begin, ensure you have the following installed:\n- **Node.js** (version 20 or higher)\n- **npm** (comes with Node.js)\n- **PostgreSQL** database (or access to a Neon database)\n\n## Getting Started\n\n### 1. Clone the Repository\n\n```bash\ngit clone <your-repo-url>\ncd kdrama-journal\n```\n\n### 2. Install Dependencies\n\n```bash\nnpm install\n```\n\nThis will install all required packages for both the frontend and backend.\n\n### 3. Set Up Environment Variables\n\nCreate a `.env` file in the root directory (if not already present) and add your database connection string:\n\n```env\nDATABASE_URL=postgresql://user:password@host:port/database\n```\n\n**For Replit Users:**\nIf you're running this on Replit, the database is automatically provisioned and the `DATABASE_URL` environment variable is already set. You can skip this step.\n\n### 4. Initialize the Database\n\nPush the database schema to your PostgreSQL database:\n\n```bash\nnpm run db:push\n```\n\nThis command uses Drizzle Kit to create all necessary tables in your database.\n\n### 5. Seed Sample Data\n\nPopulate the database with sample K-Drama journal entries:\n\n```bash\nnpx tsx server/seed.ts\n```\n\nThis will create:\n- 2 user accounts (admin and reader)\n- 5 chapters covering different seasons\n- 7 sections with various moods and themes\n- Multiple pages with embedded images\n- Beautiful K-Drama inspired content\n\n### 6. Start the Development Server\n\n```bash\nnpm run dev\n```\n\nThe application will start on `http://localhost:5000` (or your Replit URL if using Replit).\n\n## Default Login Credentials\n\nAfter seeding the database, you can log in with these accounts:\n\n### Admin Account\n- **Username:** `admin`\n- **Password:** `admin123`\n- **Capabilities:** Full access to content management, analytics, and admin tools\n\n### Reader Account\n- **Username:** `reader`\n- **Password:** `reader123`\n- **Capabilities:** Read access to all content with progress tracking\n\n## Project Structure\n\n```\nkdrama-journal/\n├── client/                 # Frontend React application\n│   ├── public/            # Static assets\n│   └── src/\n│       ├── components/    # React components\n│       │   ├── ui/       # Reusable UI components\n│       │   └── ...       # Feature-specific components\n│       ├── contexts/      # React context providers\n│       ├── hooks/         # Custom React hooks\n│       ├── lib/          # Utility functions and clients\n│       ├── pages/        # Page components (routes)\n│       └── App.tsx       # Main application component\n├── server/                # Backend Express application\n│   ├── db.ts            # Database connection\n│   ├── index.ts         # Server entry point\n│   ├── routes.ts        # API routes\n│   ├── seed.ts          # Database seeding script\n│   ├── storage.ts       # Data access layer\n│   └── vite.ts          # Vite development middleware\n├── shared/               # Shared code between client and server\n│   └── schema.ts        # Database schema and types\n├── package.json         # Dependencies and scripts\n├── drizzle.config.ts   # Drizzle ORM configuration\n├── vite.config.ts      # Vite configuration\n├── tailwind.config.ts  # Tailwind CSS configuration\n└── tsconfig.json       # TypeScript configuration\n```\n\n## Available Scripts\n\n### Development\n- `npm run dev` - Start the development server with hot reload\n- `npm run check` - Run TypeScript type checking\n\n### Database\n- `npm run db:push` - Push database schema changes to the database\n- `npx tsx server/seed.ts` - Seed the database with sample data\n\n### Production\n- `npm run build` - Build the application for production\n- `npm start` - Start the production server\n\n## Database Schema\n\nThe application uses five main tables:\n\n### Users\n- Stores user accounts with role-based access control\n- Roles: `admin`, `reader`, `guest`\n\n### Chapters\n- Top-level content organization\n- Each chapter has a title, description, and order\n\n### Sections\n- Sub-divisions within chapters\n- Contains mood, tags, thumbnail, and order\n\n### Pages\n- Individual content pages within sections\n- Supports embedded content via `[embed:URL]` syntax\n\n### Reading Progress\n- Tracks user reading behavior\n- Records completion status and last read timestamp\n\n## Embedded Content\n\nThe application supports embedded content in journal pages using the following syntax:\n\n### Images\n```\n[embed:https://example.com/image.jpg]\n```\n\n### Instagram Reels/Posts\n```\n[embed:https://www.instagram.com/p/POST_ID]\n```\n\nThe content renderer will automatically detect and display these embeds appropriately.\n\n## Customization\n\n### Changing Colors\nThe color theme is defined in `tailwind.config.ts`. You can customize the K-Drama color palette:\n\n```typescript\ncolors: {\n  kdrama: {\n    thread: \"#DC143C\",\n    sakura: \"#FFB7C5\",\n    lavender: \"#E6E6FA\",\n    // ... more colors\n  }\n}\n```\n\n### Adding New Fonts\nFonts are loaded from Google Fonts in `client/index.html`. The application uses:\n- **Nanum Myeongjo** for headings\n- **Noto Sans KR** for body text\n\n## Troubleshooting\n\n### Database Connection Issues\n- Ensure your `DATABASE_URL` is correctly set in the environment variables\n- Check that your PostgreSQL database is running and accessible\n- Run `npm run db:push` to ensure the schema is up to date\n\n### Port Already in Use\nIf port 5000 is already in use, you can change it in `server/index.ts`:\n```typescript\nconst PORT = process.env.PORT || 5000;\n```\n\n### Build Errors\n- Clear `node_modules` and reinstall: `rm -rf node_modules && npm install`\n- Clear the build cache: `rm -rf dist`\n\n## Contributing\n\nThis is a personal project, but suggestions and improvements are welcome!\n\n## License\n\nMIT License - See LICENSE file for details\n\n## Acknowledgments\n\n- Inspired by K-Drama aesthetics and the Red String of Fate legend\n- Built with love using modern web technologies\n- Korean typography powered by Google Fonts\n\n---\n\n**Enjoy your K-Drama Journal experience! 🎭❤️**\n","size_bytes":7582},"client/src/components/PrivateRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface PrivateRouteProps {\n  component: React.ComponentType<any>;\n  adminOnly?: boolean;\n  params?: any;\n}\n\nexport function PrivateRoute({ component: Component, adminOnly = false, params, ...rest }: PrivateRouteProps) {\n  const [, setLocation] = useLocation();\n  const { user, isAdmin, isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n    } else if (adminOnly && !isAdmin) {\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isAdmin, adminOnly, setLocation]);\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (adminOnly && !isAdmin) {\n    return null;\n  }\n\n  return <Component params={params} {...rest} />;\n}\n","size_bytes":804},"client/src/components/SectionSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Home, ChevronLeft, ChevronRight, Plus, Trash2, Pencil } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport type { Section } from \"@shared/schema\";\nimport { ImageUploadField } from \"./admin/ImageUploadField\";\n\ninterface SectionSidebarProps {\n  chapterId: string;\n  currentSectionId: string;\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nexport function SectionSidebar({ chapterId, currentSectionId, isOpen, onToggle }: SectionSidebarProps) {\n  const [, setLocation] = useLocation();\n  const { isAdmin } = useAuth();\n  const { toast } = useToast();\n  const [creatingSection, setCreatingSection] = useState(false);\n  const [newSectionTitle, setNewSectionTitle] = useState(\"\");\n  const [deletingSectionId, setDeletingSectionId] = useState<string | null>(null);\n  const [editingSection, setEditingSection] = useState<Section | null>(null);\n  const [editedTitle, setEditedTitle] = useState(\"\");\n  const [editedMood, setEditedMood] = useState(\"\");\n  const [editedTags, setEditedTags] = useState(\"\");\n  const [editedThumbnail, setEditedThumbnail] = useState(\"\");\n  const [editedSongUrl, setEditedSongUrl] = useState(\"\");\n\n  const { data: sections = [] } = useQuery<Section[]>({\n    queryKey: [`/api/chapters/${chapterId}/sections`],\n    enabled: !!chapterId,\n  });\n\n  const createSectionMutation = useMutation({\n    mutationFn: async (data: { title: string; chapterId: string; order: number }): Promise<Section> => {\n      const response = await apiRequest(\"POST\", \"/api/sections\", data);\n      return await response.json();\n    },\n    onSuccess: (newSection: Section) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/chapters/${chapterId}/sections`] });\n      toast({ title: \"Section created successfully\" });\n      setCreatingSection(false);\n      setNewSectionTitle(\"\");\n      // Navigate to the new section\n      setLocation(`/read/${newSection.id}`);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create section\", \n        description: error?.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deleteSectionMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/sections/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/chapters/${chapterId}/sections`] });\n      toast({ title: \"Section deleted successfully\" });\n      setDeletingSectionId(null);\n      \n      // Smart navigation: if we deleted the current section, navigate away\n      if (deletingSectionId === currentSectionId) {\n        // Try to navigate to the first remaining section\n        const remainingSections = sections.filter(s => s.id !== deletingSectionId);\n        if (remainingSections.length > 0) {\n          setLocation(`/read/${remainingSections[0].id}`);\n        } else {\n          // No sections left, go back to chapters\n          setLocation(\"/\");\n        }\n      }\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to delete section\", \n        description: error?.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n      setDeletingSectionId(null);\n    },\n  });\n\n  const updateSectionMutation = useMutation({\n    mutationFn: async (data: { \n      id: string; \n      title?: string; \n      mood?: string[];\n      tags?: string[];\n      thumbnail?: string;\n      songUrl?: string;\n    }) => {\n      const { id, ...updateData } = data;\n      return apiRequest(\"PATCH\", `/api/sections/${id}`, updateData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/chapters/${chapterId}/sections`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${editingSection?.id}`] });\n      toast({ title: \"Section updated successfully\" });\n      setEditingSection(null);\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to update section\", \n        description: \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleSectionClick = (sectionId: string) => {\n    setLocation(`/read/${sectionId}`);\n  };\n\n  const handleBackHome = () => {\n    setLocation(\"/\");\n  };\n\n  const handleCreateSection = () => {\n    if (!newSectionTitle.trim()) {\n      toast({\n        title: \"Section title required\",\n        description: \"Please enter a title for the section\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const nextOrder = sections.length > 0 \n      ? Math.max(...sections.map(s => s.order)) + 1 \n      : 1;\n\n    createSectionMutation.mutate({\n      title: newSectionTitle,\n      chapterId: chapterId,\n      order: nextOrder,\n    });\n  };\n\n  const handleStartEdit = (section: Section) => {\n    setEditingSection(section);\n    setEditedTitle(section.title);\n    setEditedMood(section.mood?.join(\", \") || \"\");\n    setEditedTags(section.tags?.join(\", \") || \"\");\n    setEditedThumbnail(section.thumbnail || \"\");\n    setEditedSongUrl(section.songUrl || \"\");\n  };\n\n  const handleSaveEdit = () => {\n    if (!editingSection) return;\n    \n    if (!editedTitle.trim()) {\n      toast({\n        title: \"Title required\",\n        description: \"Please enter a title for the section\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const tagsArray = editedTags\n      .split(\",\")\n      .map(t => t.trim())\n      .filter(t => t.length > 0);\n\n    const moodArray = editedMood\n      .split(\",\")\n      .map(t => t.trim())\n      .filter(t => t.length > 0);\n\n    updateSectionMutation.mutate({\n      id: editingSection.id,\n      title: editedTitle.trim(),\n      mood: moodArray.length > 0 ? moodArray : undefined,\n      tags: tagsArray.length > 0 ? tagsArray : undefined,\n      thumbnail: editedThumbnail.trim() || undefined,\n      songUrl: editedSongUrl.trim() || undefined,\n    });\n  };\n\n  const handleCancelEdit = () => {\n    setEditingSection(null);\n    setEditedTitle(\"\");\n    setEditedMood(\"\");\n    setEditedTags(\"\");\n    setEditedThumbnail(\"\");\n    setEditedSongUrl(\"\");\n  };\n\n  return (\n    <>\n      {/* Overlay for mobile */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={onToggle}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          \"fixed top-0 left-0 h-full bg-white dark:bg-card shadow-xl z-50 transition-all duration-300\",\n          \"flex flex-col\",\n          isOpen ? \"w-80\" : \"w-16\"\n        )}\n      >\n        {/* Header */}\n        <div className=\"p-4 border-b flex items-center justify-between\">\n          {isOpen && (\n            <h3 className=\"font-myeongjo text-lg font-semibold text-kdrama-ink dark:text-foreground\">\n              Sections\n            </h3>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onToggle}\n            className=\"ml-auto\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            {isOpen ? (\n              <ChevronLeft className=\"w-5 h-5\" />\n            ) : (\n              <ChevronRight className=\"w-5 h-5\" />\n            )}\n          </Button>\n        </div>\n\n        {/* Back to Home Button */}\n        <div className=\"p-4 border-b\">\n          <Button\n            variant=\"outline\"\n            onClick={handleBackHome}\n            className={cn(\n              \"w-full justify-start gap-2 font-noto\",\n              !isOpen && \"justify-center px-2\"\n            )}\n            data-testid=\"button-back-home\"\n          >\n            <Home className=\"w-4 h-4\" />\n            {isOpen && \"Back to Home\"}\n          </Button>\n        </div>\n\n        {/* New Section Button (Admin Only) */}\n        {isAdmin && (\n          <div className=\"p-4 border-b\">\n            <Button\n              variant=\"default\"\n              onClick={() => setCreatingSection(true)}\n              className={cn(\n                \"w-full justify-start gap-2 font-noto\",\n                !isOpen && \"justify-center px-2\"\n              )}\n              data-testid=\"button-new-section-sidebar\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              {isOpen && \"New Section\"}\n            </Button>\n          </div>\n        )}\n\n        {/* Sections List */}\n        <ScrollArea className=\"flex-1 py-4 overflow-visible\">\n          <div className={cn(isOpen ? \"px-4\" : \"px-2\")}>\n            {isOpen ? (\n              <div className=\"space-y-2\">\n                {sections.map((section, index) => (\n                  <div\n                    key={section.id}\n                    className={cn(\n                      \"w-full text-left p-3 rounded-lg transition-colors group\",\n                      \"hover:bg-kdrama-sakura/20 dark:hover:bg-accent\",\n                      currentSectionId === section.id\n                        ? \"bg-kdrama-sakura/30 dark:bg-accent text-kdrama-ink dark:text-accent-foreground font-semibold\"\n                        : \"text-muted-foreground hover:text-foreground\"\n                    )}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <button\n                        onClick={() => handleSectionClick(section.id)}\n                        className=\"flex items-start gap-3 flex-1 min-w-0\"\n                        data-testid={`button-section-${index + 1}`}\n                      >\n                        <span className=\"flex-shrink-0 w-6 h-6 rounded-full bg-kdrama-sakura/50 dark:bg-accent flex items-center justify-center text-xs font-bold\">\n                          {index + 1}\n                        </span>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-noto text-sm truncate\">{section.title}</p>\n                        </div>\n                      </button>\n                      {isAdmin && (\n                        <div className=\"flex items-center gap-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleStartEdit(section);\n                            }}\n                            className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6\"\n                            data-testid={`button-edit-section-${section.id}`}\n                          >\n                            <Pencil className=\"w-3 h-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setDeletingSectionId(section.id);\n                            }}\n                            className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6\"\n                            data-testid={`button-delete-section-${section.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {sections.map((section, index) => (\n                  <button\n                    key={section.id}\n                    onClick={() => handleSectionClick(section.id)}\n                    className={cn(\n                      \"w-full p-2 rounded-lg transition-colors flex items-center justify-center\",\n                      currentSectionId === section.id\n                        ? \"bg-kdrama-sakura/30 dark:bg-accent text-kdrama-ink dark:text-accent-foreground font-bold\"\n                        : \"text-muted-foreground hover:text-foreground hover:bg-kdrama-sakura/20 dark:hover:bg-accent\"\n                    )}\n                    title={section.title}\n                    data-testid={`button-section-collapsed-${index + 1}`}\n                  >\n                    <span className=\"w-6 h-6 rounded-full bg-kdrama-sakura/50 dark:bg-accent flex items-center justify-center text-xs font-bold\">\n                      {index + 1}\n                    </span>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n      </div>\n\n      {/* Create Section Dialog */}\n      <Dialog open={creatingSection} onOpenChange={setCreatingSection}>\n        <DialogContent data-testid=\"dialog-create-section-sidebar\">\n          <DialogHeader>\n            <DialogTitle>Create New Section</DialogTitle>\n            <DialogDescription>\n              Add a new section to this chapter. It will be created with an empty first page.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"section-title\">Section Title</Label>\n              <Input\n                id=\"section-title\"\n                value={newSectionTitle}\n                onChange={(e) => setNewSectionTitle(e.target.value)}\n                placeholder=\"Enter section title...\"\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\") {\n                    handleCreateSection();\n                  }\n                }}\n                data-testid=\"input-new-section-title\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setCreatingSection(false);\n                setNewSectionTitle(\"\");\n              }}\n              data-testid=\"button-cancel-section\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleCreateSection}\n              disabled={createSectionMutation.isPending}\n              data-testid=\"button-create-section-confirm\"\n            >\n              {createSectionMutation.isPending ? \"Creating...\" : \"Create Section\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Section Dialog */}\n      <Dialog open={!!editingSection} onOpenChange={() => setEditingSection(null)}>\n        <DialogContent data-testid=\"dialog-edit-section\" className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"font-myeongjo\">Edit Section</DialogTitle>\n            <DialogDescription className=\"font-noto\">\n              Update section metadata including title, mood, tags, thumbnail, and music.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-title\" className=\"font-noto\">Title *</Label>\n              <Input\n                id=\"edit-title\"\n                value={editedTitle}\n                onChange={(e) => setEditedTitle(e.target.value)}\n                placeholder=\"Section title\"\n                className=\"font-noto\"\n                data-testid=\"input-edit-section-title\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-mood\" className=\"font-noto\">Mood</Label>\n              <Input\n                id=\"edit-mood\"\n                value={editedMood}\n                onChange={(e) => setEditedMood(e.target.value)}\n                placeholder=\"e.g., Joyful, Melancholic, Tense\"\n                className=\"font-noto\"\n                data-testid=\"input-edit-section-mood\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-tags\" className=\"font-noto\">Tags</Label>\n              <Input\n                id=\"edit-tags\"\n                value={editedTags}\n                onChange={(e) => setEditedTags(e.target.value)}\n                placeholder=\"Comma separated, e.g., romance, family, drama\"\n                className=\"font-noto\"\n                data-testid=\"input-edit-section-tags\"\n              />\n              <p className=\"text-xs text-muted-foreground\">Separate multiple tags with commas</p>\n            </div>\n            \n            <ImageUploadField\n              label=\"Thumbnail Image\"\n              value={editedThumbnail}\n              onChange={setEditedThumbnail}\n              placeholder=\"https://example.com/image.jpg\"\n              testId=\"input-edit-section-thumbnail\"\n            />\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-song\" className=\"font-noto\">Spotify Song URL (Special Music)</Label>\n              <Input\n                id=\"edit-song\"\n                value={editedSongUrl}\n                onChange={(e) => setEditedSongUrl(e.target.value)}\n                placeholder=\"https://open.spotify.com/track/...\"\n                className=\"font-noto\"\n                data-testid=\"input-edit-section-song\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Special music for this section (plays automatically when entering)\n              </p>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={handleCancelEdit}\n              disabled={updateSectionMutation.isPending}\n              data-testid=\"button-cancel-edit-section\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSaveEdit}\n              disabled={updateSectionMutation.isPending}\n              data-testid=\"button-save-edit-section\"\n            >\n              {updateSectionMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Section Confirmation Dialog */}\n      <AlertDialog open={!!deletingSectionId} onOpenChange={() => setDeletingSectionId(null)}>\n        <AlertDialogContent data-testid=\"dialog-delete-section\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Section</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this section? This will also delete all pages within it. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-section\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingSectionId && deleteSectionMutation.mutate(deletingSectionId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete-section\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":19760},"client/src/components/FloatingMusicPlayer.tsx":{"content":"import { Music, X } from \"lucide-react\";\nimport { useMusicPlayer } from \"@/contexts/MusicPlayerContext\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState, useRef } from \"react\";\n\n// Extend Window interface for Spotify iFrame API\ndeclare global {\n  interface Window {\n    onSpotifyIframeApiReady?: (IFrameAPI: any) => void;\n    Spotify?: any;\n  }\n}\n\nexport function FloatingMusicPlayer() {\n  const { currentSongUrl, currentSongName, forceReloadKey } = useMusicPlayer();\n  const [isApiReady, setIsApiReady] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const embedControllerRef = useRef<any>(null);\n  const embedContainerRef = useRef<HTMLDivElement>(null);\n\n  // Check if Spotify iFrame API is ready\n  useEffect(() => {\n    if (typeof window.Spotify !== 'undefined') {\n      setIsApiReady(true);\n    } else {\n      window.onSpotifyIframeApiReady = (IFrameAPI) => {\n        window.Spotify = IFrameAPI;\n        setIsApiReady(true);\n      };\n    }\n  }, []);\n\n  // Extract Spotify URI from various Spotify URL formats\n  const getSpotifyUri = (url: string | null) => {\n    if (!url) return null;\n    \n    // Handle different Spotify URL formats\n    const trackMatch = url.match(/track\\/([a-zA-Z0-9]+)/);\n    if (trackMatch) {\n      return `spotify:track:${trackMatch[1]}`;\n    }\n    \n    const albumMatch = url.match(/album\\/([a-zA-Z0-9]+)/);\n    if (albumMatch) {\n      return `spotify:album:${albumMatch[1]}`;\n    }\n    \n    const playlistMatch = url.match(/playlist\\/([a-zA-Z0-9]+)/);\n    if (playlistMatch) {\n      return `spotify:playlist:${playlistMatch[1]}`;\n    }\n    \n    return null;\n  };\n\n  const spotifyUri = getSpotifyUri(currentSongUrl);\n\n  // Create Spotify embed controller when API is ready and URI changes\n  useEffect(() => {\n    if (!isApiReady || !spotifyUri || !embedContainerRef.current || !window.Spotify) {\n      return;\n    }\n\n    // Clear previous embed if exists\n    if (embedControllerRef.current) {\n      embedControllerRef.current.destroy();\n      embedControllerRef.current = null;\n    }\n\n    // Clear container\n    embedContainerRef.current.innerHTML = '';\n\n    const options = {\n      uri: spotifyUri,\n      width: '100%',\n      height: 152,\n    };\n\n    const callback = (EmbedController: any) => {\n      embedControllerRef.current = EmbedController;\n      \n      // Listen for when the player is ready to play\n      let hasAttemptedPlay = false;\n      \n      EmbedController.addListener('playback_update', (e: any) => {\n        // Once we get the first playback update, the player is ready\n        // Call play() if we haven't already\n        if (!hasAttemptedPlay) {\n          hasAttemptedPlay = true;\n          // Reduced delay for faster playback\n          setTimeout(() => {\n            try {\n              const playResult = EmbedController.play();\n              // Check if play() returns a Promise before calling catch\n              if (playResult && typeof playResult.catch === 'function') {\n                playResult.catch((err: any) => {\n                  console.log('Autoplay blocked or failed:', err);\n                  // Fallback: try again after a shorter delay\n                  setTimeout(() => {\n                    try {\n                      EmbedController.play();\n                    } catch (e) {\n                      // Silent fail - user can manually click play\n                    }\n                  }, 500);\n                });\n              }\n            } catch (err) {\n              console.log('Autoplay error:', err);\n            }\n          }, 100);\n        }\n      });\n      \n      // Backup: Also try to play after a delay in case playback_update doesn't fire\n      setTimeout(() => {\n        if (!hasAttemptedPlay) {\n          hasAttemptedPlay = true;\n          try {\n            EmbedController.play();\n          } catch (e) {\n            // Silent fail\n          }\n        }\n      }, 800);\n    };\n\n    window.Spotify.createController(embedContainerRef.current, options, callback);\n\n    return () => {\n      if (embedControllerRef.current) {\n        embedControllerRef.current.destroy();\n        embedControllerRef.current = null;\n      }\n    };\n  }, [isApiReady, spotifyUri, forceReloadKey]);\n\n  // Handle minimize - music continues playing\n  const handleMinimize = () => {\n    setIsMinimized(true);\n  };\n\n  // Handle expand - show player again\n  const handleExpand = () => {\n    setIsMinimized(false);\n  };\n\n  // Don't render if no song is set\n  if (!currentSongUrl || !spotifyUri) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"fixed top-4 right-4 z-50\"\n      data-testid=\"floating-music-player\"\n    >\n      {/* Minimized state - just the icon */}\n      {isMinimized && (\n        <Button\n          size=\"icon\"\n          variant=\"default\"\n          className=\"h-12 w-12 rounded-full shadow-2xl backdrop-blur-md bg-[#ffe9ed] dark:bg-background/50 hover:bg-background/60 dark:hover:bg-background/70 border-2 border-white dark:border-kdrama-cream ring-2 ring-kdrama-heart/50\"\n          onClick={handleExpand}\n          data-testid=\"button-expand-player\"\n        >\n          <Music className=\"h-6 w-6 text-kdrama-heart drop-shadow-md\" />\n        </Button>\n      )}\n\n      {/* Expanded player - hidden with CSS when minimized to keep iframe mounted */}\n      <Card className={`overflow-hidden shadow-2xl bg-card border-kdrama-thread/20 w-[300px] ${isMinimized ? 'hidden' : ''}`}>\n        <div className=\"p-3 flex items-center justify-between bg-kdrama-accent/10 border-b border-kdrama-thread/20\">\n          <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n            <Music className=\"h-4 w-4 text-kdrama-thread flex-shrink-0\" />\n            <p className=\"text-sm font-noto font-medium text-foreground truncate\" data-testid=\"text-song-name\">\n              {currentSongName || \"Now Playing\"}\n            </p>\n          </div>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"h-6 w-6 flex-shrink-0\"\n            onClick={handleMinimize}\n            data-testid=\"button-minimize-player\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <div className=\"bg-background\" ref={embedContainerRef} data-testid=\"spotify-embed-container\">\n          {/* Spotify embed will be created here by the iFrame API */}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6426},"client/src/contexts/MusicPlayerContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\ninterface MusicPlayerContextType {\n  currentSongUrl: string | null;\n  currentSongName: string | null;\n  isExpanded: boolean;\n  setCurrentSong: (url: string | null, name: string | null) => void;\n  toggleExpanded: () => void;\n  setExpanded: (expanded: boolean) => void;\n}\n\nconst MusicPlayerContext = createContext<MusicPlayerContextType | undefined>(undefined);\n\nexport function MusicPlayerProvider({ children }: { children: ReactNode }) {\n  const [currentSongUrl, setCurrentSongUrl] = useState<string | null>(null);\n  const [currentSongName, setCurrentSongName] = useState<string | null>(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const setCurrentSong = (url: string | null, name: string | null) => {\n    setCurrentSongUrl(url);\n    setCurrentSongName(name);\n  };\n\n  const toggleExpanded = () => {\n    setIsExpanded((prev) => !prev);\n  };\n\n  const setExpanded = (expanded: boolean) => {\n    setIsExpanded(expanded);\n  };\n\n  return (\n    <MusicPlayerContext.Provider\n      value={{\n        currentSongUrl,\n        currentSongName,\n        isExpanded,\n        setCurrentSong,\n        toggleExpanded,\n        setExpanded,\n      }}\n    >\n      {children}\n    </MusicPlayerContext.Provider>\n  );\n}\n\nexport function useMusicPlayer() {\n  const context = useContext(MusicPlayerContext);\n  if (context === undefined) {\n    throw new Error(\"useMusicPlayer must be used within a MusicPlayerProvider\");\n  }\n  return context;\n}\n","size_bytes":1509},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Fix database connection and security (bcrypt password hashing)\n[x] 3. Push database schema and seed with sample data\n[x] 4. Reinstall npm dependencies to resolve tsx not found error\n[x] 5. Restart the workflow and verify the application is running on port 5000\n[x] 6. Verify the project is working using screenshot - login page displays correctly\n[x] 7. Migration completed successfully\n[x] 8. Enhanced seed data with K-Drama OST song links for all chapters and sections\n[x] 9. Added sample analytics events (7 page views with durations) for both users\n[x] 10. Added reading progress data showing completed and in-progress sections\n[x] 11. Final verification - reinstalled npm dependencies and confirmed application running successfully\n[x] 12. Database populated with comprehensive K-Drama journal content (5 chapters, 7 sections, multiple pages)\n[x] 13. Updated Knot component with decorative knot/loop SVG design instead of hearts\n[x] 14. Transformed ThreadBar to use curved bezier paths for red thread visualization\n[x] 15. Added chapter progress tracking API endpoint and frontend integration\n[x] 16. Added status badges (Completed/Resume) to chapter cards on home page\n[x] 17. Fixed React hook violation by using useQueries instead of map with useQuery","size_bytes":1302},"client/src/components/MusicManager.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Music, Save, X, Edit2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Chapter, Section } from \"@shared/schema\";\n\nexport function MusicManager() {\n  const { toast } = useToast();\n  const [editingChapterId, setEditingChapterId] = useState<string | null>(null);\n  const [editingSectionId, setEditingSectionId] = useState<string | null>(null);\n  const [chapterSongUrl, setChapterSongUrl] = useState(\"\");\n  const [sectionSongUrl, setSectionSongUrl] = useState(\"\");\n\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/chapters\"],\n  });\n\n  const { data: sections = [] } = useQuery<Section[]>({\n    queryKey: [\"/api/sections\"],\n  });\n\n  const updateChapterMutation = useMutation({\n    mutationFn: async (data: { id: string; songUrl: string | null }) => {\n      return apiRequest(\"PATCH\", `/api/chapters/${data.id}`, { songUrl: data.songUrl });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chapters\"] });\n      toast({\n        title: \"Song updated\",\n        description: \"Chapter song has been updated successfully.\",\n      });\n      setEditingChapterId(null);\n      setChapterSongUrl(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update chapter song.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSectionMutation = useMutation({\n    mutationFn: async (data: { id: string; songUrl: string | null }) => {\n      return apiRequest(\"PATCH\", `/api/sections/${data.id}`, { songUrl: data.songUrl });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      toast({\n        title: \"Song updated\",\n        description: \"Section song has been updated successfully.\",\n      });\n      setEditingSectionId(null);\n      setSectionSongUrl(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update section song.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditChapter = (chapter: Chapter) => {\n    setEditingChapterId(chapter.id);\n    setChapterSongUrl(chapter.songUrl || \"\");\n  };\n\n  const handleSaveChapter = (chapterId: string) => {\n    updateChapterMutation.mutate({\n      id: chapterId,\n      songUrl: chapterSongUrl || null,\n    });\n  };\n\n  const handleEditSection = (section: Section) => {\n    setEditingSectionId(section.id);\n    setSectionSongUrl(section.songUrl || \"\");\n  };\n\n  const handleSaveSection = (sectionId: string) => {\n    updateSectionMutation.mutate({\n      id: sectionId,\n      songUrl: sectionSongUrl || null,\n    });\n  };\n\n  const isValidSpotifyUrl = (url: string) => {\n    if (!url) return true; // Empty is valid (removes song)\n    // Check for valid Spotify track URL with track ID\n    const spotifyTrackRegex = /^https:\\/\\/open\\.spotify\\.com\\/track\\/[a-zA-Z0-9]+/;\n    return spotifyTrackRegex.test(url);\n  };\n\n  return (\n    <div className=\"space-y-8 max-w-4xl mx-auto\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-myeongjo flex items-center gap-2\">\n            <Music className=\"w-5 h-5 text-kdrama-thread\" />\n            Chapter Songs\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {chapters.map((chapter) => (\n            <div key={chapter.id} className=\"border rounded-md p-4 space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-myeongjo text-lg font-medium\">{chapter.title}</h3>\n                  {chapter.songUrl && editingChapterId !== chapter.id && (\n                    <p className=\"text-sm text-muted-foreground font-mono truncate mt-1\">\n                      {chapter.songUrl}\n                    </p>\n                  )}\n                  {!chapter.songUrl && editingChapterId !== chapter.id && (\n                    <p className=\"text-sm text-muted-foreground italic mt-1\">No song assigned</p>\n                  )}\n                </div>\n                {editingChapterId !== chapter.id ? (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleEditChapter(chapter)}\n                    data-testid={`button-edit-chapter-${chapter.id}`}\n                  >\n                    <Edit2 className=\"w-4 h-4\" />\n                  </Button>\n                ) : null}\n              </div>\n\n              {editingChapterId === chapter.id && (\n                <div className=\"space-y-3 pt-2 border-t\">\n                  <div>\n                    <Label className=\"font-noto text-sm\">Spotify Track URL</Label>\n                    <Input\n                      value={chapterSongUrl}\n                      onChange={(e) => setChapterSongUrl(e.target.value)}\n                      placeholder=\"https://open.spotify.com/track/...\"\n                      className=\"font-mono text-sm mt-1\"\n                      data-testid=\"input-chapter-song-url\"\n                    />\n                    {chapterSongUrl && !isValidSpotifyUrl(chapterSongUrl) && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        Please enter a valid Spotify track URL\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleSaveChapter(chapter.id)}\n                      disabled={!isValidSpotifyUrl(chapterSongUrl) || updateChapterMutation.isPending}\n                      data-testid=\"button-save-chapter\"\n                    >\n                      <Save className=\"w-4 h-4 mr-1\" />\n                      Save\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => {\n                        setEditingChapterId(null);\n                        setChapterSongUrl(\"\");\n                      }}\n                      data-testid=\"button-cancel-chapter\"\n                    >\n                      <X className=\"w-4 h-4 mr-1\" />\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-myeongjo flex items-center gap-2\">\n            <Music className=\"w-5 h-5 text-kdrama-thread\" />\n            Section Songs\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {sections.map((section) => (\n            <div key={section.id} className=\"border rounded-md p-4 space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-myeongjo text-lg font-medium\">{section.title}</h3>\n                  {section.mood && (\n                    <Badge variant=\"outline\" className=\"mt-1 font-noto text-xs\">\n                      {section.mood}\n                    </Badge>\n                  )}\n                  {section.songUrl && editingSectionId !== section.id && (\n                    <p className=\"text-sm text-muted-foreground font-mono truncate mt-1\">\n                      {section.songUrl}\n                    </p>\n                  )}\n                  {!section.songUrl && editingSectionId !== section.id && (\n                    <p className=\"text-sm text-muted-foreground italic mt-1\">No song assigned</p>\n                  )}\n                </div>\n                {editingSectionId !== section.id ? (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleEditSection(section)}\n                    data-testid={`button-edit-section-${section.id}`}\n                  >\n                    <Edit2 className=\"w-4 h-4\" />\n                  </Button>\n                ) : null}\n              </div>\n\n              {editingSectionId === section.id && (\n                <div className=\"space-y-3 pt-2 border-t\">\n                  <div>\n                    <Label className=\"font-noto text-sm\">Spotify Track URL</Label>\n                    <Input\n                      value={sectionSongUrl}\n                      onChange={(e) => setSectionSongUrl(e.target.value)}\n                      placeholder=\"https://open.spotify.com/track/...\"\n                      className=\"font-mono text-sm mt-1\"\n                      data-testid=\"input-section-song-url\"\n                    />\n                    {sectionSongUrl && !isValidSpotifyUrl(sectionSongUrl) && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        Please enter a valid Spotify track URL\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleSaveSection(section.id)}\n                      disabled={!isValidSpotifyUrl(sectionSongUrl) || updateSectionMutation.isPending}\n                      data-testid=\"button-save-section\"\n                    >\n                      <Save className=\"w-4 h-4 mr-1\" />\n                      Save\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => {\n                        setEditingSectionId(null);\n                        setSectionSongUrl(\"\");\n                      }}\n                      data-testid=\"button-cancel-section\"\n                    >\n                      <X className=\"w-4 h-4 mr-1\" />\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10471},"client/src/components/admin/ChapterManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Plus, Edit, Trash2, Book } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Chapter } from \"@shared/schema\";\n\nexport function ChapterManagement() {\n  const { toast } = useToast();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingChapter, setEditingChapter] = useState<Chapter | null>(null);\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    coverImage: \"\",\n    songUrl: \"\",\n    order: \"0\",\n  });\n\n  const { data: chapters = [], isLoading } = useQuery<Chapter[]>({\n    queryKey: [\"/api/chapters\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return apiRequest(\"POST\", \"/api/chapters\", {\n        title: data.title,\n        description: data.description || null,\n        coverImage: data.coverImage || null,\n        songUrl: data.songUrl || null,\n        order: parseInt(data.order),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chapters\"] });\n      setIsCreateOpen(false);\n      resetForm();\n      toast({\n        title: \"Chapter created\",\n        description: \"New chapter has been added successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create chapter. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: typeof formData }) => {\n      return apiRequest(\"PATCH\", `/api/chapters/${id}`, {\n        title: data.title,\n        description: data.description || null,\n        coverImage: data.coverImage || null,\n        songUrl: data.songUrl || null,\n        order: parseInt(data.order),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chapters\"] });\n      setEditingChapter(null);\n      resetForm();\n      toast({\n        title: \"Chapter updated\",\n        description: \"Changes have been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update chapter. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/chapters/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chapters\"] });\n      setDeletingId(null);\n      toast({\n        title: \"Chapter deleted\",\n        description: \"Chapter has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete chapter. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({ title: \"\", description: \"\", coverImage: \"\", songUrl: \"\", order: \"0\" });\n  };\n\n  const handleCreate = () => {\n    resetForm();\n    setIsCreateOpen(true);\n  };\n\n  const handleEdit = (chapter: Chapter) => {\n    setFormData({\n      title: chapter.title,\n      description: chapter.description || \"\",\n      coverImage: chapter.coverImage || \"\",\n      songUrl: chapter.songUrl || \"\",\n      order: chapter.order.toString(),\n    });\n    setEditingChapter(chapter);\n  };\n\n  const handleSubmit = () => {\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Validation error\",\n        description: \"Title is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingChapter) {\n      updateMutation.mutate({ id: editingChapter.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    setDeletingId(id);\n  };\n\n  const confirmDelete = () => {\n    if (deletingId) {\n      deleteMutation.mutate(deletingId);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <p className=\"font-noto text-muted-foreground\">Loading chapters...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"font-myeongjo text-2xl font-bold text-kdrama-ink dark:text-foreground\">\n            Manage Chapters\n          </h2>\n          <p className=\"font-noto text-sm text-muted-foreground mt-1\">\n            Create and organize chapters for your journal\n          </p>\n        </div>\n        <Button onClick={handleCreate} data-testid=\"button-create-chapter\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          New Chapter\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {chapters.map((chapter) => (\n          <Card key={chapter.id} data-testid={`card-chapter-${chapter.id}`}>\n            {chapter.coverImage ? (\n              <div className=\"h-32 w-full overflow-hidden rounded-t-lg\">\n                <img\n                  src={chapter.coverImage}\n                  alt={chapter.title}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            ) : (\n              <div className=\"h-32 w-full bg-gradient-to-br from-kdrama-sakura/30 via-kdrama-lavender/30 to-kdrama-sky/30 flex items-center justify-center rounded-t-lg\">\n                <Book className=\"w-12 h-12 text-kdrama-thread/30\" />\n              </div>\n            )}\n            <CardHeader>\n              <div className=\"flex items-start justify-between gap-2\">\n                <CardTitle className=\"font-myeongjo text-lg\">\n                  {chapter.title}\n                </CardTitle>\n                <Badge variant=\"outline\" className=\"font-noto shrink-0\">\n                  #{chapter.order}\n                </Badge>\n              </div>\n              {chapter.description && (\n                <CardDescription className=\"font-noto line-clamp-2\">\n                  {chapter.description}\n                </CardDescription>\n              )}\n            </CardHeader>\n            <CardContent className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleEdit(chapter)}\n                data-testid={`button-edit-chapter-${chapter.id}`}\n              >\n                <Edit className=\"w-3 h-3 mr-1\" />\n                Edit\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleDelete(chapter.id)}\n                data-testid={`button-delete-chapter-${chapter.id}`}\n              >\n                <Trash2 className=\"w-3 h-3 mr-1\" />\n                Delete\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n\n        {chapters.length === 0 && (\n          <Card className=\"col-span-full\">\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <Book className=\"w-12 h-12 text-muted-foreground/30 mb-4\" />\n              <p className=\"font-noto text-muted-foreground mb-4\">No chapters yet</p>\n              <Button onClick={handleCreate} variant=\"outline\" size=\"sm\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create your first chapter\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog open={isCreateOpen || !!editingChapter} onOpenChange={(open) => {\n        if (!open) {\n          setIsCreateOpen(false);\n          setEditingChapter(null);\n          resetForm();\n        }\n      }}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"font-myeongjo\">\n              {editingChapter ? \"Edit Chapter\" : \"Create New Chapter\"}\n            </DialogTitle>\n            <DialogDescription className=\"font-noto\">\n              {editingChapter ? \"Update chapter information\" : \"Add a new chapter to your journal\"}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">\n                Title <span className=\"text-destructive\">*</span>\n              </label>\n              <Input\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                placeholder=\"Enter chapter title\"\n                data-testid=\"input-chapter-title\"\n              />\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Description</label>\n              <Textarea\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Enter chapter description (optional)\"\n                rows={3}\n                data-testid=\"input-chapter-description\"\n              />\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Cover Image URL</label>\n              <Input\n                value={formData.coverImage}\n                onChange={(e) => setFormData({ ...formData, coverImage: e.target.value })}\n                placeholder=\"https://example.com/image.jpg\"\n                data-testid=\"input-chapter-cover\"\n              />\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">\n                Spotify Music/Playlist URL\n              </label>\n              <Input\n                value={formData.songUrl}\n                onChange={(e) => setFormData({ ...formData, songUrl: e.target.value })}\n                placeholder=\"https://open.spotify.com/playlist/...\"\n                data-testid=\"input-chapter-music\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1.5 font-noto\">\n                Add background music for this entire chapter (track, album, or playlist)\n              </p>\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Display Order</label>\n              <Input\n                type=\"number\"\n                value={formData.order}\n                onChange={(e) => setFormData({ ...formData, order: e.target.value })}\n                placeholder=\"0\"\n                data-testid=\"input-chapter-order\"\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsCreateOpen(false);\n                setEditingChapter(null);\n                resetForm();\n              }}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={createMutation.isPending || updateMutation.isPending}\n              data-testid=\"button-save-chapter\"\n            >\n              {createMutation.isPending || updateMutation.isPending ? \"Saving...\" : \"Save Chapter\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation */}\n      <AlertDialog open={!!deletingId} onOpenChange={(open) => !open && setDeletingId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"font-myeongjo\">Delete Chapter?</AlertDialogTitle>\n            <AlertDialogDescription className=\"font-noto\">\n              This will permanently delete this chapter and all its sections and pages. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":13142},"client/src/components/admin/SectionManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Plus, Edit, Trash2, BookOpen } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Section, Chapter } from \"@shared/schema\";\n\nexport function SectionManagement() {\n  const { toast } = useToast();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingSection, setEditingSection] = useState<Section | null>(null);\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    chapterId: \"\",\n    mood: \"\",\n    tags: \"\",\n    thumbnail: \"\",\n    songUrl: \"\",\n    order: \"0\",\n  });\n\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/chapters\"],\n  });\n\n  const { data: sections = [], isLoading } = useQuery<Section[]>({\n    queryKey: [\"/api/sections\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return apiRequest(\"/api/sections\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          title: data.title,\n          chapterId: data.chapterId,\n          mood: data.mood || null,\n          tags: data.tags ? data.tags.split(\",\").map(t => t.trim()) : [],\n          thumbnail: data.thumbnail || null,\n          songUrl: data.songUrl || null,\n          order: parseInt(data.order),\n        }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      setIsCreateOpen(false);\n      resetForm();\n      toast({\n        title: \"Section created\",\n        description: \"New section has been added successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create section. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: typeof formData }) => {\n      return apiRequest(`/api/sections/${id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify({\n          title: data.title,\n          chapterId: data.chapterId,\n          mood: data.mood || null,\n          tags: data.tags ? data.tags.split(\",\").map(t => t.trim()) : [],\n          thumbnail: data.thumbnail || null,\n          songUrl: data.songUrl || null,\n          order: parseInt(data.order),\n        }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      setEditingSection(null);\n      resetForm();\n      toast({\n        title: \"Section updated\",\n        description: \"Changes have been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update section. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/sections/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      setDeletingId(null);\n      toast({\n        title: \"Section deleted\",\n        description: \"Section has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete section. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      chapterId: \"\",\n      mood: \"\",\n      tags: \"\",\n      thumbnail: \"\",\n      songUrl: \"\",\n      order: \"0\",\n    });\n  };\n\n  const handleCreate = () => {\n    resetForm();\n    setIsCreateOpen(true);\n  };\n\n  const handleEdit = (section: Section) => {\n    setFormData({\n      title: section.title,\n      chapterId: section.chapterId,\n      mood: section.mood || \"\",\n      tags: section.tags ? section.tags.join(\", \") : \"\",\n      thumbnail: section.thumbnail || \"\",\n      songUrl: section.songUrl || \"\",\n      order: section.order.toString(),\n    });\n    setEditingSection(section);\n  };\n\n  const handleSubmit = () => {\n    if (!formData.title.trim() || !formData.chapterId) {\n      toast({\n        title: \"Validation error\",\n        description: \"Title and chapter are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingSection) {\n      updateMutation.mutate({ id: editingSection.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    setDeletingId(id);\n  };\n\n  const confirmDelete = () => {\n    if (deletingId) {\n      deleteMutation.mutate(deletingId);\n    }\n  };\n\n  const getChapterTitle = (chapterId: string) => {\n    return chapters.find(c => c.id === chapterId)?.title || \"Unknown Chapter\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <p className=\"font-noto text-muted-foreground\">Loading sections...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"font-myeongjo text-2xl font-bold text-kdrama-ink dark:text-foreground\">\n            Manage Sections\n          </h2>\n          <p className=\"font-noto text-sm text-muted-foreground mt-1\">\n            Organize sections within chapters\n          </p>\n        </div>\n        <Button onClick={handleCreate} data-testid=\"button-create-section\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          New Section\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {sections.map((section) => (\n          <Card key={section.id} data-testid={`card-section-${section.id}`}>\n            {section.thumbnail ? (\n              <div className=\"h-32 w-full overflow-hidden rounded-t-lg\">\n                <img\n                  src={section.thumbnail}\n                  alt={section.title}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            ) : (\n              <div className=\"h-32 w-full bg-gradient-to-br from-kdrama-cream/50 via-kdrama-sakura/50 to-kdrama-lavender/50 flex items-center justify-center rounded-t-lg\">\n                <BookOpen className=\"w-12 h-12 text-kdrama-thread/30\" />\n              </div>\n            )}\n            <CardHeader>\n              <div className=\"flex items-start justify-between gap-2\">\n                <CardTitle className=\"font-myeongjo text-lg\">\n                  {section.title}\n                </CardTitle>\n                <Badge variant=\"outline\" className=\"font-noto shrink-0\">\n                  #{section.order}\n                </Badge>\n              </div>\n              <CardDescription className=\"font-noto text-xs\">\n                {getChapterTitle(section.chapterId)}\n              </CardDescription>\n              {section.mood && (\n                <Badge variant=\"secondary\" className=\"font-noto w-fit mt-2\">\n                  {section.mood}\n                </Badge>\n              )}\n            </CardHeader>\n            <CardContent className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleEdit(section)}\n                data-testid={`button-edit-section-${section.id}`}\n              >\n                <Edit className=\"w-3 h-3 mr-1\" />\n                Edit\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleDelete(section.id)}\n                data-testid={`button-delete-section-${section.id}`}\n              >\n                <Trash2 className=\"w-3 h-3 mr-1\" />\n                Delete\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n\n        {sections.length === 0 && (\n          <Card className=\"col-span-full\">\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <BookOpen className=\"w-12 h-12 text-muted-foreground/30 mb-4\" />\n              <p className=\"font-noto text-muted-foreground mb-4\">No sections yet</p>\n              <Button onClick={handleCreate} variant=\"outline\" size=\"sm\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create your first section\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog open={isCreateOpen || !!editingSection} onOpenChange={(open) => {\n        if (!open) {\n          setIsCreateOpen(false);\n          setEditingSection(null);\n          resetForm();\n        }\n      }}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"font-myeongjo\">\n              {editingSection ? \"Edit Section\" : \"Create New Section\"}\n            </DialogTitle>\n            <DialogDescription className=\"font-noto\">\n              {editingSection ? \"Update section information\" : \"Add a new section to a chapter\"}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">\n                Chapter <span className=\"text-destructive\">*</span>\n              </label>\n              <Select value={formData.chapterId} onValueChange={(value) => setFormData({ ...formData, chapterId: value })}>\n                <SelectTrigger data-testid=\"select-chapter\">\n                  <SelectValue placeholder=\"Select a chapter\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {chapters.map((chapter) => (\n                    <SelectItem key={chapter.id} value={chapter.id}>\n                      {chapter.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">\n                Title <span className=\"text-destructive\">*</span>\n              </label>\n              <Input\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                placeholder=\"Enter section title\"\n                data-testid=\"input-section-title\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"font-noto text-sm font-medium mb-2 block\">Mood</label>\n                <Input\n                  value={formData.mood}\n                  onChange={(e) => setFormData({ ...formData, mood: e.target.value })}\n                  placeholder=\"e.g., Romantic, Melancholic\"\n                  data-testid=\"input-section-mood\"\n                />\n              </div>\n\n              <div>\n                <label className=\"font-noto text-sm font-medium mb-2 block\">Display Order</label>\n                <Input\n                  type=\"number\"\n                  value={formData.order}\n                  onChange={(e) => setFormData({ ...formData, order: e.target.value })}\n                  placeholder=\"0\"\n                  data-testid=\"input-section-order\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Tags</label>\n              <Input\n                value={formData.tags}\n                onChange={(e) => setFormData({ ...formData, tags: e.target.value })}\n                placeholder=\"Comma-separated tags (e.g., spring, destiny, love)\"\n                data-testid=\"input-section-tags\"\n              />\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Thumbnail URL</label>\n              <Input\n                value={formData.thumbnail}\n                onChange={(e) => setFormData({ ...formData, thumbnail: e.target.value })}\n                placeholder=\"https://example.com/image.jpg\"\n                data-testid=\"input-section-thumbnail\"\n              />\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Spotify OST Link</label>\n              <Input\n                value={formData.songUrl}\n                onChange={(e) => setFormData({ ...formData, songUrl: e.target.value })}\n                placeholder=\"https://open.spotify.com/track/...\"\n                data-testid=\"input-section-spotify\"\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsCreateOpen(false);\n                setEditingSection(null);\n                resetForm();\n              }}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={createMutation.isPending || updateMutation.isPending}\n              data-testid=\"button-save-section\"\n            >\n              {createMutation.isPending || updateMutation.isPending ? \"Saving...\" : \"Save Section\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation */}\n      <AlertDialog open={!!deletingId} onOpenChange={(open) => !open && setDeletingId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"font-myeongjo\">Delete Section?</AlertDialogTitle>\n            <AlertDialogDescription className=\"font-noto\">\n              This will permanently delete this section and all its pages. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":15219},"client/src/components/admin/PageManagement.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Plus, Edit, Trash2, FileText } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Page, Section } from \"@shared/schema\";\nimport { MediaToolbar, ImageEmbedDialog, InstagramEmbedDialog, SpotifyEmbedDialog } from \"./MediaEmbedDialogs\";\n\nexport function PageManagement() {\n  const { toast } = useToast();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingPage, setEditingPage] = useState<Page | null>(null);\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n  const [isImageDialogOpen, setIsImageDialogOpen] = useState(false);\n  const [isInstagramDialogOpen, setIsInstagramDialogOpen] = useState(false);\n  const [isSpotifyDialogOpen, setIsSpotifyDialogOpen] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [formData, setFormData] = useState({\n    sectionId: \"\",\n    content: \"\",\n    pageNumber: \"1\",\n  });\n\n  const { data: sections = [] } = useQuery<Section[]>({\n    queryKey: [\"/api/sections\"],\n  });\n\n  const { data: pages = [], isLoading } = useQuery<Page[]>({\n    queryKey: [\"/api/pages\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return apiRequest(\"POST\", \"/api/pages\", {\n        sectionId: data.sectionId,\n        content: data.content,\n        pageNumber: parseInt(data.pageNumber),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      setIsCreateOpen(false);\n      resetForm();\n      toast({\n        title: \"Page created\",\n        description: \"New page has been added successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create page. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: typeof formData }) => {\n      return apiRequest(\"PATCH\", `/api/pages/${id}`, {\n        sectionId: data.sectionId,\n        content: data.content,\n        pageNumber: parseInt(data.pageNumber),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      setEditingPage(null);\n      resetForm();\n      toast({\n        title: \"Page updated\",\n        description: \"Changes have been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update page. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/pages/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      setDeletingId(null);\n      toast({\n        title: \"Page deleted\",\n        description: \"Page has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete page. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      sectionId: \"\",\n      content: \"\",\n      pageNumber: \"1\",\n    });\n  };\n\n  const handleCreate = () => {\n    resetForm();\n    setIsCreateOpen(true);\n  };\n\n  const handleEdit = (page: Page) => {\n    setFormData({\n      sectionId: page.sectionId,\n      content: page.content,\n      pageNumber: page.pageNumber.toString(),\n    });\n    setEditingPage(page);\n  };\n\n  const handleSubmit = () => {\n    if (!formData.sectionId || !formData.content.trim()) {\n      toast({\n        title: \"Validation error\",\n        description: \"Section and content are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingPage) {\n      updateMutation.mutate({ id: editingPage.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    setDeletingId(id);\n  };\n\n  const confirmDelete = () => {\n    if (deletingId) {\n      deleteMutation.mutate(deletingId);\n    }\n  };\n\n  const getSectionTitle = (sectionId: string) => {\n    return sections.find(s => s.id === sectionId)?.title || \"Unknown Section\";\n  };\n\n  const insertContent = (html: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) {\n      setFormData({ ...formData, content: formData.content + \"\\n\\n\" + html });\n      return;\n    }\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const currentContent = formData.content;\n    \n    const beforeCursor = currentContent.substring(0, start);\n    const afterCursor = currentContent.substring(end);\n    \n    const newContent = beforeCursor + \"\\n\\n\" + html + \"\\n\\n\" + afterCursor;\n    setFormData({ ...formData, content: newContent });\n\n    // Set cursor position after inserted content\n    setTimeout(() => {\n      const newCursorPos = start + html.length + 4;\n      textarea.focus();\n      textarea.setSelectionRange(newCursorPos, newCursorPos);\n    }, 0);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <p className=\"font-noto text-muted-foreground\">Loading pages...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"font-myeongjo text-2xl font-bold text-kdrama-ink dark:text-foreground\">\n            Manage Pages\n          </h2>\n          <p className=\"font-noto text-sm text-muted-foreground mt-1\">\n            Create and edit content pages within sections\n          </p>\n        </div>\n        <Button onClick={handleCreate} data-testid=\"button-create-page\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          New Page\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {pages.map((page) => (\n          <Card key={page.id} data-testid={`card-page-${page.id}`}>\n            <CardHeader>\n              <div className=\"flex items-start justify-between gap-2\">\n                <CardTitle className=\"font-myeongjo text-lg\">\n                  Page #{page.pageNumber}\n                </CardTitle>\n                <Badge variant=\"secondary\" className=\"font-noto shrink-0\">\n                  {getSectionTitle(page.sectionId)}\n                </Badge>\n              </div>\n              <CardDescription className=\"font-noto text-xs line-clamp-3 mt-2\">\n                {page.content.substring(0, 150)}...\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleEdit(page)}\n                data-testid={`button-edit-page-${page.id}`}\n              >\n                <Edit className=\"w-3 h-3 mr-1\" />\n                Edit\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleDelete(page.id)}\n                data-testid={`button-delete-page-${page.id}`}\n              >\n                <Trash2 className=\"w-3 h-3 mr-1\" />\n                Delete\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n\n        {pages.length === 0 && (\n          <Card className=\"col-span-full\">\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <FileText className=\"w-12 h-12 text-muted-foreground/30 mb-4\" />\n              <p className=\"font-noto text-muted-foreground mb-4\">No pages yet</p>\n              <Button onClick={handleCreate} variant=\"outline\" size=\"sm\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create your first page\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog open={isCreateOpen || !!editingPage} onOpenChange={(open) => {\n        if (!open) {\n          setIsCreateOpen(false);\n          setEditingPage(null);\n          resetForm();\n        }\n      }}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"font-myeongjo\">\n              {editingPage ? \"Edit Page\" : \"Create New Page\"}\n            </DialogTitle>\n            <DialogDescription className=\"font-noto\">\n              {editingPage ? \"Update page content\" : \"Add a new page to a section\"}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">\n                Section <span className=\"text-destructive\">*</span>\n              </label>\n              <Select value={formData.sectionId} onValueChange={(value) => setFormData({ ...formData, sectionId: value })}>\n                <SelectTrigger data-testid=\"select-section\">\n                  <SelectValue placeholder=\"Select a section\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {sections.map((section) => (\n                    <SelectItem key={section.id} value={section.id}>\n                      {section.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Page Number</label>\n              <Input\n                type=\"number\"\n                value={formData.pageNumber}\n                onChange={(e) => setFormData({ ...formData, pageNumber: e.target.value })}\n                placeholder=\"1\"\n                data-testid=\"input-page-number\"\n              />\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">\n                Content <span className=\"text-destructive\">*</span>\n              </label>\n              <MediaToolbar\n                onInsertImage={() => setIsImageDialogOpen(true)}\n                onInsertInstagram={() => setIsInstagramDialogOpen(true)}\n                onInsertSpotify={() => setIsSpotifyDialogOpen(true)}\n              />\n              <Textarea\n                ref={textareaRef}\n                value={formData.content}\n                onChange={(e) => setFormData({ ...formData, content: e.target.value })}\n                placeholder=\"Enter page content...\"\n                rows={12}\n                className=\"font-mono\"\n                data-testid=\"input-page-content\"\n              />\n              <p className=\"font-noto text-xs text-muted-foreground mt-1\">\n                Use the toolbar above to easily add images and videos, or write your own HTML/markdown\n              </p>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsCreateOpen(false);\n                setEditingPage(null);\n                resetForm();\n              }}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={createMutation.isPending || updateMutation.isPending}\n              data-testid=\"button-save-page\"\n            >\n              {createMutation.isPending || updateMutation.isPending ? \"Saving...\" : \"Save Page\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation */}\n      <AlertDialog open={!!deletingId} onOpenChange={(open) => !open && setDeletingId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"font-myeongjo\">Delete Page?</AlertDialogTitle>\n            <AlertDialogDescription className=\"font-noto\">\n              This will permanently delete this page. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Media Embed Dialogs */}\n      <ImageEmbedDialog\n        open={isImageDialogOpen}\n        onOpenChange={setIsImageDialogOpen}\n        onInsert={insertContent}\n      />\n      <InstagramEmbedDialog\n        open={isInstagramDialogOpen}\n        onOpenChange={setIsInstagramDialogOpen}\n        onInsert={insertContent}\n      />\n      <SpotifyEmbedDialog\n        open={isSpotifyDialogOpen}\n        onOpenChange={setIsSpotifyDialogOpen}\n        sectionId={formData.sectionId || undefined}\n      />\n    </div>\n  );\n}\n","size_bytes":14003},"client/src/components/admin/AnalyticsDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from \"recharts\";\nimport { Book, BookOpen, FileText, Users, TrendingUp, Eye } from \"lucide-react\";\n\ninterface AnalyticsData {\n  overview: {\n    totalChapters: number;\n    totalSections: number;\n    totalPages: number;\n    totalReaders: number;\n  };\n  chapterCompletion: Array<{\n    chapterId: string;\n    chapterTitle: string;\n    totalSections: number;\n    completedCount: number;\n    completionRate: number;\n  }>;\n  sectionViews: Array<{\n    sectionId: string;\n    sectionTitle: string;\n    chapterTitle: string;\n    viewCount: number;\n    avgDuration: number;\n  }>;\n  activityTimeline: Array<{\n    date: string;\n    viewCount: number;\n    uniqueReaders: number;\n  }>;\n}\n\nexport function AnalyticsDashboard() {\n  const { data: analytics, isLoading } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/analytics/dashboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <p className=\"font-noto text-muted-foreground\">Loading analytics...</p>\n      </div>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <p className=\"font-noto text-muted-foreground\">No analytics data available</p>\n      </div>\n    );\n  }\n\n  const CHART_COLORS = ['#E63946', '#F4A6B3', '#C7B8EA', '#A8DADC', '#457B9D'];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"font-myeongjo text-2xl font-bold text-kdrama-ink dark:text-foreground\">\n          Analytics Dashboard\n        </h2>\n        <p className=\"font-noto text-sm text-muted-foreground mt-1\">\n          View engagement metrics across all chapters and sections\n        </p>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-1 space-y-0 pb-2\">\n            <CardTitle className=\"font-noto text-sm font-medium\">Total Chapters</CardTitle>\n            <Book className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"font-myeongjo text-2xl font-bold text-kdrama-thread\">\n              {analytics.overview.totalChapters}\n            </div>\n            <p className=\"font-noto text-xs text-muted-foreground\">\n              Published chapters\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-1 space-y-0 pb-2\">\n            <CardTitle className=\"font-noto text-sm font-medium\">Total Sections</CardTitle>\n            <BookOpen className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"font-myeongjo text-2xl font-bold text-kdrama-thread\">\n              {analytics.overview.totalSections}\n            </div>\n            <p className=\"font-noto text-xs text-muted-foreground\">\n              Content sections\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-1 space-y-0 pb-2\">\n            <CardTitle className=\"font-noto text-sm font-medium\">Total Pages</CardTitle>\n            <FileText className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"font-myeongjo text-2xl font-bold text-kdrama-thread\">\n              {analytics.overview.totalPages}\n            </div>\n            <p className=\"font-noto text-xs text-muted-foreground\">\n              Content pages\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-1 space-y-0 pb-2\">\n            <CardTitle className=\"font-noto text-sm font-medium\">Total Readers</CardTitle>\n            <Users className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"font-myeongjo text-2xl font-bold text-kdrama-thread\">\n              {analytics.overview.totalReaders}\n            </div>\n            <p className=\"font-noto text-xs text-muted-foreground\">\n              Active users\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Chapter Completion Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-myeongjo flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5 text-kdrama-thread\" />\n            Chapter Completion Rates\n          </CardTitle>\n          <CardDescription className=\"font-noto\">\n            Percentage of readers who completed each chapter\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={analytics.chapterCompletion}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis\n                dataKey=\"chapterTitle\"\n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n                tickLine={false}\n                axisLine={false}\n              />\n              <YAxis\n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n                tickLine={false}\n                axisLine={false}\n                tickFormatter={(value) => `${value}%`}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"hsl(var(--card))\",\n                  border: \"1px solid hsl(var(--border))\",\n                  borderRadius: \"6px\",\n                }}\n                labelStyle={{ fontFamily: \"Nanum Myeongjo\" }}\n                formatter={(value: number) => [`${value.toFixed(1)}%`, \"Completion Rate\"]}\n              />\n              <Bar dataKey=\"completionRate\" fill=\"#E63946\" radius={[4, 4, 0, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Section Views Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-myeongjo flex items-center gap-2\">\n            <Eye className=\"w-5 h-5 text-kdrama-thread\" />\n            Section Engagement by Views\n          </CardTitle>\n          <CardDescription className=\"font-noto\">\n            Most-read sections across all chapters\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {analytics.sectionViews.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart\n                data={analytics.sectionViews.slice(0, 10)}\n                layout=\"vertical\"\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                <XAxis\n                  type=\"number\"\n                  stroke=\"hsl(var(--muted-foreground))\"\n                  fontSize={12}\n                  tickLine={false}\n                  axisLine={false}\n                />\n                <YAxis\n                  type=\"category\"\n                  dataKey=\"sectionTitle\"\n                  stroke=\"hsl(var(--muted-foreground))\"\n                  fontSize={12}\n                  tickLine={false}\n                  axisLine={false}\n                  width={150}\n                />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"hsl(var(--card))\",\n                    border: \"1px solid hsl(var(--border))\",\n                    borderRadius: \"6px\",\n                  }}\n                  labelStyle={{ fontFamily: \"Nanum Myeongjo\" }}\n                  formatter={(value: number, name: string) => {\n                    if (name === \"viewCount\") return [value, \"Views\"];\n                    return [value, name];\n                  }}\n                  labelFormatter={(label: string, payload: any[]) => {\n                    const item = payload[0]?.payload;\n                    if (item) {\n                      return `${item.sectionTitle} (${item.chapterTitle})`;\n                    }\n                    return label;\n                  }}\n                />\n                <Bar dataKey=\"viewCount\" fill=\"#C7B8EA\" radius={[0, 4, 4, 0]}>\n                  {analytics.sectionViews.slice(0, 10).map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          ) : (\n            <p className=\"font-noto text-sm text-muted-foreground text-center py-8\">\n              No section views yet\n            </p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Activity Timeline Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-myeongjo flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5 text-kdrama-thread\" />\n            Reading Activity Over Time\n          </CardTitle>\n          <CardDescription className=\"font-noto\">\n            Daily reading patterns for all content\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={analytics.activityTimeline}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis\n                dataKey=\"date\"\n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n                tickLine={false}\n                axisLine={false}\n              />\n              <YAxis\n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n                tickLine={false}\n                axisLine={false}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"hsl(var(--card))\",\n                  border: \"1px solid hsl(var(--border))\",\n                  borderRadius: \"6px\",\n                }}\n                labelStyle={{ fontFamily: \"Nanum Myeongjo\" }}\n              />\n              <Legend wrapperStyle={{ fontFamily: \"Noto Sans KR\" }} />\n              <Line\n                type=\"monotone\"\n                dataKey=\"viewCount\"\n                stroke=\"#E63946\"\n                strokeWidth={2}\n                name=\"Page Views\"\n                dot={{ fill: \"#E63946\" }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"uniqueReaders\"\n                stroke=\"#C7B8EA\"\n                strokeWidth={2}\n                name=\"Unique Readers\"\n                dot={{ fill: \"#C7B8EA\" }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11056},"client/src/components/admin/ContentManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Plus, Pencil, Trash2, GripVertical, FileText, ChevronDown, ChevronRight, ArrowUp, ArrowDown } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Section, Page, Chapter } from \"@shared/schema\";\nimport { TiptapEditor } from \"@/components/TiptapEditor\";\n\nexport function ContentManagement() {\n  const { toast } = useToast();\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set());\n  const [editingSection, setEditingSection] = useState<Section | null>(null);\n  const [editingPage, setEditingPage] = useState<{ page: Page; sectionId: string } | null>(null);\n  const [creatingSection, setCreatingSection] = useState(false);\n  const [creatingPageFor, setCreatingPageFor] = useState<string | null>(null);\n\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/chapters\"],\n  });\n\n  const { data: sections = [] } = useQuery<Section[]>({\n    queryKey: [\"/api/sections\"],\n  });\n\n  const { data: allPages = [] } = useQuery<Page[]>({\n    queryKey: [\"/api/pages\"],\n  });\n\n  const toggleSection = (sectionId: string) => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(sectionId)) {\n      newExpanded.delete(sectionId);\n    } else {\n      newExpanded.add(sectionId);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  const getSectionPages = (sectionId: string) => {\n    return allPages.filter(p => p.sectionId === sectionId).sort((a, b) => a.pageNumber - b.pageNumber);\n  };\n\n  const deleteSectionMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/sections/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      toast({ title: \"Section deleted successfully\" });\n    },\n  });\n\n  const deletePageMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/pages/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      toast({ title: \"Page deleted successfully\" });\n    },\n  });\n\n  const reorderSectionsMutation = useMutation({\n    mutationFn: (sectionOrders: { id: string; order: number }[]) =>\n      apiRequest(\"PATCH\", \"/api/sections/reorder\", { sectionOrders }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      toast({ title: \"Section order updated\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to reorder sections\", \n        description: error?.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const moveSectionUp = (section: Section) => {\n    const chapterSections = sections\n      .filter(s => s.chapterId === section.chapterId)\n      .sort((a, b) => a.order - b.order);\n    \n    const currentIndex = chapterSections.findIndex(s => s.id === section.id);\n    if (currentIndex <= 0) return;\n\n    const sectionOrders = chapterSections.map((s, idx) => {\n      if (idx === currentIndex - 1) {\n        return { id: s.id, order: section.order };\n      } else if (idx === currentIndex) {\n        return { id: s.id, order: chapterSections[currentIndex - 1].order };\n      }\n      return { id: s.id, order: s.order };\n    });\n\n    reorderSectionsMutation.mutate(sectionOrders);\n  };\n\n  const moveSectionDown = (section: Section) => {\n    const chapterSections = sections\n      .filter(s => s.chapterId === section.chapterId)\n      .sort((a, b) => a.order - b.order);\n    \n    const currentIndex = chapterSections.findIndex(s => s.id === section.id);\n    if (currentIndex === -1 || currentIndex >= chapterSections.length - 1) return;\n\n    const sectionOrders = chapterSections.map((s, idx) => {\n      if (idx === currentIndex) {\n        return { id: s.id, order: chapterSections[currentIndex + 1].order };\n      } else if (idx === currentIndex + 1) {\n        return { id: s.id, order: section.order };\n      }\n      return { id: s.id, order: s.order };\n    });\n\n    reorderSectionsMutation.mutate(sectionOrders);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"font-myeongjo text-2xl font-bold text-kdrama-ink dark:text-foreground\">\n            Content Management\n          </h2>\n          <p className=\"font-noto text-sm text-muted-foreground mt-1\">\n            Manage sections and their pages in one place\n          </p>\n        </div>\n        <Button onClick={() => setCreatingSection(true)} data-testid=\"button-create-section\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Section\n        </Button>\n      </div>\n\n      {/* Sections List with Nested Pages */}\n      <div className=\"space-y-4\">\n        {sections.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex items-center justify-center py-12\">\n              <p className=\"font-noto text-muted-foreground\">No sections yet. Create your first section to get started.</p>\n            </CardContent>\n          </Card>\n        ) : (\n          sections.map((section) => {\n            const chapter = chapters.find(c => c.id === section.chapterId);\n            const sectionPages = getSectionPages(section.id);\n            const isExpanded = expandedSections.has(section.id);\n\n            return (\n              <Card key={section.id} data-testid={`card-section-${section.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"shrink-0 mt-1\"\n                        onClick={() => toggleSection(section.id)}\n                        data-testid={`button-toggle-${section.id}`}\n                      >\n                        {isExpanded ? <ChevronDown className=\"w-4 h-4\" /> : <ChevronRight className=\"w-4 h-4\" />}\n                      </Button>\n                      <div className=\"flex-1 min-w-0\">\n                        <CardTitle className=\"font-myeongjo text-lg\">{section.title}</CardTitle>\n                        <CardDescription className=\"font-noto mt-1\">\n                          {chapter?.title} • {sectionPages.length} page{sectionPages.length !== 1 ? 's' : ''}\n                        </CardDescription>\n                        {((section.mood && section.mood.length > 0) || (section.tags && section.tags.length > 0)) && (\n                          <div className=\"flex flex-wrap gap-2 mt-2\">\n                            {section.mood?.map((mood, idx) => (\n                              <Badge key={`mood-${idx}`} variant=\"secondary\" className=\"font-noto text-xs\">\n                                {mood}\n                              </Badge>\n                            ))}\n                            {section.tags?.map((tag) => (\n                              <Badge key={tag} variant=\"outline\" className=\"font-noto text-xs\">\n                                #{tag}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2 shrink-0\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => moveSectionUp(section)}\n                        disabled={sections.filter(s => s.chapterId === section.chapterId).sort((a, b) => a.order - b.order)[0]?.id === section.id}\n                        data-testid={`button-move-up-section-${section.id}`}\n                      >\n                        <ArrowUp className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => moveSectionDown(section)}\n                        disabled={sections.filter(s => s.chapterId === section.chapterId).sort((a, b) => a.order - b.order).slice(-1)[0]?.id === section.id}\n                        data-testid={`button-move-down-section-${section.id}`}\n                      >\n                        <ArrowDown className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => setEditingSection(section)}\n                        data-testid={`button-edit-section-${section.id}`}\n                      >\n                        <Pencil className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => {\n                          if (confirm(\"Are you sure you want to delete this section and all its pages?\")) {\n                            deleteSectionMutation.mutate(section.id);\n                          }\n                        }}\n                        data-testid={`button-delete-section-${section.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                {isExpanded && (\n                  <CardContent className=\"border-t pt-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-noto text-sm font-medium\">Pages</h4>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setCreatingPageFor(section.id)}\n                          data-testid={`button-add-page-${section.id}`}\n                        >\n                          <Plus className=\"w-3 h-3 mr-1\" />\n                          Add Page\n                        </Button>\n                      </div>\n\n                      {sectionPages.length === 0 ? (\n                        <p className=\"font-noto text-sm text-muted-foreground py-4 text-center\">\n                          No pages yet. Add the first page to this section.\n                        </p>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          {sectionPages.map((page) => (\n                            <div\n                              key={page.id}\n                              className=\"flex items-center gap-3 p-3 rounded-md border bg-card hover-elevate\"\n                              data-testid={`row-page-${page.id}`}\n                            >\n                              <GripVertical className=\"w-4 h-4 text-muted-foreground shrink-0\" />\n                              <FileText className=\"w-4 h-4 text-muted-foreground shrink-0\" />\n                              <div className=\"flex-1 min-w-0\">\n                                <p className=\"font-noto text-sm font-medium\">Page {page.pageNumber}</p>\n                                <p className=\"font-noto text-xs text-muted-foreground truncate\">\n                                  {page.content.substring(0, 100)}...\n                                </p>\n                              </div>\n                              <div className=\"flex items-center gap-1 shrink-0\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={() => setEditingPage({ page, sectionId: section.id })}\n                                  data-testid={`button-edit-page-${page.id}`}\n                                >\n                                  <Pencil className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={() => {\n                                    if (confirm(\"Are you sure you want to delete this page?\")) {\n                                      deletePageMutation.mutate(page.id);\n                                    }\n                                  }}\n                                  data-testid={`button-delete-page-${page.id}`}\n                                >\n                                  <Trash2 className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                )}\n              </Card>\n            );\n          })\n        )}\n      </div>\n\n      {/* Section Edit/Create Dialog */}\n      <SectionDialog\n        section={editingSection}\n        chapters={chapters}\n        open={editingSection !== null || creatingSection}\n        onClose={() => {\n          setEditingSection(null);\n          setCreatingSection(false);\n        }}\n      />\n\n      {/* Page Edit/Create Dialog */}\n      <PageDialog\n        page={editingPage?.page || null}\n        sectionId={creatingPageFor || editingPage?.sectionId || \"\"}\n        open={editingPage !== null || creatingPageFor !== null}\n        onClose={() => {\n          setEditingPage(null);\n          setCreatingPageFor(null);\n        }}\n      />\n    </div>\n  );\n}\n\n// Section Dialog Component\nfunction SectionDialog({ section, chapters, open, onClose }: {\n  section: Section | null;\n  chapters: Chapter[];\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    chapterId: section?.chapterId || \"\",\n    title: section?.title || \"\",\n    mood: section?.mood?.join(\", \") || \"\",\n    tags: section?.tags?.join(\", \") || \"\",\n    thumbnail: section?.thumbnail || \"\",\n    songUrl: section?.songUrl || \"\",\n    order: section?.order || 1,\n  });\n\n  // Update form when section prop changes\n  useEffect(() => {\n    setFormData({\n      chapterId: section?.chapterId || \"\",\n      title: section?.title || \"\",\n      mood: section?.mood?.join(\", \") || \"\",\n      tags: section?.tags?.join(\", \") || \"\",\n      thumbnail: section?.thumbnail || \"\",\n      songUrl: section?.songUrl || \"\",\n      order: section?.order || 1,\n    });\n  }, [section]);\n\n  const saveMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (section) {\n        return apiRequest(\"PATCH\", `/api/sections/${section.id}`, data);\n      }\n      return apiRequest(\"POST\", \"/api/sections\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      toast({ title: section ? \"Section updated\" : \"Section created\" });\n      onClose();\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!formData.title.trim()) {\n      toast({ \n        title: \"Validation Error\", \n        description: \"Title is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (!formData.chapterId) {\n      toast({ \n        title: \"Validation Error\", \n        description: \"Chapter is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const moodArray = formData.mood ? formData.mood.split(\",\").map(t => t.trim()).filter(Boolean) : [];\n    const tagsArray = formData.tags ? formData.tags.split(\",\").map(t => t.trim()).filter(Boolean) : [];\n    \n    const payload = {\n      chapterId: formData.chapterId,\n      title: formData.title,\n      order: formData.order,\n      tags: tagsArray.length > 0 ? tagsArray : null,\n      mood: moodArray.length > 0 ? moodArray : null,\n      thumbnail: formData.thumbnail.trim() || null,\n      songUrl: formData.songUrl.trim() || null,\n    };\n    \n    console.log(\"Payload mood:\", payload.mood, \"Type:\", typeof payload.mood, \"IsArray:\", Array.isArray(payload.mood));\n    saveMutation.mutate(payload);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"font-myeongjo\">\n            {section ? \"Edit Section\" : \"Create New Section\"}\n          </DialogTitle>\n          <DialogDescription className=\"font-noto\">\n            {section ? \"Update section details\" : \"Add a new section to a chapter\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"chapter\">Chapter *</Label>\n            <Select\n              value={formData.chapterId}\n              onValueChange={(value) => setFormData({ ...formData, chapterId: value })}\n            >\n              <SelectTrigger id=\"chapter\">\n                <SelectValue placeholder=\"Select a chapter\" />\n              </SelectTrigger>\n              <SelectContent>\n                {chapters.map((chapter) => (\n                  <SelectItem key={chapter.id} value={chapter.id}>\n                    {chapter.title}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title *</Label>\n            <TiptapEditor\n              value={formData.title}\n              onChange={(value) => setFormData({ ...formData, title: value })}\n              placeholder=\"Section title\"\n              singleLine={true}\n              className=\"min-h-[60px]\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"mood\">Mood (comma-separated)</Label>\n            <TiptapEditor\n              value={formData.mood}\n              onChange={(value) => setFormData({ ...formData, mood: value })}\n              placeholder=\"Nostalgic, Hopeful, Romantic\"\n              singleLine={true}\n              className=\"min-h-[60px]\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"order\">Order *</Label>\n            <Input\n              id=\"order\"\n              type=\"number\"\n              value={formData.order}\n              onChange={(e) => setFormData({ ...formData, order: parseInt(e.target.value) || 1 })}\n              min={1}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n            <TiptapEditor\n              value={formData.tags}\n              onChange={(value) => setFormData({ ...formData, tags: value })}\n              placeholder=\"love, drama, family\"\n              singleLine={true}\n              className=\"min-h-[60px]\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"songUrl\">Song URL (Spotify/YouTube)</Label>\n            <Input\n              id=\"songUrl\"\n              value={formData.songUrl}\n              onChange={(e) => setFormData({ ...formData, songUrl: e.target.value })}\n              placeholder=\"https://open.spotify.com/...\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"thumbnail\">Thumbnail URL</Label>\n            <Input\n              id=\"thumbnail\"\n              value={formData.thumbnail}\n              onChange={(e) => setFormData({ ...formData, thumbnail: e.target.value })}\n              placeholder=\"https://...\"\n            />\n          </div>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={saveMutation.isPending}>\n              {saveMutation.isPending ? \"Saving...\" : section ? \"Update\" : \"Create\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Page Dialog Component\nfunction PageDialog({ page, sectionId, open, onClose }: {\n  page: Page | null;\n  sectionId: string;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    content: page?.content || \"\",\n    pageNumber: page?.pageNumber || 1,\n  });\n\n  const saveMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (page) {\n        return apiRequest(\"PATCH\", `/api/pages/${page.id}`, data);\n      }\n      return apiRequest(\"POST\", \"/api/pages\", { ...data, sectionId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      toast({ title: page ? \"Page updated\" : \"Page created\" });\n      onClose();\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    saveMutation.mutate(formData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"font-myeongjo\">\n            {page ? \"Edit Page\" : \"Create New Page\"}\n          </DialogTitle>\n          <DialogDescription className=\"font-noto\">\n            {page ? \"Update page content\" : \"Add a new page to this section\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"pageNumber\">Page Number *</Label>\n            <Input\n              id=\"pageNumber\"\n              type=\"number\"\n              value={formData.pageNumber}\n              onChange={(e) => setFormData({ ...formData, pageNumber: parseInt(e.target.value) || 1 })}\n              min={1}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Content *</Label>\n            <Textarea\n              id=\"content\"\n              value={formData.content}\n              onChange={(e) => setFormData({ ...formData, content: e.target.value })}\n              placeholder=\"Page content... You can use [embed:URL] to embed images or Instagram posts.\"\n              className=\"min-h-[300px] font-noto\"\n              required\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Tip: Use [embed:https://...] to embed images or Instagram posts\n            </p>\n          </div>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={saveMutation.isPending}>\n              {saveMutation.isPending ? \"Saving...\" : page ? \"Update\" : \"Create\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":23612},"client/src/components/admin/ActivityLog.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Clock, User, BookOpen, FileText, Filter } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface ActivityLogEntry {\n  id: string;\n  timestamp: string;\n  event_type: string;\n  duration: number | null;\n  username: string;\n  chapter_title: string;\n  section_title: string;\n  page_number: number;\n}\n\nexport function ActivityLog() {\n  const [userFilter, setUserFilter] = useState<string>(\"all\");\n  const [eventTypeFilter, setEventTypeFilter] = useState<string>(\"all\");\n  const [chapterFilter, setChapterFilter] = useState<string>(\"all\");\n\n  const queryParams = new URLSearchParams();\n  if (userFilter && userFilter !== \"all\") queryParams.set(\"userId\", userFilter);\n  if (eventTypeFilter && eventTypeFilter !== \"all\") queryParams.set(\"eventType\", eventTypeFilter);\n  if (chapterFilter && chapterFilter !== \"all\") queryParams.set(\"chapterId\", chapterFilter);\n\n  const { data: activityLog = [], isLoading } = useQuery<ActivityLogEntry[]>({\n    queryKey: [\"/api/analytics/activity-log\", userFilter, eventTypeFilter, chapterFilter],\n    queryFn: async () => {\n      const url = `/api/analytics/activity-log?${queryParams.toString()}`;\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(\"Failed to fetch activity log\");\n      return response.json();\n    },\n  });\n\n  const { data: users = [] } = useQuery<Array<{ id: string; username: string }>>({\n    queryKey: [\"/api/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/users\");\n      if (!response.ok) return [];\n      return response.json();\n    },\n  });\n\n  const { data: chapters = [] } = useQuery<Array<{ id: string; title: string }>>({\n    queryKey: [\"/api/chapters\"],\n  });\n\n  const formatDuration = (ms: number | null) => {\n    if (!ms) return \"N/A\";\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    \n    if (minutes > 0) {\n      return `${minutes}m ${remainingSeconds}s`;\n    }\n    return `${seconds}s`;\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    try {\n      const date = new Date(timestamp);\n      return format(date, \"MMM d, yyyy h:mm:ss a\");\n    } catch {\n      return timestamp;\n    }\n  };\n\n  const getEventBadgeVariant = (eventType: string) => {\n    switch (eventType) {\n      case \"page_view\":\n        return \"default\";\n      case \"section_completed\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const clearFilters = () => {\n    setUserFilter(\"all\");\n    setEventTypeFilter(\"all\");\n    setChapterFilter(\"all\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"font-myeongjo text-2xl font-bold text-kdrama-ink dark:text-foreground\">\n          Activity Log\n        </h2>\n        <p className=\"font-noto text-sm text-muted-foreground mt-1\">\n          Detailed reading activity with timestamps and durations\n        </p>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-myeongjo flex items-center gap-2 text-base\">\n            <Filter className=\"w-4 h-4\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">User</label>\n              <Select value={userFilter} onValueChange={setUserFilter}>\n                <SelectTrigger data-testid=\"select-user-filter\">\n                  <SelectValue placeholder=\"All users\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All users</SelectItem>\n                  {users.map((user) => (\n                    <SelectItem key={user.id} value={user.id}>\n                      {user.username}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Event Type</label>\n              <Select value={eventTypeFilter} onValueChange={setEventTypeFilter}>\n                <SelectTrigger data-testid=\"select-event-type-filter\">\n                  <SelectValue placeholder=\"All events\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All events</SelectItem>\n                  <SelectItem value=\"page_view\">Page View</SelectItem>\n                  <SelectItem value=\"section_completed\">Section Completed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"font-noto text-sm font-medium mb-2 block\">Chapter</label>\n              <Select value={chapterFilter} onValueChange={setChapterFilter}>\n                <SelectTrigger data-testid=\"select-chapter-filter\">\n                  <SelectValue placeholder=\"All chapters\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All chapters</SelectItem>\n                  {chapters.map((chapter) => (\n                    <SelectItem key={chapter.id} value={chapter.id}>\n                      {chapter.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {(userFilter !== \"all\" || eventTypeFilter !== \"all\" || chapterFilter !== \"all\") && (\n            <div className=\"mt-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={clearFilters}\n                data-testid=\"button-clear-filters\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Activity Log Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <p className=\"font-noto text-muted-foreground\">Loading activity log...</p>\n            </div>\n          ) : activityLog.length === 0 ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <p className=\"font-noto text-muted-foreground\">No activity found</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50 border-b\">\n                  <tr>\n                    <th className=\"font-noto text-left text-sm font-medium px-4 py-3\">Timestamp</th>\n                    <th className=\"font-noto text-left text-sm font-medium px-4 py-3\">User</th>\n                    <th className=\"font-noto text-left text-sm font-medium px-4 py-3\">Chapter</th>\n                    <th className=\"font-noto text-left text-sm font-medium px-4 py-3\">Section</th>\n                    <th className=\"font-noto text-left text-sm font-medium px-4 py-3\">Page</th>\n                    <th className=\"font-noto text-left text-sm font-medium px-4 py-3\">Duration</th>\n                    <th className=\"font-noto text-left text-sm font-medium px-4 py-3\">Event</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y\">\n                  {activityLog.map((entry) => (\n                    <tr key={entry.id} className=\"hover-elevate\" data-testid={`row-activity-${entry.id}`}>\n                      <td className=\"font-noto text-sm px-4 py-3\" data-testid={`text-timestamp-${entry.id}`}>\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"w-3 h-3 text-muted-foreground\" />\n                          {formatTimestamp(entry.timestamp)}\n                        </div>\n                      </td>\n                      <td className=\"font-noto text-sm px-4 py-3\" data-testid={`text-username-${entry.id}`}>\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"w-3 h-3 text-muted-foreground\" />\n                          {entry.username}\n                        </div>\n                      </td>\n                      <td className=\"font-myeongjo text-sm px-4 py-3 max-w-xs truncate\" data-testid={`text-chapter-${entry.id}`}>\n                        {entry.chapter_title}\n                      </td>\n                      <td className=\"font-myeongjo text-sm px-4 py-3 max-w-xs truncate\" data-testid={`text-section-${entry.id}`}>\n                        {entry.section_title}\n                      </td>\n                      <td className=\"font-noto text-sm px-4 py-3\" data-testid={`text-page-${entry.id}`}>\n                        <div className=\"flex items-center gap-2\">\n                          <FileText className=\"w-3 h-3 text-muted-foreground\" />\n                          Page {entry.page_number}\n                        </div>\n                      </td>\n                      <td className=\"font-noto text-sm px-4 py-3 text-kdrama-thread font-medium\" data-testid={`text-duration-${entry.id}`}>\n                        {formatDuration(entry.duration)}\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        <Badge variant={getEventBadgeVariant(entry.event_type)} className=\"font-noto text-xs\" data-testid={`badge-event-${entry.id}`}>\n                          {entry.event_type === \"page_view\" ? \"Page View\" : \"Section Completed\"}\n                        </Badge>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {activityLog.length > 0 && (\n        <p className=\"font-noto text-xs text-muted-foreground text-center\">\n          Showing {activityLog.length} most recent activities (max 1000)\n        </p>\n      )}\n    </div>\n  );\n}\n","size_bytes":10334},"client/src/components/RedStringProgress.tsx":{"content":"import { useEffect, useState, useRef } from \"react\";\n\ninterface RedStringProgressProps {\n  currentPage: number;\n  totalPages: number;\n  sectionTitle?: string;\n  initialProgress?: number;\n  className?: string;\n}\n\nexport function RedStringProgress({ \n  currentPage, \n  totalPages, \n  initialProgress = 0,\n  className = \"\" \n}: RedStringProgressProps) {\n  const [fillProgress, setFillProgress] = useState(0);\n  const [pathLength, setPathLength] = useState(1000);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const appliedInitialProgressRef = useRef<number | null>(null);\n  const previousProgressRef = useRef(0);\n  \n  const pathRef = useRef<SVGPathElement>(null);\n\n  // Detect reduced motion preference\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(mediaQuery.matches);\n    \n    const handler = (e: MediaQueryListEvent) => setPrefersReducedMotion(e.matches);\n    mediaQuery.addEventListener('change', handler);\n    return () => mediaQuery.removeEventListener('change', handler);\n  }, []);\n\n  // Initialize from saved progress\n  useEffect(() => {\n    if (appliedInitialProgressRef.current !== initialProgress) {\n      if (initialProgress > 0) {\n        setFillProgress(initialProgress);\n        previousProgressRef.current = initialProgress;\n      }\n      appliedInitialProgressRef.current = initialProgress;\n      setIsInitialized(true);\n    }\n  }, [initialProgress]);\n\n  // Calculate progress percentage\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    const progress = totalPages > 0 ? (currentPage / totalPages) * 100 : 0;\n    const clampedProgress = Math.min(100, Math.max(0, progress));\n    \n    if (clampedProgress === previousProgressRef.current) return;\n    \n    setFillProgress(clampedProgress);\n    previousProgressRef.current = clampedProgress;\n  }, [currentPage, totalPages, isInitialized]);\n\n  // Calculate actual path length for accurate fill animation\n  useEffect(() => {\n    if (pathRef.current) {\n      const length = pathRef.current.getTotalLength();\n      setPathLength(length);\n    }\n  }, []);\n\n  // Wavy string with three vertical teardrop loops rising from baseline\n  const stringPath = `\n    M 20,65\n    Q 60,67 100,65\n    Q 140,63 170,65\n    \n    Q 172,62 174,55\n    Q 176,45 178,35\n    Q 180,20 185,10\n    Q 190,-5 198,-12\n    Q 206,-19 216,-20\n    Q 226,-21 236,-17\n    Q 246,-13 254,-4\n    Q 262,5 267,17\n    Q 272,29 274,42\n    Q 276,55 274,68\n    Q 272,81 266,91\n    Q 260,101 250,106\n    Q 240,111 228,110\n    Q 216,109 206,102\n    Q 196,95 189,84\n    Q 182,73 178,60\n    Q 174,47 172,34\n    Q 170,21 172,10\n    Q 174,-1 180,-10\n    Q 186,-19 194,-24\n    Q 202,-29 212,-30\n    Q 222,-31 232,-27\n    Q 242,-23 250,-15\n    Q 258,-7 263,3\n    Q 268,13 270,25\n    Q 272,37 271,49\n    Q 270,61 265,71\n    Q 260,81 252,88\n    Q 244,95 250,80\n    Q 260,68 280,65\n    Q 330,65 380,65\n    Q 430,65 470,65\n    Q 472,65 474,60\n    \n    Q 476,50 478,40\n    Q 480,25 485,15\n    Q 490,8 498,3\n    Q 506,0 516,0\n    Q 526,0 536,6\n    Q 546,14 554,24\n    Q 562,34 567,46\n    Q 572,58 574,71\n    Q 576,84 574,96\n    Q 572,108 566,117\n    Q 560,126 550,130\n    Q 540,134 528,132\n    Q 516,130 506,123\n    Q 496,116 489,105\n    Q 482,94 478,81\n    Q 474,68 474,55\n    Q 474,42 478,31\n    Q 482,20 490,12\n    Q 498,4 508,1\n    Q 518,0 528,2\n    Q 538,4 548,10\n    Q 558,16 565,25\n    Q 572,34 576,45\n    Q 580,56 586,65\n    Q 600,65 650,65\n    Q 650,65 690,65\n    Q 730,65 760,65\n    Q 762,65 764,60\n    \n    Q 766,50 768,40\n    Q 770,28 775,18\n    Q 780,4 788,-3\n    Q 796,-10 806,-12\n    Q 816,-12 826,-8\n    Q 836,0 844,9\n    Q 852,18 857,30\n    Q 862,42 864,55\n    Q 866,68 864,81\n    Q 862,94 856,104\n    Q 850,114 840,119\n    Q 830,124 818,123\n    Q 806,122 796,115\n    Q 786,108 779,97\n    Q 772,86 768,73\n    Q 764,60 764,47\n    Q 764,34 768,23\n    Q 772,12 780,4\n    Q 788,-4 798,-8\n    Q 808,-12 818,-11\n    Q 828,-10 838,-4\n    Q 848,2 855,11\n    Q 862,20 866,31\n    Q 870,42 876,54\n    Q 882,60 890,65\n    Q 920,65 960,65\n    Q 980,65 1000,65\n  `;\n\n  // Bow tie knot with closed hollow loops matching reference image\n  const bowTieKnot = `\n    M 1000,65\n    Q 1005,58 1012,50\n    Q 1020,42 1030,38\n    Q 1040,34 1050,36\n    Q 1060,38 1068,46\n    Q 1076,54 1078,64\n    Q 1080,74 1074,82\n    Q 1068,90 1058,94\n    Q 1048,98 1038,96\n    Q 1028,94 1020,88\n    Q 1012,82 1008,74\n    Q 1004,66 1000,65\n    \n    M 1000,65\n    Q 995,58 988,50\n    Q 980,42 970,38\n    Q 960,34 950,36\n    Q 940,38 932,46\n    Q 924,54 922,64\n    Q 920,74 926,82\n    Q 932,90 942,94\n    Q 952,98 962,96\n    Q 972,94 980,88\n    Q 988,82 992,74\n    Q 996,66 1000,65\n    \n    M 1000,65\n    L 990,85\n    Q 987,95 984,105\n    Q 981,115 978,122\n    \n    M 1000,65  \n    L 1010,85\n    Q 1013,95 1016,105\n    Q 1019,115 1022,122\n  `;\n\n  const isComplete = fillProgress >= 100;\n  \n  // Combine main string with bow tie for complete path\n  const fullPath = isComplete ? stringPath + bowTieKnot : stringPath;\n  \n  const dashOffset = pathLength - (pathLength * fillProgress / 100);\n\n  return (\n    <div \n      className={`w-full ${className}`} \n      data-testid=\"red-string-progress\"\n      role=\"progressbar\"\n      aria-valuenow={Math.round(fillProgress)}\n      aria-valuemin={0}\n      aria-valuemax={100}\n      aria-label={`Reading progress: ${Math.round(fillProgress)}% complete`}\n    >\n      <svg\n        width=\"100%\"\n        height=\"220\"\n        viewBox=\"0 -50 1200 220\"\n        className=\"w-full h-auto\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          {/* Shadow for 3D effect */}\n          <filter id=\"string-shadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"1.5\" />\n            <feOffset dx=\"0.5\" dy=\"1.5\" result=\"offsetblur\" />\n            <feComponentTransfer>\n              <feFuncA type=\"linear\" slope=\"0.25\" />\n            </feComponentTransfer>\n            <feMerge>\n              <feMergeNode />\n              <feMergeNode in=\"SourceGraphic\" />\n            </feMerge>\n          </filter>\n\n          {/* Vivid red gradient for filled portion */}\n          <linearGradient id=\"filled-gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#ff3355\" stopOpacity=\"1\" />\n            <stop offset=\"50%\" stopColor=\"#d7283e\" stopOpacity=\"1\" />\n            <stop offset=\"100%\" stopColor=\"#b01f30\" stopOpacity=\"1\" />\n          </linearGradient>\n\n          {/* Semi-transparent outline */}\n          <linearGradient id=\"outline-gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#ffcccc\" stopOpacity=\"0.2\" />\n            <stop offset=\"50%\" stopColor=\"#ffb3b3\" stopOpacity=\"0.2\" />\n            <stop offset=\"100%\" stopColor=\"#ff9999\" stopOpacity=\"0.2\" />\n          </linearGradient>\n\n        </defs>\n\n        {/* Semi-transparent outline (always visible) */}\n        <path\n          d={fullPath}\n          fill=\"none\"\n          stroke=\"url(#outline-gradient)\"\n          strokeWidth=\"8\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n\n        {/* Vivid red filled portion (animates left to right) */}\n        <g filter=\"url(#string-shadow)\">\n          <path\n            ref={pathRef}\n            d={fullPath}\n            fill=\"none\"\n            stroke=\"url(#filled-gradient)\"\n            strokeWidth=\"8\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeDasharray={pathLength}\n            strokeDashoffset={dashOffset}\n            style={{ \n              transition: prefersReducedMotion ? 'none' : 'stroke-dashoffset 0.6s ease-out',\n            }}\n          />\n        </g>\n\n      </svg>\n    </div>\n  );\n}\n","size_bytes":7781},"client/src/components/admin/MediaEmbedDialogs.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Image, Music, Images } from \"lucide-react\";\nimport { SiInstagram } from \"react-icons/si\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Section } from \"@shared/schema\";\n\ninterface MediaToolbarProps {\n  onInsertImage: () => void;\n  onInsertInstagram: () => void;\n  onInsertSpotify: () => void;\n}\n\nexport function MediaToolbar({ onInsertImage, onInsertInstagram, onInsertSpotify }: MediaToolbarProps) {\n  return (\n    <div className=\"flex items-center gap-2 p-2 border rounded-md bg-muted/30 mb-2 flex-wrap\">\n      <span className=\"text-xs font-noto text-muted-foreground mr-2\">Insert:</span>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={onInsertImage}\n        data-testid=\"button-insert-image\"\n      >\n        <Images className=\"w-4 h-4 mr-1\" />\n        Images\n      </Button>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={onInsertInstagram}\n        data-testid=\"button-insert-instagram\"\n      >\n        <SiInstagram className=\"w-4 h-4 mr-1\" />\n        Instagram\n      </Button>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={onInsertSpotify}\n        data-testid=\"button-insert-spotify\"\n      >\n        <Music className=\"w-4 h-4 mr-1\" />\n        Spotify\n      </Button>\n    </div>\n  );\n}\n\ninterface ImageEmbedDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onInsert: (html: string) => void;\n}\n\nexport function ImageEmbedDialog({ open, onOpenChange, onInsert }: ImageEmbedDialogProps) {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFilesSelect = (files: FileList) => {\n    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n    const validVideoTypes = ['video/mp4', 'video/webm', 'video/quicktime', 'video/x-msvideo', 'video/x-ms-wmv', 'video/ogg'];\n    const validTypes = [...validImageTypes, ...validVideoTypes];\n    const validFiles: File[] = [];\n    \n    Array.from(files).forEach(file => {\n      const isImage = validImageTypes.includes(file.type);\n      const isVideo = validVideoTypes.includes(file.type);\n      \n      if (!isImage && !isVideo) {\n        toast({\n          title: \"Invalid file type\",\n          description: `${file.name} is not a valid image or video type.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Different size limits for images vs videos\n      const maxSize = isVideo ? 50 * 1024 * 1024 : 10 * 1024 * 1024; // 50MB for videos, 10MB for images\n      if (file.size > maxSize) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than ${isVideo ? '50MB' : '10MB'}.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      validFiles.push(file);\n    });\n    \n    setSelectedFiles(validFiles);\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      handleFilesSelect(e.target.files);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    if (e.dataTransfer.files) {\n      handleFilesSelect(e.dataTransfer.files);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragging(false);\n  };\n\n  const uploadFile = async (file: File): Promise<string> => {\n    const formData = new FormData();\n    // The endpoint accepts both images and videos, still use 'image' as the field name\n    formData.append('image', file);\n    \n    try {\n      const response = await fetch('/api/upload/image', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Upload failed' }));\n        throw new Error(errorData.error || 'Upload failed');\n      }\n      \n      const data = await response.json();\n      return data.url;\n    } catch (error) {\n      const isVideo = file.type.startsWith('video/');\n      toast({\n        title: \"Upload failed\",\n        description: error instanceof Error ? error.message : `Failed to upload ${isVideo ? 'video' : 'image'}. Please try again.`,\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleInsert = async () => {\n    // Upload files\n    if (selectedFiles.length === 0) {\n      toast({\n        title: \"No files selected\",\n        description: \"Please select at least one file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setUploading(true);\n    try {\n      const mediaItems: string[] = [];\n      \n      for (const file of selectedFiles) {\n        const url = await uploadFile(file);\n        const isVideo = file.type.startsWith('video/');\n        \n        // Mark videos with a special prefix so the gallery knows it's a video\n        if (isVideo) {\n          mediaItems.push(`video:${url}`);\n        } else {\n          mediaItems.push(url);\n        }\n      }\n      \n      // Generate a unified gallery embed that includes both images and videos\n      let finalEmbedCode: string;\n      if (mediaItems.length === 1 && !mediaItems[0].startsWith('video:')) {\n        // Single image\n        finalEmbedCode = `[embed:${mediaItems[0]}]`;\n      } else {\n        // Mixed media gallery or multiple items\n        finalEmbedCode = `[gallery:${mediaItems.join(',')}]`;\n      }\n      \n      onInsert(finalEmbedCode);\n      \n      // Reset form\n      setSelectedFiles([]);\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Upload error:', error);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"font-myeongjo\">Insert Media</DialogTitle>\n          <DialogDescription className=\"font-noto\">\n            Upload images or videos. Multiple images will create a gallery.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4 max-h-[70vh] overflow-y-auto\">\n          {/* File Upload */}\n          <div>\n              <Label className=\"font-noto\">\n                Upload Media <span className=\"text-destructive\">*</span>\n              </Label>\n              <div\n                className={`mt-1.5 border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n                  isDragging ? 'border-kdrama-primary bg-kdrama-primary/10' : 'border-muted-foreground/25 hover:border-kdrama-primary/50'\n                }`}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                onClick={() => fileInputRef.current?.click()}\n                data-testid=\"dropzone-images\"\n              >\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*,video/*\"\n                  multiple\n                  onChange={handleFileInputChange}\n                  className=\"hidden\"\n                  data-testid=\"input-files\"\n                />\n                {selectedFiles.length > 0 ? (\n                  <div className=\"space-y-2\">\n                    <Images className=\"w-8 h-8 mx-auto text-kdrama-primary\" />\n                    <p className=\"text-sm font-noto text-kdrama-primary\">\n                      ✓ {selectedFiles.length} {selectedFiles.length === 1 ? 'file' : 'files'} selected\n                    </p>\n                    <div className=\"text-xs text-muted-foreground max-h-32 overflow-y-auto\">\n                      {selectedFiles.map((file, idx) => (\n                        <div key={idx}>{file.name}</div>\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Click to change files\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <Images className=\"w-8 h-8 mx-auto text-muted-foreground\" />\n                    <p className=\"text-sm font-noto\">\n                      Drag and drop media files here, or click to select\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Images: JPG, PNG, GIF, WebP (max 10MB)\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Videos: MP4, WebM, MOV, AVI, WMV, OGG (max 50MB)\n                    </p>\n                    <p className=\"text-xs text-kdrama-primary\">\n                      Multiple images create a gallery • Videos upload individually\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              setSelectedFiles([]);\n              onOpenChange(false);\n            }}\n            disabled={uploading}\n            data-testid=\"button-cancel-images\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleInsert}\n            disabled={uploading || selectedFiles.length === 0}\n            data-testid=\"button-insert-images-confirm\"\n          >\n            {uploading ? \"Uploading...\" : `Insert ${selectedFiles.length > 1 ? \"Gallery\" : \"Image\"}`}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface InstagramEmbedDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onInsert: (html: string) => void;\n}\n\nexport function InstagramEmbedDialog({ open, onOpenChange, onInsert }: InstagramEmbedDialogProps) {\n  const [instagramUrls, setInstagramUrls] = useState(\"\");\n  const [isMultiple, setIsMultiple] = useState(false);\n  const { toast } = useToast();\n\n  const validateInstagramUrl = (url: string): boolean => {\n    const cleanUrl = url.split('?')[0];\n    return cleanUrl.includes('instagram.com') && \n           (cleanUrl.includes('/reel/') || cleanUrl.includes('/p/') || cleanUrl.includes('/tv/'));\n  };\n\n  const handleInsert = () => {\n    const urlList = instagramUrls.trim()\n      .split(isMultiple ? '\\n' : '\\n')  // Split by newline in both modes\n      .map(url => url.trim())\n      .filter(url => url);\n\n    if (urlList.length === 0) {\n      toast({\n        title: \"URL is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Validate all URLs are Instagram URLs\n    const invalidUrls = urlList.filter(url => !validateInstagramUrl(url));\n    if (invalidUrls.length > 0) {\n      toast({\n        title: \"Invalid Instagram URLs\",\n        description: `${invalidUrls.length} URL(s) are not valid Instagram links`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Generate embed code based on single or multiple\n    let embedCode;\n    if (urlList.length === 1) {\n      embedCode = `[embed:${urlList[0]}]`;\n    } else {\n      // Multiple Instagram URLs - use gallery format\n      embedCode = `[instagram-gallery:${urlList.join(',')}]`;\n    }\n\n    onInsert(embedCode);\n\n    // Reset form\n    setInstagramUrls(\"\");\n    setIsMultiple(false);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"font-myeongjo\">Insert Instagram</DialogTitle>\n          <DialogDescription className=\"font-noto\">\n            Add Instagram posts and reels. Toggle below to add multiple items as a gallery.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"multiple-mode\"\n              checked={isMultiple}\n              onCheckedChange={setIsMultiple}\n            />\n            <Label htmlFor=\"multiple-mode\" className=\"font-noto cursor-pointer\">\n              Create Instagram gallery (multiple items)\n            </Label>\n          </div>\n\n          <div>\n            <Label htmlFor=\"instagram-url\" className=\"font-noto\">\n              {isMultiple ? \"Instagram URLs (one per line)\" : \"Instagram URL\"} <span className=\"text-destructive\">*</span>\n            </Label>\n            {isMultiple ? (\n              <Textarea\n                id=\"instagram-urls\"\n                value={instagramUrls}\n                onChange={(e) => setInstagramUrls(e.target.value)}\n                placeholder=\"https://instagram.com/reel/ABC123/\nhttps://instagram.com/p/XYZ789/\nhttps://instagram.com/reel/DEF456/\"\n                rows={6}\n                className=\"mt-1.5 font-mono text-sm\"\n                data-testid=\"textarea-instagram-urls\"\n              />\n            ) : (\n              <Input\n                id=\"instagram-url\"\n                type=\"url\"\n                value={instagramUrls}\n                onChange={(e) => setInstagramUrls(e.target.value)}\n                placeholder=\"https://instagram.com/reel/... or https://instagram.com/p/...\"\n                className=\"mt-1.5\"\n                data-testid=\"input-instagram-url\"\n              />\n            )}\n            <p className=\"text-xs text-muted-foreground mt-1 font-noto\">\n              {isMultiple\n                ? \"Mix reels and posts together - they'll display in a compact grid\"\n                : \"Paste any Instagram post or reel URL\"}\n            </p>\n            {isMultiple && instagramUrls && (\n              <p className=\"text-xs text-kdrama-primary mt-1 font-noto\">\n                {instagramUrls.split('\\n').filter(u => u.trim()).length} URL(s) added\n              </p>\n            )}\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              setInstagramUrls(\"\");\n              setIsMultiple(false);\n              onOpenChange(false);\n            }}\n            data-testid=\"button-cancel-instagram\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleInsert}\n            disabled={!instagramUrls.trim()}\n            data-testid=\"button-insert-instagram-confirm\"\n          >\n            Insert Instagram\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface SpotifyEmbedDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  sectionId?: string;\n}\n\nexport function SpotifyEmbedDialog({ open, onOpenChange, sectionId }: SpotifyEmbedDialogProps) {\n  const [spotifyUrl, setSpotifyUrl] = useState(\"\");\n  const { toast } = useToast();\n  \n  // Fetch section data to get existing songUrl\n  const { data: section } = useQuery<Section>({\n    queryKey: [`/api/sections/${sectionId}`],\n    enabled: !!sectionId && open,\n  });\n  \n  // Update form when dialog opens or section changes\n  useEffect(() => {\n    if (section?.songUrl) {\n      setSpotifyUrl(section.songUrl);\n    } else {\n      setSpotifyUrl(\"\");\n    }\n  }, [section, open]);\n\n  const parseSpotifyUrl = (url: string): { type: string; id: string; embedUrl: string } | null => {\n    // Spotify track: https://open.spotify.com/track/6rqhFgbbKwnb9MLmUQDhG6\n    const trackRegex = /spotify\\.com\\/track\\/([a-zA-Z0-9]+)/;\n    const trackMatch = url.match(trackRegex);\n    if (trackMatch) {\n      return {\n        type: \"track\",\n        id: trackMatch[1],\n        embedUrl: `https://open.spotify.com/embed/track/${trackMatch[1]}`,\n      };\n    }\n\n    // Spotify album: https://open.spotify.com/album/...\n    const albumRegex = /spotify\\.com\\/album\\/([a-zA-Z0-9]+)/;\n    const albumMatch = url.match(albumRegex);\n    if (albumMatch) {\n      return {\n        type: \"album\",\n        id: albumMatch[1],\n        embedUrl: `https://open.spotify.com/embed/album/${albumMatch[1]}`,\n      };\n    }\n\n    // Spotify playlist: https://open.spotify.com/playlist/...\n    const playlistRegex = /spotify\\.com\\/playlist\\/([a-zA-Z0-9]+)/;\n    const playlistMatch = url.match(playlistRegex);\n    if (playlistMatch) {\n      return {\n        type: \"playlist\",\n        id: playlistMatch[1],\n        embedUrl: `https://open.spotify.com/embed/playlist/${playlistMatch[1]}`,\n      };\n    }\n\n    return null;\n  };\n\n  const updateSectionMutation = useMutation({\n    mutationFn: async (songUrl: string | null) => {\n      if (!sectionId) throw new Error(\"No section selected\");\n      return await apiRequest(\"PATCH\", `/api/sections/${sectionId}`, { songUrl });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${sectionId}`] });\n      toast({\n        title: \"Music updated\",\n        description: variables === null \n          ? \"Section music cleared. Will use chapter music instead.\" \n          : \"The section music has been set successfully.\",\n      });\n      // Reset form\n      setSpotifyUrl(\"\");\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update music\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSetSectionMusic = () => {\n    if (!spotifyUrl.trim()) return;\n    if (!sectionId) {\n      toast({\n        title: \"No section selected\",\n        description: \"Cannot set music without a section.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const parsedSpotify = parseSpotifyUrl(spotifyUrl);\n    \n    if (!parsedSpotify) {\n      toast({\n        title: \"Invalid Spotify URL\",\n        description: \"Please enter a valid Spotify track, album, or playlist URL.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Use the original Spotify URL for the section\n    updateSectionMutation.mutate(spotifyUrl);\n  };\n  \n  const handleClearMusic = () => {\n    if (!sectionId) {\n      toast({\n        title: \"No section selected\",\n        description: \"Cannot clear music without a section.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Submit null to clear the music and fall back to chapter music\n    updateSectionMutation.mutate(null as any);\n  };\n\n  const parsedSpotify = spotifyUrl ? parseSpotifyUrl(spotifyUrl) : null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"font-myeongjo\">Set Section Music</DialogTitle>\n          <DialogDescription className=\"font-noto\">\n            Add background music that plays in the floating player while reading this section\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div>\n            <Label htmlFor=\"spotify-url\" className=\"font-noto\">\n              Spotify URL <span className=\"text-destructive\">*</span>\n            </Label>\n            <Input\n              id=\"spotify-url\"\n              type=\"url\"\n              value={spotifyUrl}\n              onChange={(e) => setSpotifyUrl(e.target.value)}\n              placeholder=\"https://open.spotify.com/track/...\"\n              className=\"mt-1.5\"\n              data-testid=\"input-spotify-url\"\n            />\n            <p className=\"text-xs text-muted-foreground mt-1 font-noto\">\n              Paste a link to a Spotify track, album, or playlist\n            </p>\n            {parsedSpotify && (\n              <p className=\"text-xs text-kdrama-primary mt-1 font-noto\">\n                ✓ Detected: {parsedSpotify.type.charAt(0).toUpperCase() + parsedSpotify.type.slice(1)}\n              </p>\n            )}\n          </div>\n\n          {parsedSpotify && (\n            <div className=\"border rounded-lg p-4 bg-muted/30\">\n              <p className=\"text-xs font-noto text-muted-foreground mb-2\">Preview:</p>\n              <div className=\"h-[352px] relative rounded overflow-hidden\">\n                <iframe\n                  src={parsedSpotify.embedUrl}\n                  className=\"w-full h-full\"\n                  frameBorder=\"0\"\n                  allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n                  loading=\"lazy\"\n                ></iframe>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <DialogFooter className=\"flex items-center justify-between\">\n          <div className=\"flex gap-2\">\n            {section?.songUrl && (\n              <Button\n                variant=\"destructive\"\n                onClick={handleClearMusic}\n                disabled={updateSectionMutation.isPending}\n                data-testid=\"button-clear-music\"\n              >\n                Clear Music\n              </Button>\n            )}\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setSpotifyUrl(\"\");\n                onOpenChange(false);\n              }}\n              disabled={updateSectionMutation.isPending}\n              data-testid=\"button-cancel-spotify\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSetSectionMusic}\n              disabled={!spotifyUrl.trim() || !parsedSpotify || updateSectionMutation.isPending}\n              data-testid=\"button-set-section-music\"\n            >\n              {updateSectionMutation.isPending ? \"Setting...\" : \"Set Section Music\"}\n            </Button>\n          </div>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":22467},"client/src/components/admin/ImageGalleryDialog.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { X, Upload, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ImageGalleryDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onInsert: (html: string) => void;\n}\n\nexport function ImageGalleryDialog({ open, onOpenChange, onInsert }: ImageGalleryDialogProps) {\n  const [imageUrls, setImageUrls] = useState<string[]>([]);\n  const [currentUrl, setCurrentUrl] = useState(\"\");\n  const [uploadMode, setUploadMode] = useState<\"url\" | \"file\">(\"file\");\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [previewUrls, setPreviewUrls] = useState<string[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFilesSelect = (files: FileList | File[]) => {\n    const fileArray = Array.from(files);\n    const validFiles: File[] = [];\n    const newPreviews: string[] = [];\n\n    fileArray.forEach((file) => {\n      // Validate file type\n      const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n      if (!validTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: `${file.name} is not a valid image. Please select JPG, PNG, GIF, or WebP images.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Validate file size (10MB)\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than 10MB.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      validFiles.push(file);\n\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        newPreviews.push(e.target?.result as string);\n        if (newPreviews.length === validFiles.length) {\n          setPreviewUrls((prev) => [...prev, ...newPreviews]);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n\n    setSelectedFiles((prev) => [...prev, ...validFiles]);\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      handleFilesSelect(e.target.files);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      handleFilesSelect(e.dataTransfer.files);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragging(false);\n  };\n\n  const uploadFiles = async (files: File[]): Promise<string[]> => {\n    const uploadPromises = files.map(async (file) => {\n      const formData = new FormData();\n      formData.append('image', file);\n      \n      const response = await fetch('/api/upload/image', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to upload ${file.name}`);\n      }\n      \n      const data = await response.json();\n      return data.url;\n    });\n\n    return Promise.all(uploadPromises);\n  };\n\n  const handleAddUrl = () => {\n    if (currentUrl.trim()) {\n      setImageUrls((prev) => [...prev, currentUrl.trim()]);\n      setCurrentUrl(\"\");\n    }\n  };\n\n  const handleRemoveImage = (index: number) => {\n    if (uploadMode === \"file\") {\n      setSelectedFiles((prev) => prev.filter((_, i) => i !== index));\n      setPreviewUrls((prev) => prev.filter((_, i) => i !== index));\n    } else {\n      setImageUrls((prev) => prev.filter((_, i) => i !== index));\n    }\n  };\n\n  const handleInsert = async () => {\n    let finalUrls: string[] = [];\n\n    if (uploadMode === \"file\") {\n      if (selectedFiles.length === 0) {\n        toast({\n          title: \"No images selected\",\n          description: \"Please select at least one image.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setUploading(true);\n      try {\n        finalUrls = await uploadFiles(selectedFiles);\n      } catch (error) {\n        toast({\n          title: \"Upload failed\",\n          description: error instanceof Error ? error.message : \"Failed to upload images.\",\n          variant: \"destructive\",\n        });\n        setUploading(false);\n        return;\n      }\n      setUploading(false);\n    } else {\n      if (imageUrls.length === 0) {\n        toast({\n          title: \"No images added\",\n          description: \"Please add at least one image URL.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      finalUrls = imageUrls;\n    }\n\n    // Create gallery embed code\n    const embedCode = `[gallery:${finalUrls.join(',')}]`;\n    onInsert(embedCode);\n\n    // Reset form\n    setImageUrls([]);\n    setCurrentUrl(\"\");\n    setSelectedFiles([]);\n    setPreviewUrls([]);\n    setUploadMode(\"file\");\n    onOpenChange(false);\n  };\n\n  const totalImages = uploadMode === \"file\" ? selectedFiles.length : imageUrls.length;\n  const previews = uploadMode === \"file\" ? previewUrls : imageUrls;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"font-myeongjo\">Insert Image Gallery</DialogTitle>\n          <DialogDescription className=\"font-noto\">\n            Add multiple images that will display in a beautiful grid\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          {/* Mode Toggle */}\n          <div className=\"flex gap-2\">\n            <Button\n              type=\"button\"\n              variant={uploadMode === \"file\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setUploadMode(\"file\")}\n              data-testid=\"button-mode-file\"\n            >\n              <Upload className=\"w-4 h-4 mr-1\" />\n              Upload Files\n            </Button>\n            <Button\n              type=\"button\"\n              variant={uploadMode === \"url\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setUploadMode(\"url\")}\n              data-testid=\"button-mode-url\"\n            >\n              From URLs\n            </Button>\n          </div>\n\n          {uploadMode === \"file\" ? (\n            <div>\n              <Label className=\"font-noto\">Upload Images</Label>\n              <div\n                className={`mt-1.5 border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n                  isDragging ? 'border-kdrama-primary bg-kdrama-primary/10' : 'border-muted-foreground/25 hover:border-kdrama-primary/50'\n                }`}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                onClick={() => fileInputRef.current?.click()}\n                data-testid=\"dropzone-gallery\"\n              >\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  multiple\n                  onChange={handleFileInputChange}\n                  className=\"hidden\"\n                  data-testid=\"input-file-multiple\"\n                />\n                <Upload className=\"w-12 h-12 mx-auto mb-3 text-muted-foreground\" />\n                <p className=\"text-sm font-noto mb-1\">\n                  {selectedFiles.length === 0 ? \"Drop images here or click to browse\" : `${selectedFiles.length} images selected`}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Select multiple images (JPG, PNG, GIF, WebP - max 10MB each)\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div>\n              <Label className=\"font-noto\">Add Image URLs</Label>\n              <div className=\"flex gap-2 mt-1.5\">\n                <Input\n                  type=\"url\"\n                  value={currentUrl}\n                  onChange={(e) => setCurrentUrl(e.target.value)}\n                  placeholder=\"https://example.com/image.jpg\"\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\") {\n                      e.preventDefault();\n                      handleAddUrl();\n                    }\n                  }}\n                  data-testid=\"input-gallery-url\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={handleAddUrl}\n                  disabled={!currentUrl.trim()}\n                  data-testid=\"button-add-url\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Preview Grid */}\n          {totalImages > 0 && (\n            <div>\n              <Label className=\"font-noto\">Preview ({totalImages} images)</Label>\n              <div className=\"grid grid-cols-3 gap-3 mt-2\">\n                {previews.map((preview, index) => (\n                  <div\n                    key={index}\n                    className=\"relative aspect-square rounded-lg overflow-hidden group\"\n                    data-testid={`preview-${index}`}\n                  >\n                    <img\n                      src={preview}\n                      alt={`Preview ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => handleRemoveImage(index)}\n                      className=\"absolute top-1 right-1 bg-destructive text-destructive-foreground rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity\"\n                      data-testid={`button-remove-${index}`}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <DialogFooter>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleInsert}\n            disabled={totalImages === 0 || uploading}\n            data-testid=\"button-insert-gallery\"\n          >\n            {uploading ? \"Uploading...\" : `Insert Gallery (${totalImages})`}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11019},"client/src/components/ImageGallery.tsx":{"content":"import { useState } from \"react\";\nimport { X, ChevronLeft, ChevronRight, ZoomIn, ZoomOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ImageGalleryProps {\n  images: string[];\n  className?: string;\n}\n\nexport function ImageGallery({ images, className = \"\" }: ImageGalleryProps) {\n  const [lightboxOpen, setLightboxOpen] = useState(false);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [zoom, setZoom] = useState(1);\n\n  const openLightbox = (index: number) => {\n    setCurrentImageIndex(index);\n    setLightboxOpen(true);\n    setZoom(1);\n  };\n\n  const closeLightbox = () => {\n    setLightboxOpen(false);\n    setZoom(1);\n  };\n\n  const goToPrevious = () => {\n    setCurrentImageIndex((prev) => (prev === 0 ? images.length - 1 : prev - 1));\n    setZoom(1);\n  };\n\n  const goToNext = () => {\n    setCurrentImageIndex((prev) => (prev === images.length - 1 ? 0 : prev + 1));\n    setZoom(1);\n  };\n\n  const handleZoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.25, 3));\n  };\n\n  const handleZoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.25, 0.5));\n  };\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (!lightboxOpen) return;\n    \n    if (e.key === \"Escape\") closeLightbox();\n    if (e.key === \"ArrowLeft\") goToPrevious();\n    if (e.key === \"ArrowRight\") goToNext();\n  };\n\n  // Add keyboard listeners\n  useState(() => {\n    window.addEventListener(\"keydown\", handleKeyDown as any);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown as any);\n  });\n\n  if (images.length === 0) return null;\n\n  // Single image layout\n  if (images.length === 1) {\n    return (\n      <>\n        <div className={`my-6 ${className}`}>\n          <img\n            src={images[0]}\n            alt=\"Content image\"\n            className=\"w-full rounded-lg shadow-md hover-elevate active-elevate-2 cursor-pointer transition-all\"\n            onClick={() => openLightbox(0)}\n            data-testid=\"img-single\"\n          />\n        </div>\n        {lightboxOpen && (\n          <Lightbox\n            image={images[0]}\n            onClose={closeLightbox}\n            zoom={zoom}\n            onZoomIn={handleZoomIn}\n            onZoomOut={handleZoomOut}\n          />\n        )}\n      </>\n    );\n  }\n\n  // Gallery grid layout for 2+ images\n  const gridClass =\n    images.length === 2\n      ? \"grid-cols-2\"\n      : images.length === 3\n      ? \"grid-cols-3\"\n      : images.length === 4\n      ? \"grid-cols-2\"\n      : \"grid-cols-3\";\n\n  return (\n    <>\n      <div className={`my-6 ${className}`}>\n        <div className={`grid ${gridClass} gap-3`}>\n          {images.map((image, index) => (\n            <div\n              key={index}\n              className=\"relative aspect-square overflow-hidden rounded-lg shadow-md hover-elevate active-elevate-2 cursor-pointer transition-all\"\n              onClick={() => openLightbox(index)}\n              data-testid={`img-gallery-${index}`}\n            >\n              <img\n                src={image}\n                alt={`Gallery image ${index + 1}`}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n          ))}\n        </div>\n        <p className=\"text-center text-sm text-muted-foreground mt-3 font-noto\">\n          {images.length} images • Click to view\n        </p>\n      </div>\n\n      {lightboxOpen && (\n        <Lightbox\n          image={images[currentImageIndex]}\n          currentIndex={currentImageIndex}\n          total={images.length}\n          onClose={closeLightbox}\n          onPrevious={goToPrevious}\n          onNext={goToNext}\n          zoom={zoom}\n          onZoomIn={handleZoomIn}\n          onZoomOut={handleZoomOut}\n        />\n      )}\n    </>\n  );\n}\n\ninterface LightboxProps {\n  image: string;\n  currentIndex?: number;\n  total?: number;\n  onClose: () => void;\n  onPrevious?: () => void;\n  onNext?: () => void;\n  zoom: number;\n  onZoomIn: () => void;\n  onZoomOut: () => void;\n}\n\nfunction Lightbox({\n  image,\n  currentIndex,\n  total,\n  onClose,\n  onPrevious,\n  onNext,\n  zoom,\n  onZoomIn,\n  onZoomOut,\n}: LightboxProps) {\n  return (\n    <div\n      className=\"fixed inset-0 z-50 bg-black/95 flex items-center justify-center\"\n      onClick={onClose}\n      data-testid=\"lightbox-overlay\"\n    >\n      {/* Close button */}\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-4 right-4 text-white hover:bg-white/20 z-10\"\n        onClick={(e) => {\n          e.stopPropagation();\n          onClose();\n        }}\n        data-testid=\"button-close-lightbox\"\n      >\n        <X className=\"w-6 h-6\" />\n      </Button>\n\n      {/* Image counter */}\n      {total && total > 1 && (\n        <div className=\"absolute top-4 left-1/2 -translate-x-1/2 text-white font-myeongjo text-lg z-10\">\n          {currentIndex! + 1} / {total}\n        </div>\n      )}\n\n      {/* Zoom controls */}\n      <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2 z-10\">\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          className=\"text-white hover:bg-white/20\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onZoomOut();\n          }}\n          disabled={zoom <= 0.5}\n          data-testid=\"button-zoom-out\"\n        >\n          <ZoomOut className=\"w-5 h-5\" />\n        </Button>\n        <div className=\"px-4 py-2 bg-white/10 rounded-md text-white font-noto\">\n          {Math.round(zoom * 100)}%\n        </div>\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          className=\"text-white hover:bg-white/20\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onZoomIn();\n          }}\n          disabled={zoom >= 3}\n          data-testid=\"button-zoom-in\"\n        >\n          <ZoomIn className=\"w-5 h-5\" />\n        </Button>\n      </div>\n\n      {/* Navigation buttons */}\n      {total && total > 1 && (\n        <>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"absolute left-4 top-1/2 -translate-y-1/2 text-white hover:bg-white/20\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onPrevious?.();\n            }}\n            data-testid=\"button-previous-image\"\n          >\n            <ChevronLeft className=\"w-8 h-8\" />\n          </Button>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"absolute right-4 top-1/2 -translate-y-1/2 text-white hover:bg-white/20\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onNext?.();\n            }}\n            data-testid=\"button-next-image\"\n          >\n            <ChevronRight className=\"w-8 h-8\" />\n          </Button>\n        </>\n      )}\n\n      {/* Image */}\n      <div\n        className=\"max-w-[90vw] max-h-[90vh] overflow-auto\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <img\n          src={image}\n          alt=\"Lightbox view\"\n          className=\"transition-transform duration-200\"\n          style={{\n            transform: `scale(${zoom})`,\n            transformOrigin: \"center center\",\n          }}\n          data-testid=\"img-lightbox\"\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":7163},"client/src/components/TiptapEditor.tsx":{"content":"import { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Underline from '@tiptap/extension-underline';\nimport TextAlign from '@tiptap/extension-text-align';\nimport Subscript from '@tiptap/extension-subscript';\nimport Superscript from '@tiptap/extension-superscript';\nimport Highlight from '@tiptap/extension-highlight';\nimport Link from '@tiptap/extension-link';\nimport Image from '@tiptap/extension-image';\nimport { TextStyle } from '@tiptap/extension-text-style';\nimport { Color } from '@tiptap/extension-color';\nimport FontFamily from '@tiptap/extension-font-family';\nimport { Extension } from '@tiptap/core';\nimport {\n  Bold,\n  Italic,\n  Underline as UnderlineIcon,\n  Strikethrough,\n  Code,\n  Highlighter,\n  Link as LinkIcon,\n  Image as ImageIcon,\n  List,\n  ListOrdered,\n  AlignLeft,\n  AlignCenter,\n  AlignRight,\n  AlignJustify,\n  Subscript as SubscriptIcon,\n  Superscript as SuperscriptIcon,\n  Palette,\n  Undo,\n  Redo,\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { useCallback, useEffect, useState, useMemo } from 'react';\n\ninterface TiptapEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  singleLine?: boolean;\n}\n\nconst FONT_FAMILIES = [\n  { value: 'nanum-myeongjo', label: 'Nanum Myeongjo' },\n  { value: 'noto-sans-kr', label: 'Noto Sans KR' },\n  { value: 'nanum-pen-script', label: 'Nanum Pen Script' },\n  { value: 'nanum-brush-script', label: 'Nanum Brush Script' },\n  { value: 'gaegu', label: 'Gaegu' },\n  { value: 'serif', label: 'Serif' },\n  { value: 'sans-serif', label: 'Sans Serif' },\n  { value: 'monospace', label: 'Monospace' },\n];\n\nconst FONT_SIZES = [\n  { value: '12px', label: 'Small' },\n  { value: '16px', label: 'Normal' },\n  { value: '20px', label: 'Large' },\n  { value: '24px', label: 'Huge' },\n];\n\nconst TEXT_COLORS = [\n  '#000000', '#374151', '#6B7280', '#9CA3AF', // Blacks/Grays\n  '#DC2626', '#EA580C', '#D97706', '#CA8A04', // Reds/Oranges/Yellows\n  '#65A30D', '#16A34A', '#059669', '#0D9488', // Greens/Teals\n  '#0891B2', '#0284C7', '#2563EB', '#4F46E5', // Cyans/Blues/Indigos\n  '#7C3AED', '#9333EA', '#C026D3', '#DB2777', // Purples/Pinks\n];\n\nconst HIGHLIGHT_COLORS = [\n  '#FEF08A', '#FDE047', '#FACC15', // Yellows\n  '#FCA5A5', '#F87171', '#EF4444', // Reds\n  '#86EFAC', '#4ADE80', '#22C55E', // Greens\n  '#7DD3FC', '#38BDF8', '#0EA5E9', // Blues\n  '#C4B5FD', '#A78BFA', '#8B5CF6', // Purples\n];\n\n// Custom FontSize extension\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    fontSize: {\n      setFontSize: (fontSize: string) => ReturnType;\n      unsetFontSize: () => ReturnType;\n    };\n  }\n}\n\nconst FontSize = Extension.create({\n  name: 'fontSize',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    };\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          fontSize: {\n            default: null,\n            parseHTML: element => element.style.fontSize?.replace(/['\"]+/g, ''),\n            renderHTML: attributes => {\n              if (!attributes.fontSize) {\n                return {};\n              }\n              return {\n                style: `font-size: ${attributes.fontSize}`,\n              };\n            },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setFontSize: (fontSize) => ({ chain }) => {\n        return chain().setMark('textStyle', { fontSize }).run();\n      },\n      unsetFontSize: () => ({ chain }) => {\n        return chain().setMark('textStyle', { fontSize: null }).removeEmptyTextStyle().run();\n      },\n    };\n  },\n});\n\n// Custom extension to prevent Enter key in single-line mode\nconst SingleLineEnter = Extension.create({\n  name: 'singleLineEnter',\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => true, // Prevent Enter key\n    };\n  },\n});\n\nexport function TiptapEditor({ value, onChange, placeholder, className, singleLine = false }: TiptapEditorProps) {\n  const [textColorOpen, setTextColorOpen] = useState(false);\n  const [highlightColorOpen, setHighlightColorOpen] = useState(false);\n\n  // Memoize extensions to prevent recreating them on every render\n  const extensions = useMemo(() => {\n    const exts = [\n      StarterKit.configure({\n        // Disable conflicting extensions that we configure separately\n        link: false,\n      }),\n      Underline,\n      TextAlign.configure({\n        types: ['heading', 'paragraph'],\n      }),\n      Subscript,\n      Superscript,\n      Highlight.configure({\n        multicolor: true,\n      }),\n      Link.configure({\n        openOnClick: false,\n      }),\n      Image,\n      TextStyle,\n      Color,\n      FontFamily.configure({\n        types: ['textStyle'],\n      }),\n      FontSize,\n    ];\n\n    if (singleLine) {\n      exts.push(SingleLineEnter);\n    }\n\n    return exts;\n  }, [singleLine]);\n\n  const editor = useEditor({\n    extensions,\n    content: value,\n    onUpdate: ({ editor }) => {\n      // For single-line mode, emit plain text; otherwise emit HTML\n      if (singleLine) {\n        onChange(editor.getText().replace(/\\n/g, ''));\n      } else {\n        onChange(editor.getHTML());\n      }\n    },\n    editorProps: {\n      attributes: {\n        class: 'prose prose-sm max-w-none focus:outline-none min-h-[200px] p-4',\n      },\n    },\n  }, [extensions, singleLine]);\n\n  const setLink = useCallback(() => {\n    if (!editor) return;\n    const previousUrl = editor.getAttributes('link').href;\n    const url = window.prompt('URL', previousUrl);\n\n    if (url === null) return;\n\n    if (url === '') {\n      editor.chain().focus().extendMarkRange('link').unsetLink().run();\n      return;\n    }\n\n    editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();\n  }, [editor]);\n\n  const addImage = useCallback(async () => {\n    if (!editor) return;\n    \n    const input = document.createElement('input');\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', 'image/*');\n    input.click();\n\n    input.onchange = async () => {\n      const file = input.files?.[0];\n      if (!file) return;\n\n      const formData = new FormData();\n      formData.append('image', file);\n\n      try {\n        const response = await fetch('/api/upload/image', {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error('Upload failed');\n\n        const data = await response.json();\n        editor.chain().focus().setImage({ src: data.url }).run();\n      } catch (error) {\n        console.error('Image upload failed:', error);\n      }\n    };\n  }, [editor]);\n\n  // Sync editor content when value prop changes (e.g., when switching pages)\n  useEffect(() => {\n    if (editor && value !== editor.getHTML()) {\n      editor.commands.setContent(value, { emitUpdate: false });\n    }\n  }, [editor, value]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <div className={`border rounded-md ${className}`}>\n      <div className=\"border-b p-2 flex flex-wrap gap-1 items-center bg-muted/30\">\n        {/* Undo/Redo */}\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          className=\"h-8 w-8\"\n          onClick={() => editor.chain().focus().undo().run()}\n          disabled={!editor.can().undo()}\n          data-testid=\"button-undo\"\n        >\n          <Undo className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          className=\"h-8 w-8\"\n          onClick={() => editor.chain().focus().redo().run()}\n          disabled={!editor.can().redo()}\n          data-testid=\"button-redo\"\n        >\n          <Redo className=\"h-4 w-4\" />\n        </Button>\n\n        <div className=\"w-px h-6 bg-border\" />\n\n        {/* Font Family */}\n        <Select\n          value={editor.getAttributes('textStyle').fontFamily || 'nanum-myeongjo'}\n          onValueChange={(value) => {\n            if (value === 'nanum-myeongjo') {\n              editor.chain().focus().unsetFontFamily().run();\n            } else {\n              editor.chain().focus().setFontFamily(value).run();\n            }\n          }}\n        >\n          <SelectTrigger className=\"w-[140px] h-8\" data-testid=\"select-font-family\">\n            <SelectValue placeholder=\"Font\" />\n          </SelectTrigger>\n          <SelectContent>\n            {FONT_FAMILIES.map((font) => (\n              <SelectItem key={font.value} value={font.value}>\n                <span style={{ fontFamily: font.value }}>{font.label}</span>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        {/* Font Size */}\n        <Select\n          value={editor.getAttributes('textStyle').fontSize || '16px'}\n          onValueChange={(value) => {\n            if (value === '16px') {\n              editor.chain().focus().unsetFontSize().run();\n            } else {\n              editor.chain().focus().setFontSize(value).run();\n            }\n          }}\n        >\n          <SelectTrigger className=\"w-[100px] h-8\" data-testid=\"select-font-size\">\n            <SelectValue placeholder=\"Size\" />\n          </SelectTrigger>\n          <SelectContent>\n            {FONT_SIZES.map((size) => (\n              <SelectItem key={size.value} value={size.value}>\n                {size.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <div className=\"w-px h-6 bg-border\" />\n\n        {/* Text Formatting */}\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('bold') ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().toggleBold().run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-bold\"\n        >\n          <Bold className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('italic') ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().toggleItalic().run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-italic\"\n        >\n          <Italic className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('underline') ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().toggleUnderline().run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-underline\"\n        >\n          <UnderlineIcon className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('strike') ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().toggleStrike().run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-strikethrough\"\n        >\n          <Strikethrough className=\"h-4 w-4\" />\n        </Button>\n\n        {/* Text Color */}\n        <Popover open={textColorOpen} onOpenChange={setTextColorOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"h-8 w-8\"\n              data-testid=\"button-text-color\"\n            >\n              <Palette className=\"h-4 w-4\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-2\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <input\n                  type=\"color\"\n                  className=\"h-8 w-16 rounded border border-border cursor-pointer\"\n                  onChange={(e) => {\n                    editor.chain().focus().setColor(e.target.value).run();\n                  }}\n                  data-testid=\"input-text-color-picker\"\n                />\n                <span className=\"text-sm text-muted-foreground\">Custom color</span>\n              </div>\n              <div className=\"grid grid-cols-5 gap-1\">\n                {TEXT_COLORS.map((color) => (\n                  <button\n                    key={color}\n                    className=\"h-6 w-6 rounded border border-border hover:scale-110 transition-transform\"\n                    style={{ backgroundColor: color }}\n                    onClick={() => {\n                      editor.chain().focus().setColor(color).run();\n                      setTextColorOpen(false);\n                    }}\n                    data-testid={`color-${color}`}\n                  />\n                ))}\n              </div>\n            </div>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"w-full mt-2\"\n              onClick={() => {\n                editor.chain().focus().unsetColor().run();\n                setTextColorOpen(false);\n              }}\n              data-testid=\"button-clear-text-color\"\n            >\n              Clear Color\n            </Button>\n          </PopoverContent>\n        </Popover>\n\n        {/* Highlight Color */}\n        <Popover open={highlightColorOpen} onOpenChange={setHighlightColorOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              size=\"icon\"\n              variant={editor.isActive('highlight') ? 'default' : 'ghost'}\n              className=\"h-8 w-8\"\n              data-testid=\"button-highlight-color\"\n            >\n              <Highlighter className=\"h-4 w-4\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-2\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <input\n                  type=\"color\"\n                  className=\"h-8 w-16 rounded border border-border cursor-pointer\"\n                  onChange={(e) => {\n                    editor.chain().focus().toggleHighlight({ color: e.target.value }).run();\n                  }}\n                  data-testid=\"input-highlight-color-picker\"\n                />\n                <span className=\"text-sm text-muted-foreground\">Custom highlight</span>\n              </div>\n              <div className=\"grid grid-cols-3 gap-1\">\n                {HIGHLIGHT_COLORS.map((color) => (\n                  <button\n                    key={color}\n                    className=\"h-6 w-6 rounded border border-border hover:scale-110 transition-transform\"\n                    style={{ backgroundColor: color }}\n                    onClick={() => {\n                      editor.chain().focus().toggleHighlight({ color }).run();\n                      setHighlightColorOpen(false);\n                    }}\n                    data-testid={`highlight-${color}`}\n                  />\n                ))}\n              </div>\n            </div>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"w-full mt-2\"\n              onClick={() => {\n                editor.chain().focus().unsetHighlight().run();\n                setHighlightColorOpen(false);\n              }}\n              data-testid=\"button-clear-highlight-color\"\n            >\n              Clear Highlight\n            </Button>\n          </PopoverContent>\n        </Popover>\n\n        <div className=\"w-px h-6 bg-border\" />\n\n        {/* Script */}\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('subscript') ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().toggleSubscript().run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-subscript\"\n        >\n          <SubscriptIcon className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('superscript') ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().toggleSuperscript().run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-superscript\"\n        >\n          <SuperscriptIcon className=\"h-4 w-4\" />\n        </Button>\n\n        <div className=\"w-px h-6 bg-border\" />\n\n        {/* Lists */}\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('bulletList') ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().toggleBulletList().run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-bullet-list\"\n        >\n          <List className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('orderedList') ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().toggleOrderedList().run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-ordered-list\"\n        >\n          <ListOrdered className=\"h-4 w-4\" />\n        </Button>\n\n        <div className=\"w-px h-6 bg-border\" />\n\n        {/* Alignment */}\n        <Button\n          size=\"icon\"\n          variant={editor.isActive({ textAlign: 'left' }) ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().setTextAlign('left').run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-align-left\"\n        >\n          <AlignLeft className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant={editor.isActive({ textAlign: 'center' }) ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().setTextAlign('center').run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-align-center\"\n        >\n          <AlignCenter className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant={editor.isActive({ textAlign: 'right' }) ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().setTextAlign('right').run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-align-right\"\n        >\n          <AlignRight className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant={editor.isActive({ textAlign: 'justify' }) ? 'default' : 'ghost'}\n          onClick={() => editor.chain().focus().setTextAlign('justify').run()}\n          className=\"h-8 w-8\"\n          data-testid=\"button-align-justify\"\n        >\n          <AlignJustify className=\"h-4 w-4\" />\n        </Button>\n\n        <div className=\"w-px h-6 bg-border\" />\n\n        {/* Link and Image */}\n        <Button\n          size=\"icon\"\n          variant={editor.isActive('link') ? 'default' : 'ghost'}\n          onClick={setLink}\n          className=\"h-8 w-8\"\n          data-testid=\"button-link\"\n        >\n          <LinkIcon className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={addImage}\n          className=\"h-8 w-8\"\n          data-testid=\"button-image\"\n        >\n          <ImageIcon className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      <EditorContent editor={editor} className=\"tiptap-editor\" />\n    </div>\n  );\n}\n","size_bytes":18746},"client/src/components/PhotoSwipeGallery.tsx":{"content":"import { Gallery, Item } from 'react-photoswipe-gallery';\nimport 'photoswipe/dist/photoswipe.css';\nimport { Play } from 'lucide-react';\nimport { useState, useEffect } from 'react';\n\ninterface PhotoSwipeGalleryProps {\n  images: string[];\n  className?: string;\n}\n\ninterface MediaItem {\n  url: string;\n  isVideo: boolean;\n  original: string;\n  width?: number;\n  height?: number;\n}\n\nexport function PhotoSwipeGallery({ images, className = \"\" }: PhotoSwipeGalleryProps) {\n  const [mediaItems, setMediaItems] = useState<MediaItem[]>([]);\n  const [dimensionsLoaded, setDimensionsLoaded] = useState(false);\n  \n  useEffect(() => {\n    // Process media items and load image dimensions\n    const loadMediaDimensions = async () => {\n      const items = await Promise.all(images.map(async (item) => {\n        const isVideo = item.startsWith('video:');\n        const url = isVideo ? item.slice(6) : item; // Remove 'video:' prefix\n        \n        let width = 1024;\n        let height = 768;\n        \n        if (!isVideo) {\n          // Load actual image dimensions\n          try {\n            const img = new Image();\n            await new Promise((resolve, reject) => {\n              img.onload = resolve;\n              img.onerror = reject;\n              img.src = url;\n            });\n            width = img.naturalWidth || 1024;\n            height = img.naturalHeight || 768;\n          } catch (e) {\n            console.warn('Failed to load image dimensions:', e);\n          }\n        }\n        \n        return { url, isVideo, original: item, width, height };\n      }));\n      \n      setMediaItems(items);\n      setDimensionsLoaded(true);\n    };\n    \n    loadMediaDimensions();\n  }, [images]);\n  \n  if (images.length === 0 || !dimensionsLoaded) return null;\n\n  // Single media layout\n  if (mediaItems.length === 1) {\n    const item = mediaItems[0];\n    \n    if (item.isVideo) {\n      // Single video - show video player directly\n      return (\n        <div className={`my-6 ${className}`}>\n          <video\n            controls\n            className=\"w-full rounded-md shadow-md\"\n            preload=\"metadata\"\n            data-testid=\"video-single\"\n          >\n            <source src={item.url} />\n            Your browser does not support the video tag.\n          </video>\n        </div>\n      );\n    } else {\n      // Single image - use PhotoSwipe with proper aspect ratio\n      return (\n        <Gallery options={{ \n          showHideOpacity: true,\n          zoom: false, // Disable zoom to prevent stretching\n          allowPanToNext: false,\n          bgOpacity: 0.95,\n          // Maintain aspect ratio settings\n          padding: { top: 40, bottom: 40, left: 0, right: 0 },\n          // Prevent any stretching\n          initialZoomLevel: 'fit',\n          secondaryZoomLevel: 1.5,\n          maxZoomLevel: 3,\n        }}>\n          <div className={`my-6 ${className}`}>\n            <Item\n              original={item.url}\n              thumbnail={item.url}\n              width={item.width}\n              height={item.height}\n            >\n              {({ ref, open }) => (\n                <img\n                  ref={ref as React.Ref<HTMLImageElement>}\n                  onClick={open}\n                  src={item.url}\n                  alt=\"Journal image\"\n                  className=\"w-full rounded-md cursor-pointer hover-elevate transition-all\"\n                  data-testid=\"image-single\"\n                />\n              )}\n            </Item>\n          </div>\n        </Gallery>\n      );\n    }\n  }\n\n  // Multiple media grid layout\n  const gridClass = mediaItems.length === 2 \n    ? \"grid grid-cols-2 gap-3\"\n    : \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3\";\n\n  return (\n    <Gallery options={{ \n      showHideOpacity: true,\n      zoom: false, // Disable zoom to prevent stretching\n      bgOpacity: 0.95,\n      // Maintain aspect ratio settings\n      padding: { top: 40, bottom: 40, left: 0, right: 0 },\n      // Prevent any stretching - use 'fit' to maintain aspect ratio\n      initialZoomLevel: 'fit',\n      secondaryZoomLevel: 1.5,\n      maxZoomLevel: 3,\n    }}>\n      <div className={`my-6 ${className}`}>\n        <div className={gridClass}>\n          {mediaItems.map((item, index) => {\n            if (item.isVideo) {\n              // Video items show as video player with play overlay\n              return (\n                <Item\n                  key={index}\n                  html={`\n                    <video controls autoplay class=\"pswp__video\" style=\"width: 100%; height: 100%; object-fit: contain;\">\n                      <source src=\"${item.url}\" />\n                    </video>\n                  `}\n                  thumbnail={item.url}\n                  width={item.width}\n                  height={item.height}\n                >\n                  {({ ref, open }) => (\n                    <div\n                      ref={ref as React.Ref<HTMLDivElement>}\n                      onClick={open}\n                      className=\"relative aspect-square overflow-hidden rounded-md cursor-pointer hover-elevate transition-all group\"\n                      data-testid={`video-gallery-${index}`}\n                    >\n                      <video\n                        src={item.url}\n                        className=\"w-full h-full object-cover\"\n                        muted\n                      />\n                      <div className=\"absolute inset-0 bg-black/20 flex items-center justify-center group-hover:bg-black/30 transition-colors\">\n                        <Play className=\"w-12 h-12 text-white drop-shadow-lg\" />\n                      </div>\n                    </div>\n                  )}\n                </Item>\n              );\n            } else {\n              // Image items\n              return (\n                <Item\n                  key={index}\n                  original={item.url}\n                  thumbnail={item.url}\n                  width={item.width}\n                  height={item.height}\n                >\n                  {({ ref, open }) => (\n                    <div\n                      ref={ref as React.Ref<HTMLDivElement>}\n                      onClick={open}\n                      className=\"relative aspect-square overflow-hidden rounded-md cursor-pointer hover-elevate transition-all group\"\n                      data-testid={`image-gallery-${index}`}\n                    >\n                      <img\n                        src={item.url}\n                        alt={`Gallery image ${index + 1}`}\n                        className=\"w-full h-full object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors\" />\n                    </div>\n                  )}\n                </Item>\n              );\n            }\n          })}\n        </div>\n      </div>\n    </Gallery>\n  );\n}\n","size_bytes":6842},"client/src/components/InstagramEmbed.tsx":{"content":"import { InstagramEmbed as SocialInstagramEmbed } from 'react-social-media-embed';\n\ninterface InstagramEmbedProps {\n  url: string;\n  className?: string;\n}\n\nexport function InstagramEmbed({ url, className = \"\" }: InstagramEmbedProps) {\n  return (\n    <div className={`instagram-embed-container ${className}`}>\n      {/* Instagram embed using react-social-media-embed */}\n      <div className=\"instagram-iframe-wrapper\" style={{ display: 'flex', justifyContent: 'center' }}>\n        <SocialInstagramEmbed \n          url={url}\n          width={380}\n          placeholderImageUrl=\"\"\n          placeholderSpinnerDisabled={false}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":665},"client/src/components/InstagramGallery.tsx":{"content":"import { useState } from \"react\";\nimport { Play, Grid3X3, ChevronLeft, ChevronRight, Instagram, Plus } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { InstagramEmbed } from \"./InstagramEmbed\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface InstagramGalleryProps {\n  urls: string[];\n}\n\nexport default function InstagramGallery({ urls }: InstagramGalleryProps) {\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\n  const [isGalleryOpen, setIsGalleryOpen] = useState(false);\n\n  // Parse URLs to determine if they're reels or posts\n  const getInstagramType = (url: string): \"reel\" | \"post\" => {\n    const cleanUrl = url.split('?')[0];\n    if (cleanUrl.includes('/reel/') || cleanUrl.includes('/tv/')) {\n      return \"reel\";\n    }\n    return \"post\";\n  };\n\n  // Get Instagram ID from URL for display\n  const getInstagramId = (url: string): string | null => {\n    const cleanUrl = url.split('?')[0];\n    const reelMatch = cleanUrl.match(/\\/(reel|p|tv)\\/([a-zA-Z0-9_-]+)/);\n    return reelMatch ? reelMatch[2] : null;\n  };\n\n  const handlePrevious = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (selectedIndex !== null && selectedIndex > 0) {\n      setSelectedIndex(selectedIndex - 1);\n    }\n  };\n\n  const handleNext = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (selectedIndex !== null && selectedIndex < urls.length - 1) {\n      setSelectedIndex(selectedIndex + 1);\n    }\n  };\n\n  const handleOpenGallery = (startIndex: number = 0) => {\n    setSelectedIndex(startIndex);\n    setIsGalleryOpen(true);\n  };\n\n  const handleCloseGallery = () => {\n    setIsGalleryOpen(false);\n    setSelectedIndex(null);\n  };\n\n  // Count types for display\n  const countTypes = () => {\n    let reels = 0;\n    let posts = 0;\n    urls.forEach(url => {\n      if (getInstagramType(url) === \"reel\") {\n        reels++;\n      } else {\n        posts++;\n      }\n    });\n    return { reels, posts };\n  };\n\n  // If only one URL, just show the embed\n  if (urls.length === 1) {\n    return <InstagramEmbed url={urls[0]} className=\"my-0\" />;\n  }\n\n  const { reels, posts } = countTypes();\n  const remainingCount = urls.length - 1;\n\n  return (\n    <>\n      {/* Main display: First post + More indicator */}\n      <div className=\"flex flex-col lg:flex-row gap-4 items-start my-6\">\n        {/* First Instagram Post - Full Display */}\n        <div className=\"flex-1 w-full lg:max-w-[500px]\">\n          <InstagramEmbed url={urls[0]} className=\"my-0\" />\n        </div>\n\n        {/* More Indicator Card */}\n        {remainingCount > 0 && (\n          <Card \n            className=\"relative overflow-hidden cursor-pointer group hover-elevate active-elevate-2 transition-all duration-300 w-full lg:w-auto lg:min-w-[200px]\"\n            onClick={() => handleOpenGallery(1)}\n            data-testid=\"button-instagram-more\"\n          >\n            <div className=\"p-6 lg:p-8\">\n              {/* Background gradient effect */}\n              <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 via-pink-500/10 to-orange-500/10 opacity-0 group-hover:opacity-100 transition-opacity\" />\n              \n              {/* Content */}\n              <div className=\"relative flex flex-col items-center text-center space-y-3\">\n                {/* Instagram gradient circle */}\n                <div className=\"p-4 rounded-full bg-gradient-to-br from-purple-500 via-pink-500 to-orange-500 shadow-lg\">\n                  <Plus className=\"w-8 h-8 text-white\" />\n                </div>\n                \n                {/* Count display */}\n                <div>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    +{remainingCount} more\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {remainingCount === 1 ? (\n                      getInstagramType(urls[1]) === \"reel\" ? \"Reel\" : \"Post\"\n                    ) : (\n                      <>\n                        {reels > 0 && `${reels} Reel${reels > 1 ? 's' : ''}`}\n                        {reels > 0 && posts > 0 && ' & '}\n                        {posts > 0 && `${posts} Post${posts > 1 ? 's' : ''}`}\n                      </>\n                    )}\n                  </p>\n                </div>\n\n                {/* Call to action */}\n                <p className=\"text-xs text-muted-foreground group-hover:text-foreground transition-colors\">\n                  Click to view all\n                </p>\n              </div>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* Gallery Dialog with all posts */}\n      <Dialog open={isGalleryOpen} onOpenChange={handleCloseGallery}>\n        <DialogContent className=\"w-[90vw] sm:w-[85vw] md:w-[75vw] lg:w-[65vw] max-w-3xl max-h-[90vh] overflow-hidden flex flex-col\">\n          <DialogTitle className=\"sr-only\">\n            Instagram Gallery - {selectedIndex !== null ? selectedIndex + 1 : 1} of {urls.length}\n          </DialogTitle>\n          <DialogDescription className=\"sr-only\">\n            Navigate through Instagram {urls.length > 1 ? 'posts and reels' : getInstagramType(urls[0])}\n          </DialogDescription>\n          {/* Navigation Controls Bar - Fixed at top */}\n          {urls.length > 1 && selectedIndex !== null && (\n            <div className=\"flex justify-between items-center gap-2 sm:gap-4 p-4 sm:p-6 sm:pb-4 border-b bg-background\">\n              <Button\n                onClick={handlePrevious}\n                disabled={selectedIndex === 0}\n                className=\"flex items-center gap-1 sm:gap-2\"\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-instagram-previous\"\n                aria-label=\"Previous post\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Previous</span>\n              </Button>\n              \n              {/* Page indicators */}\n              <div className=\"flex gap-1\">\n                {urls.map((_, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setSelectedIndex(index)}\n                    className={`w-2 h-2 rounded-full transition-all ${\n                      index === selectedIndex \n                        ? \"bg-primary w-6\" \n                        : \"bg-muted hover:bg-muted-foreground/50\"\n                    }`}\n                    aria-label={`Go to item ${index + 1}`}\n                  />\n                ))}\n              </div>\n              \n              <Button\n                onClick={handleNext}\n                disabled={selectedIndex === urls.length - 1}\n                className=\"flex items-center gap-1 sm:gap-2\"\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-instagram-next\"\n                aria-label=\"Next post\"\n              >\n                <span className=\"hidden sm:inline\">Next</span>\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          )}\n          \n          {/* Content area - scrollable to ensure full visibility */}\n          <div className=\"flex-1 overflow-y-auto overflow-x-hidden px-4 sm:px-6 py-4\">\n            {/* Instagram Embed Container - centered */}\n            <div className=\"relative w-full flex items-center justify-center\">\n              {selectedIndex !== null && (\n                <InstagramEmbed \n                  key={`instagram-${selectedIndex}-${urls[selectedIndex]}`}\n                  url={urls[selectedIndex]} \n                  className=\"my-0\"\n                />\n              )}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":7822},"client/src/pages/test-gallery.tsx":{"content":"import InstagramGallery from \"@/components/InstagramGallery\";\n\nexport default function TestGallery() {\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-2xl font-bold mb-4\">New Instagram Gallery Navigation</h1>\n        <p className=\"mb-6\">\n          Click \"+2 more\" to open the gallery. The navigation is now in a control bar below the Instagram content - much more reliable!\n        </p>\n        \n        <div className=\"space-y-8\">\n          <div className=\"border rounded-lg p-6 bg-card\">\n            <h2 className=\"text-lg font-semibold mb-4\">Gallery with 3 items (Post + Reel + Post)</h2>\n            <InstagramGallery urls={[\n              \"https://www.instagram.com/p/C3LZuNOPQx5/\",\n              \"https://www.instagram.com/reel/C9HQoUJp0c5/\",\n              \"https://www.instagram.com/p/C2kZ_NvOQx5/\"\n            ]} />\n          </div>\n          \n          <div className=\"border rounded-lg p-6 bg-card\">\n            <h2 className=\"text-lg font-semibold mb-4\">Gallery with 2 posts</h2>\n            <InstagramGallery urls={[\n              \"https://www.instagram.com/p/C3LZuNOPQx5/\",\n              \"https://www.instagram.com/p/C5LZuNOPQx5/\"\n            ]} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1310},"client/src/pages/liked-sections.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Heart, ArrowLeft } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { PolaroidCard } from \"@/components/PolaroidCard\";\nimport type { Section, Chapter } from \"@shared/schema\";\n\nexport default function LikedSections() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  // Fetch all liked sections for the user\n  const { data: likedSections = [], isLoading } = useQuery<Section[]>({\n    queryKey: [`/api/users/${user?.id}/liked-sections`],\n    queryFn: () => user?.id \n      ? fetch(`/api/users/${user.id}/liked-sections`).then(r => r.json()) \n      : Promise.resolve([]),\n    enabled: !!user?.id,\n  });\n\n  // Fetch all chapters to show which chapter each section belongs to\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: [\"/api/chapters\"],\n  });\n\n  // Create a map of chapter IDs to chapter objects for quick lookup\n  const chapterMap = new Map<string, Chapter>();\n  chapters.forEach(chapter => {\n    chapterMap.set(chapter.id, chapter);\n  });\n\n  // Group liked sections by chapter\n  const sectionsByChapter = likedSections.reduce((acc, section) => {\n    const chapterId = section.chapterId;\n    if (!acc[chapterId]) {\n      acc[chapterId] = [];\n    }\n    acc[chapterId].push(section);\n    return acc;\n  }, {} as Record<string, Section[]>);\n\n  const handleBack = () => {\n    setLocation(\"/\");\n  };\n\n  const handleSectionClick = (sectionId: string) => {\n    setLocation(`/read/${sectionId}`);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-kdrama-cream/40 via-kdrama-sakura/20 to-kdrama-lavender/20 flex items-center justify-center\">\n        <Card className=\"max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"font-myeongjo\">Login Required</CardTitle>\n            <CardDescription className=\"font-noto\">\n              Please login to view your liked sections\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={() => setLocation(\"/login\")} className=\"w-full\">\n              Go to Login\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-kdrama-cream/40 via-kdrama-sakura/20 to-kdrama-lavender/20\">\n      <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-kdrama-thread via-kdrama-sakura to-kdrama-lavender\" />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleBack}\n            className=\"h-10 w-10\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-3\">\n              <Heart className=\"w-8 h-8 text-kdrama-rose fill-kdrama-rose/50\" />\n              <h1 className=\"font-myeongjo text-3xl md:text-4xl font-bold text-kdrama-ink dark:text-foreground\">\n                Liked Sections\n              </h1>\n            </div>\n            <p className=\"font-noto text-muted-foreground mt-2\">\n              Your collection of favorite moments from the journal\n            </p>\n          </div>\n\n          <Badge variant=\"secondary\" className=\"font-noto\">\n            {likedSections.length} {likedSections.length === 1 ? \"Section\" : \"Sections\"}\n          </Badge>\n        </div>\n\n        {/* Content */}\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"font-noto text-muted-foreground\">Loading your liked sections...</p>\n          </div>\n        ) : likedSections.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <Heart className=\"w-16 h-16 text-kdrama-rose/30 mx-auto mb-4\" />\n            <p className=\"font-noto text-lg text-muted-foreground\">\n              You haven't liked any sections yet.\n            </p>\n            <p className=\"font-noto text-sm text-muted-foreground mt-2\">\n              Start exploring chapters and like sections to save them here!\n            </p>\n            <Button \n              onClick={handleBack} \n              className=\"mt-6\"\n              data-testid=\"button-explore\"\n            >\n              Explore Chapters\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-8\">\n            {Object.entries(sectionsByChapter).map(([chapterId, sections]) => {\n              const chapter = chapterMap.get(chapterId);\n              return (\n                <div key={chapterId} className=\"space-y-4\">\n                  {/* Chapter Header */}\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <div className=\"h-px flex-1 bg-border\" />\n                    <h2 className=\"font-myeongjo text-xl font-semibold text-kdrama-ink dark:text-foreground px-4\">\n                      {chapter?.title || \"Unknown Chapter\"}\n                    </h2>\n                    <div className=\"h-px flex-1 bg-border\" />\n                  </div>\n\n                  {/* Sections Grid */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {sections.map((section) => (\n                      <PolaroidCard\n                        key={section.id}\n                        title={section.title}\n                        coverUrl={section.thumbnail || undefined}\n                        mood={section.mood || undefined}\n                        tags={section.tags || []}\n                        onClick={() => handleSectionClick(section.id)}\n                      />\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6169}},"version":2}